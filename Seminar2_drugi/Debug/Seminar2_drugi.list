
Seminar2_drugi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005094  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  0800521c  0800521c  0000621c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005258  08005258  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  08005258  08005258  00006258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005260  08005260  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005260  08005260  00006260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005264  08005264  00006264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005268  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007068  2**0
                  CONTENTS
 10 .bss          0000038c  20000068  20000068  00007068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200003f4  200003f4  00007068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f1d8  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002234  00000000  00000000  00016270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e70  00000000  00000000  000184a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b41  00000000  00000000  00019318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022276  00000000  00000000  00019e59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000101cb  00000000  00000000  0003c0cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cf8c1  00000000  00000000  0004c29a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011bb5b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004368  00000000  00000000  0011bba0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005c  00000000  00000000  0011ff08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000068 	.word	0x20000068
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005204 	.word	0x08005204

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000006c 	.word	0x2000006c
 80001c4:	08005204 	.word	0x08005204

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <napraviPoruku>:
extern CAN_HandleTypeDef hcan1;
extern CAN_TxHeaderTypeDef TxHeader;
extern uint8_t txData[8];
extern uint32_t TxMailbox[3];

void napraviPoruku(CAN_TxHeaderTypeDef *TxHeader,uint32_t broj) {
 80004b8:	b480      	push	{r7}
 80004ba:	b083      	sub	sp, #12
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
 80004c0:	6039      	str	r1, [r7, #0]

	 TxHeader -> StdId = broj;
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	683a      	ldr	r2, [r7, #0]
 80004c6:	601a      	str	r2, [r3, #0]
	 TxHeader -> ExtId = 0;
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	2200      	movs	r2, #0
 80004cc:	605a      	str	r2, [r3, #4]
	 TxHeader ->IDE = 0;
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	2200      	movs	r2, #0
 80004d2:	609a      	str	r2, [r3, #8]
	 TxHeader -> RTR = 0;
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	2200      	movs	r2, #0
 80004d8:	60da      	str	r2, [r3, #12]
	 TxHeader -> DLC = 1;
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	2201      	movs	r2, #1
 80004de:	611a      	str	r2, [r3, #16]


}
 80004e0:	bf00      	nop
 80004e2:	370c      	adds	r7, #12
 80004e4:	46bd      	mov	sp, r7
 80004e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ea:	4770      	bx	lr

080004ec <posaljiPoruku>:
void posaljiPoruku (CAN_TxHeaderTypeDef *TxHeader,uint8_t brojMailboxa) {
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
 80004f4:	460b      	mov	r3, r1
 80004f6:	70fb      	strb	r3, [r7, #3]

	if(HAL_CAN_AddTxMessage(&hcan1, TxHeader, txData, &TxMailbox[brojMailboxa]) != HAL_OK) {
 80004f8:	78fb      	ldrb	r3, [r7, #3]
 80004fa:	009b      	lsls	r3, r3, #2
 80004fc:	4a07      	ldr	r2, [pc, #28]	@ (800051c <posaljiPoruku+0x30>)
 80004fe:	4413      	add	r3, r2
 8000500:	4a07      	ldr	r2, [pc, #28]	@ (8000520 <posaljiPoruku+0x34>)
 8000502:	6879      	ldr	r1, [r7, #4]
 8000504:	4807      	ldr	r0, [pc, #28]	@ (8000524 <posaljiPoruku+0x38>)
 8000506:	f001 f835 	bl	8001574 <HAL_CAN_AddTxMessage>
 800050a:	4603      	mov	r3, r0
 800050c:	2b00      	cmp	r3, #0
 800050e:	d001      	beq.n	8000514 <posaljiPoruku+0x28>
		Error_Handler();
 8000510:	f000 fafa 	bl	8000b08 <Error_Handler>
	};

}
 8000514:	bf00      	nop
 8000516:	3708      	adds	r7, #8
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}
 800051c:	2000028c 	.word	0x2000028c
 8000520:	2000027c 	.word	0x2000027c
 8000524:	20000144 	.word	0x20000144

08000528 <_write>:
void napraviPoruku(CAN_TxHeaderTypeDef *TxHeader,uint32_t broj);
void posaljiPoruku (CAN_TxHeaderTypeDef *TxHeader,uint8_t brojMailboxa);
void konfigurirajPoruke(void);
void vrtiServoMotor(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 8000528:	b580      	push	{r7, lr}
 800052a:	b084      	sub	sp, #16
 800052c:	af00      	add	r7, sp, #0
 800052e:	60f8      	str	r0, [r7, #12]
 8000530:	60b9      	str	r1, [r7, #8]
 8000532:	607a      	str	r2, [r7, #4]

	HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	b29a      	uxth	r2, r3
 8000538:	f04f 33ff 	mov.w	r3, #4294967295
 800053c:	68b9      	ldr	r1, [r7, #8]
 800053e:	4804      	ldr	r0, [pc, #16]	@ (8000550 <_write+0x28>)
 8000540:	f003 fdf8 	bl	8004134 <HAL_UART_Transmit>
	return len;
 8000544:	687b      	ldr	r3, [r7, #4]
}
 8000546:	4618      	mov	r0, r3
 8000548:	3710      	adds	r7, #16
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	20000214 	.word	0x20000214

08000554 <HAL_CAN_RxFifo0MsgPendingCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]

	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, rxData);
 800055c:	4b04      	ldr	r3, [pc, #16]	@ (8000570 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>)
 800055e:	4a05      	ldr	r2, [pc, #20]	@ (8000574 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>)
 8000560:	2100      	movs	r1, #0
 8000562:	6878      	ldr	r0, [r7, #4]
 8000564:	f001 f90b 	bl	800177e <HAL_CAN_GetRxMessage>
//	TIM1->CCR1 = 121;
//	printf("Desno\r\n");
//	HAL_Delay(500);

}
 8000568:	bf00      	nop
 800056a:	3708      	adds	r7, #8
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	20000284 	.word	0x20000284
 8000574:	20000260 	.word	0x20000260

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057e:	f000 fd43 	bl	8001008 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000582:	f000 f8cd 	bl	8000720 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000586:	f000 fa7b 	bl	8000a80 <MX_GPIO_Init>
  MX_DMA_Init();
 800058a:	f000 fa59 	bl	8000a40 <MX_DMA_Init>
  MX_TIM1_Init();
 800058e:	f000 f98b 	bl	80008a8 <MX_TIM1_Init>
  MX_CAN1_Init();
 8000592:	f000 f92f 	bl	80007f4 <MX_CAN1_Init>
  MX_USART2_UART_Init();
 8000596:	f000 fa29 	bl	80009ec <MX_USART2_UART_Init>

//  gotovo = HAL_NVIC_GetPriorityGrouping();
//  HAL_NVIC_GetPriority(SysTick_IRQn, 3, &preemp, &subprio);
//  HAL_NVIC_GetPriority(CAN1_RX0_IRQn, 3, &preemp, &subprio);

  konfigurirajPoruke();
 800059a:	f000 f885 	bl	80006a8 <konfigurirajPoruke>

  HAL_CAN_Start(&hcan1);
 800059e:	4823      	ldr	r0, [pc, #140]	@ (800062c <main+0xb4>)
 80005a0:	f000 ffa4 	bl	80014ec <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80005a4:	2102      	movs	r1, #2
 80005a6:	4821      	ldr	r0, [pc, #132]	@ (800062c <main+0xb4>)
 80005a8:	f001 fa0b 	bl	80019c2 <HAL_CAN_ActivateNotification>

  TIM1 -> CCR1 = 88;
 80005ac:	4b20      	ldr	r3, [pc, #128]	@ (8000630 <main+0xb8>)
 80005ae:	2258      	movs	r2, #88	@ 0x58
 80005b0:	635a      	str	r2, [r3, #52]	@ 0x34
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80005b2:	2100      	movs	r1, #0
 80005b4:	481f      	ldr	r0, [pc, #124]	@ (8000634 <main+0xbc>)
 80005b6:	f002 ff31 	bl	800341c <HAL_TIM_PWM_Start>
  while (1)
    {
	  slobodan = HAL_CAN_GetTxMailboxesFreeLevel(&hcan1);
 80005ba:	481c      	ldr	r0, [pc, #112]	@ (800062c <main+0xb4>)
 80005bc:	f001 f8aa 	bl	8001714 <HAL_CAN_GetTxMailboxesFreeLevel>
 80005c0:	4603      	mov	r3, r0
 80005c2:	4a1d      	ldr	r2, [pc, #116]	@ (8000638 <main+0xc0>)
 80005c4:	6013      	str	r3, [r2, #0]
	  if (slobodan > 0) {
 80005c6:	4b1c      	ldr	r3, [pc, #112]	@ (8000638 <main+0xc0>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d0f5      	beq.n	80005ba <main+0x42>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005ce:	b672      	cpsid	i
}
 80005d0:	bf00      	nop
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80005d2:	f3ef 8310 	mrs	r3, PRIMASK
 80005d6:	607b      	str	r3, [r7, #4]
  return(result);
 80005d8:	687b      	ldr	r3, [r7, #4]
		  __disable_irq();
		  prim = __get_PRIMASK();
 80005da:	4a18      	ldr	r2, [pc, #96]	@ (800063c <main+0xc4>)
 80005dc:	6013      	str	r3, [r2, #0]

		  vrijednost_registra = hcan1.Instance -> TSR;
 80005de:	4b13      	ldr	r3, [pc, #76]	@ (800062c <main+0xb4>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	689b      	ldr	r3, [r3, #8]
 80005e4:	4a16      	ldr	r2, [pc, #88]	@ (8000640 <main+0xc8>)
 80005e6:	6013      	str	r3, [r2, #0]
		  posaljiPoruku(&masterprvaPoruka, 0);
 80005e8:	2100      	movs	r1, #0
 80005ea:	4816      	ldr	r0, [pc, #88]	@ (8000644 <main+0xcc>)
 80005ec:	f7ff ff7e 	bl	80004ec <posaljiPoruku>
		  vrijednost_registra = hcan1.Instance -> TSR;
 80005f0:	4b0e      	ldr	r3, [pc, #56]	@ (800062c <main+0xb4>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	689b      	ldr	r3, [r3, #8]
 80005f6:	4a12      	ldr	r2, [pc, #72]	@ (8000640 <main+0xc8>)
 80005f8:	6013      	str	r3, [r2, #0]
		  posaljiPoruku(&masterdrugaPoruka, 1);
 80005fa:	2101      	movs	r1, #1
 80005fc:	4812      	ldr	r0, [pc, #72]	@ (8000648 <main+0xd0>)
 80005fe:	f7ff ff75 	bl	80004ec <posaljiPoruku>
		  //slobodan = HAL_CAN_GetTxMailboxesFreeLevel(&hcan1);
		  //vrijednost_registra = hcan1.Instance -> TSR;
		  posaljiPoruku(&mastertrecaPoruka, 2);
 8000602:	2102      	movs	r1, #2
 8000604:	4811      	ldr	r0, [pc, #68]	@ (800064c <main+0xd4>)
 8000606:	f7ff ff71 	bl	80004ec <posaljiPoruku>
		  vrijednost_registra = hcan1.Instance -> TSR;
 800060a:	4b08      	ldr	r3, [pc, #32]	@ (800062c <main+0xb4>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	689b      	ldr	r3, [r3, #8]
 8000610:	4a0b      	ldr	r2, [pc, #44]	@ (8000640 <main+0xc8>)
 8000612:	6013      	str	r3, [r2, #0]
		  HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000614:	2014      	movs	r0, #20
 8000616:	f001 fd20 	bl	800205a <HAL_NVIC_EnableIRQ>
		  switch(RxHeader.StdId) {
 800061a:	4b0d      	ldr	r3, [pc, #52]	@ (8000650 <main+0xd8>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8000622:	d1ca      	bne.n	80005ba <main+0x42>

		  case 0x700:
			  vrtiServoMotor();
 8000624:	f000 f816 	bl	8000654 <vrtiServoMotor>
			  break;
 8000628:	bf00      	nop
	  slobodan = HAL_CAN_GetTxMailboxesFreeLevel(&hcan1);
 800062a:	e7c6      	b.n	80005ba <main+0x42>
 800062c:	20000144 	.word	0x20000144
 8000630:	40010000 	.word	0x40010000
 8000634:	2000016c 	.word	0x2000016c
 8000638:	20000298 	.word	0x20000298
 800063c:	2000025c 	.word	0x2000025c
 8000640:	2000029c 	.word	0x2000029c
 8000644:	200000e4 	.word	0x200000e4
 8000648:	200000fc 	.word	0x200000fc
 800064c:	20000114 	.word	0x20000114
 8000650:	20000260 	.word	0x20000260

08000654 <vrtiServoMotor>:
}
/**
  * @brief System Clock Configuration
  * @retval None
  */
void vrtiServoMotor(void) {
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0

	TIM1->CCR1 = 88;
 8000658:	4b0f      	ldr	r3, [pc, #60]	@ (8000698 <vrtiServoMotor+0x44>)
 800065a:	2258      	movs	r2, #88	@ 0x58
 800065c:	635a      	str	r2, [r3, #52]	@ 0x34
	printf("Sredina\r\n");
 800065e:	480f      	ldr	r0, [pc, #60]	@ (800069c <vrtiServoMotor+0x48>)
 8000660:	f004 fa3c 	bl	8004adc <puts>
	HAL_Delay(500);
 8000664:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000668:	f000 fd40 	bl	80010ec <HAL_Delay>
	TIM1->CCR1 = 55;
 800066c:	4b0a      	ldr	r3, [pc, #40]	@ (8000698 <vrtiServoMotor+0x44>)
 800066e:	2237      	movs	r2, #55	@ 0x37
 8000670:	635a      	str	r2, [r3, #52]	@ 0x34
	printf("Lijevo\r\n");
 8000672:	480b      	ldr	r0, [pc, #44]	@ (80006a0 <vrtiServoMotor+0x4c>)
 8000674:	f004 fa32 	bl	8004adc <puts>
	HAL_Delay(500);
 8000678:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800067c:	f000 fd36 	bl	80010ec <HAL_Delay>
	TIM1->CCR1 = 121;
 8000680:	4b05      	ldr	r3, [pc, #20]	@ (8000698 <vrtiServoMotor+0x44>)
 8000682:	2279      	movs	r2, #121	@ 0x79
 8000684:	635a      	str	r2, [r3, #52]	@ 0x34
	printf("Desno\r\n");
 8000686:	4807      	ldr	r0, [pc, #28]	@ (80006a4 <vrtiServoMotor+0x50>)
 8000688:	f004 fa28 	bl	8004adc <puts>
	HAL_Delay(500);
 800068c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000690:	f000 fd2c 	bl	80010ec <HAL_Delay>


}
 8000694:	bf00      	nop
 8000696:	bd80      	pop	{r7, pc}
 8000698:	40010000 	.word	0x40010000
 800069c:	0800521c 	.word	0x0800521c
 80006a0:	08005228 	.word	0x08005228
 80006a4:	08005230 	.word	0x08005230

080006a8 <konfigurirajPoruke>:
//	if(HAL_CAN_AddTxMessage(&hcan1, TxHeader, txData, &TxMailbox[brojMailboxa]) != HAL_OK) {
//		Error_Handler();
//	};
//}

void konfigurirajPoruke(void) {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0

	napraviPoruku(&prvaPoruka,0x600);
 80006ac:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80006b0:	4813      	ldr	r0, [pc, #76]	@ (8000700 <konfigurirajPoruke+0x58>)
 80006b2:	f7ff ff01 	bl	80004b8 <napraviPoruku>
	napraviPoruku(&drugaPoruka,0x601);
 80006b6:	f240 6101 	movw	r1, #1537	@ 0x601
 80006ba:	4812      	ldr	r0, [pc, #72]	@ (8000704 <konfigurirajPoruke+0x5c>)
 80006bc:	f7ff fefc 	bl	80004b8 <napraviPoruku>
	napraviPoruku(&trecaPoruka,0x602);
 80006c0:	f240 6102 	movw	r1, #1538	@ 0x602
 80006c4:	4810      	ldr	r0, [pc, #64]	@ (8000708 <konfigurirajPoruke+0x60>)
 80006c6:	f7ff fef7 	bl	80004b8 <napraviPoruku>
	napraviPoruku(&cetvrtaPoruka,0x603);
 80006ca:	f240 6103 	movw	r1, #1539	@ 0x603
 80006ce:	480f      	ldr	r0, [pc, #60]	@ (800070c <konfigurirajPoruke+0x64>)
 80006d0:	f7ff fef2 	bl	80004b8 <napraviPoruku>
	napraviPoruku(&masterprvaPoruka,0x700);
 80006d4:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 80006d8:	480d      	ldr	r0, [pc, #52]	@ (8000710 <konfigurirajPoruke+0x68>)
 80006da:	f7ff feed 	bl	80004b8 <napraviPoruku>
	napraviPoruku(&masterdrugaPoruka,0x701);
 80006de:	f240 7101 	movw	r1, #1793	@ 0x701
 80006e2:	480c      	ldr	r0, [pc, #48]	@ (8000714 <konfigurirajPoruke+0x6c>)
 80006e4:	f7ff fee8 	bl	80004b8 <napraviPoruku>
	napraviPoruku(&mastertrecaPoruka,0x702);
 80006e8:	f240 7102 	movw	r1, #1794	@ 0x702
 80006ec:	480a      	ldr	r0, [pc, #40]	@ (8000718 <konfigurirajPoruke+0x70>)
 80006ee:	f7ff fee3 	bl	80004b8 <napraviPoruku>
	napraviPoruku(&mastercetvrtaPoruka,0x703);
 80006f2:	f240 7103 	movw	r1, #1795	@ 0x703
 80006f6:	4809      	ldr	r0, [pc, #36]	@ (800071c <konfigurirajPoruke+0x74>)
 80006f8:	f7ff fede 	bl	80004b8 <napraviPoruku>



}
 80006fc:	bf00      	nop
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	20000084 	.word	0x20000084
 8000704:	2000009c 	.word	0x2000009c
 8000708:	200000b4 	.word	0x200000b4
 800070c:	200000cc 	.word	0x200000cc
 8000710:	200000e4 	.word	0x200000e4
 8000714:	200000fc 	.word	0x200000fc
 8000718:	20000114 	.word	0x20000114
 800071c:	2000012c 	.word	0x2000012c

08000720 <SystemClock_Config>:



void SystemClock_Config(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b094      	sub	sp, #80	@ 0x50
 8000724:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000726:	f107 0320 	add.w	r3, r7, #32
 800072a:	2230      	movs	r2, #48	@ 0x30
 800072c:	2100      	movs	r1, #0
 800072e:	4618      	mov	r0, r3
 8000730:	f004 fab4 	bl	8004c9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000734:	f107 030c 	add.w	r3, r7, #12
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]
 800073e:	609a      	str	r2, [r3, #8]
 8000740:	60da      	str	r2, [r3, #12]
 8000742:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000744:	2300      	movs	r3, #0
 8000746:	60bb      	str	r3, [r7, #8]
 8000748:	4b28      	ldr	r3, [pc, #160]	@ (80007ec <SystemClock_Config+0xcc>)
 800074a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800074c:	4a27      	ldr	r2, [pc, #156]	@ (80007ec <SystemClock_Config+0xcc>)
 800074e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000752:	6413      	str	r3, [r2, #64]	@ 0x40
 8000754:	4b25      	ldr	r3, [pc, #148]	@ (80007ec <SystemClock_Config+0xcc>)
 8000756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000758:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800075c:	60bb      	str	r3, [r7, #8]
 800075e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000760:	2300      	movs	r3, #0
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	4b22      	ldr	r3, [pc, #136]	@ (80007f0 <SystemClock_Config+0xd0>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a21      	ldr	r2, [pc, #132]	@ (80007f0 <SystemClock_Config+0xd0>)
 800076a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800076e:	6013      	str	r3, [r2, #0]
 8000770:	4b1f      	ldr	r3, [pc, #124]	@ (80007f0 <SystemClock_Config+0xd0>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000778:	607b      	str	r3, [r7, #4]
 800077a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800077c:	2301      	movs	r3, #1
 800077e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000780:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000784:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000786:	2302      	movs	r3, #2
 8000788:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800078a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800078e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000790:	2304      	movs	r3, #4
 8000792:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000794:	2340      	movs	r3, #64	@ 0x40
 8000796:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000798:	2302      	movs	r3, #2
 800079a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800079c:	2307      	movs	r3, #7
 800079e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a0:	f107 0320 	add.w	r3, r7, #32
 80007a4:	4618      	mov	r0, r3
 80007a6:	f002 f8f9 	bl	800299c <HAL_RCC_OscConfig>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007b0:	f000 f9aa 	bl	8000b08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b4:	230f      	movs	r3, #15
 80007b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b8:	2302      	movs	r3, #2
 80007ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007bc:	2300      	movs	r3, #0
 80007be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80007c6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80007ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007cc:	f107 030c 	add.w	r3, r7, #12
 80007d0:	2102      	movs	r1, #2
 80007d2:	4618      	mov	r0, r3
 80007d4:	f002 fb5a 	bl	8002e8c <HAL_RCC_ClockConfig>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007de:	f000 f993 	bl	8000b08 <Error_Handler>
  }
}
 80007e2:	bf00      	nop
 80007e4:	3750      	adds	r7, #80	@ 0x50
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	40023800 	.word	0x40023800
 80007f0:	40007000 	.word	0x40007000

080007f4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b08a      	sub	sp, #40	@ 0x28
 80007f8:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80007fa:	4b29      	ldr	r3, [pc, #164]	@ (80008a0 <MX_CAN1_Init+0xac>)
 80007fc:	4a29      	ldr	r2, [pc, #164]	@ (80008a4 <MX_CAN1_Init+0xb0>)
 80007fe:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 8000800:	4b27      	ldr	r3, [pc, #156]	@ (80008a0 <MX_CAN1_Init+0xac>)
 8000802:	2204      	movs	r2, #4
 8000804:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_LOOPBACK;
 8000806:	4b26      	ldr	r3, [pc, #152]	@ (80008a0 <MX_CAN1_Init+0xac>)
 8000808:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800080c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800080e:	4b24      	ldr	r3, [pc, #144]	@ (80008a0 <MX_CAN1_Init+0xac>)
 8000810:	2200      	movs	r2, #0
 8000812:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000814:	4b22      	ldr	r3, [pc, #136]	@ (80008a0 <MX_CAN1_Init+0xac>)
 8000816:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 800081a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 800081c:	4b20      	ldr	r3, [pc, #128]	@ (80008a0 <MX_CAN1_Init+0xac>)
 800081e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000822:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000824:	4b1e      	ldr	r3, [pc, #120]	@ (80008a0 <MX_CAN1_Init+0xac>)
 8000826:	2200      	movs	r2, #0
 8000828:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800082a:	4b1d      	ldr	r3, [pc, #116]	@ (80008a0 <MX_CAN1_Init+0xac>)
 800082c:	2200      	movs	r2, #0
 800082e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000830:	4b1b      	ldr	r3, [pc, #108]	@ (80008a0 <MX_CAN1_Init+0xac>)
 8000832:	2200      	movs	r2, #0
 8000834:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8000836:	4b1a      	ldr	r3, [pc, #104]	@ (80008a0 <MX_CAN1_Init+0xac>)
 8000838:	2201      	movs	r2, #1
 800083a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800083c:	4b18      	ldr	r3, [pc, #96]	@ (80008a0 <MX_CAN1_Init+0xac>)
 800083e:	2200      	movs	r2, #0
 8000840:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000842:	4b17      	ldr	r3, [pc, #92]	@ (80008a0 <MX_CAN1_Init+0xac>)
 8000844:	2200      	movs	r2, #0
 8000846:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000848:	4815      	ldr	r0, [pc, #84]	@ (80008a0 <MX_CAN1_Init+0xac>)
 800084a:	f000 fc73 	bl	8001134 <HAL_CAN_Init>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_CAN1_Init+0x64>
  {
    Error_Handler();
 8000854:	f000 f958 	bl	8000b08 <Error_Handler>
  }
	CAN_FilterTypeDef filter;
	filter.FilterIdHigh = (0x600 << 5);
 8000858:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800085c:	603b      	str	r3, [r7, #0]
	filter.FilterIdLow = 0x0;
 800085e:	2300      	movs	r3, #0
 8000860:	607b      	str	r3, [r7, #4]
	filter.FilterMaskIdHigh = (0x600 << 5);
 8000862:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000866:	60bb      	str	r3, [r7, #8]
	filter.FilterMaskIdLow = 0x0;
 8000868:	2300      	movs	r3, #0
 800086a:	60fb      	str	r3, [r7, #12]
	filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800086c:	2300      	movs	r3, #0
 800086e:	613b      	str	r3, [r7, #16]
	filter.FilterBank = 5;
 8000870:	2305      	movs	r3, #5
 8000872:	617b      	str	r3, [r7, #20]
	filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8000874:	2300      	movs	r3, #0
 8000876:	61bb      	str	r3, [r7, #24]
	filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8000878:	2301      	movs	r3, #1
 800087a:	61fb      	str	r3, [r7, #28]
	filter.FilterActivation = CAN_FILTER_ENABLE;
 800087c:	2301      	movs	r3, #1
 800087e:	623b      	str	r3, [r7, #32]
	filter.SlaveStartFilterBank = 0;
 8000880:	2300      	movs	r3, #0
 8000882:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_CAN_ConfigFilter(&hcan1,&filter) != HAL_OK ) {
 8000884:	463b      	mov	r3, r7
 8000886:	4619      	mov	r1, r3
 8000888:	4805      	ldr	r0, [pc, #20]	@ (80008a0 <MX_CAN1_Init+0xac>)
 800088a:	f000 fd4f 	bl	800132c <HAL_CAN_ConfigFilter>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_CAN1_Init+0xa4>

	  Error_Handler();
 8000894:	f000 f938 	bl	8000b08 <Error_Handler>

	}

}
 8000898:	bf00      	nop
 800089a:	3728      	adds	r7, #40	@ 0x28
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	20000144 	.word	0x20000144
 80008a4:	40006400 	.word	0x40006400

080008a8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b096      	sub	sp, #88	@ 0x58
 80008ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008ae:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
 80008b6:	605a      	str	r2, [r3, #4]
 80008b8:	609a      	str	r2, [r3, #8]
 80008ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008bc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008ca:	2200      	movs	r2, #0
 80008cc:	601a      	str	r2, [r3, #0]
 80008ce:	605a      	str	r2, [r3, #4]
 80008d0:	609a      	str	r2, [r3, #8]
 80008d2:	60da      	str	r2, [r3, #12]
 80008d4:	611a      	str	r2, [r3, #16]
 80008d6:	615a      	str	r2, [r3, #20]
 80008d8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008da:	1d3b      	adds	r3, r7, #4
 80008dc:	2220      	movs	r2, #32
 80008de:	2100      	movs	r1, #0
 80008e0:	4618      	mov	r0, r3
 80008e2:	f004 f9db 	bl	8004c9c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008e6:	4b3f      	ldr	r3, [pc, #252]	@ (80009e4 <MX_TIM1_Init+0x13c>)
 80008e8:	4a3f      	ldr	r2, [pc, #252]	@ (80009e8 <MX_TIM1_Init+0x140>)
 80008ea:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 640-1;
 80008ec:	4b3d      	ldr	r3, [pc, #244]	@ (80009e4 <MX_TIM1_Init+0x13c>)
 80008ee:	f240 227f 	movw	r2, #639	@ 0x27f
 80008f2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008f4:	4b3b      	ldr	r3, [pc, #236]	@ (80009e4 <MX_TIM1_Init+0x13c>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 80008fa:	4b3a      	ldr	r3, [pc, #232]	@ (80009e4 <MX_TIM1_Init+0x13c>)
 80008fc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000900:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000902:	4b38      	ldr	r3, [pc, #224]	@ (80009e4 <MX_TIM1_Init+0x13c>)
 8000904:	2200      	movs	r2, #0
 8000906:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000908:	4b36      	ldr	r3, [pc, #216]	@ (80009e4 <MX_TIM1_Init+0x13c>)
 800090a:	2200      	movs	r2, #0
 800090c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800090e:	4b35      	ldr	r3, [pc, #212]	@ (80009e4 <MX_TIM1_Init+0x13c>)
 8000910:	2200      	movs	r2, #0
 8000912:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000914:	4833      	ldr	r0, [pc, #204]	@ (80009e4 <MX_TIM1_Init+0x13c>)
 8000916:	f002 fcd9 	bl	80032cc <HAL_TIM_Base_Init>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000920:	f000 f8f2 	bl	8000b08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000924:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000928:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800092a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800092e:	4619      	mov	r1, r3
 8000930:	482c      	ldr	r0, [pc, #176]	@ (80009e4 <MX_TIM1_Init+0x13c>)
 8000932:	f002 fefd 	bl	8003730 <HAL_TIM_ConfigClockSource>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800093c:	f000 f8e4 	bl	8000b08 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000940:	4828      	ldr	r0, [pc, #160]	@ (80009e4 <MX_TIM1_Init+0x13c>)
 8000942:	f002 fd12 	bl	800336a <HAL_TIM_PWM_Init>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800094c:	f000 f8dc 	bl	8000b08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000950:	2300      	movs	r3, #0
 8000952:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000954:	2300      	movs	r3, #0
 8000956:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000958:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800095c:	4619      	mov	r1, r3
 800095e:	4821      	ldr	r0, [pc, #132]	@ (80009e4 <MX_TIM1_Init+0x13c>)
 8000960:	f003 faca 	bl	8003ef8 <HAL_TIMEx_MasterConfigSynchronization>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 800096a:	f000 f8cd 	bl	8000b08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800096e:	2360      	movs	r3, #96	@ 0x60
 8000970:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000972:	2300      	movs	r3, #0
 8000974:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000976:	2300      	movs	r3, #0
 8000978:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800097a:	2300      	movs	r3, #0
 800097c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800097e:	2300      	movs	r3, #0
 8000980:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000982:	2300      	movs	r3, #0
 8000984:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000986:	2300      	movs	r3, #0
 8000988:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800098a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800098e:	2200      	movs	r2, #0
 8000990:	4619      	mov	r1, r3
 8000992:	4814      	ldr	r0, [pc, #80]	@ (80009e4 <MX_TIM1_Init+0x13c>)
 8000994:	f002 fe0a 	bl	80035ac <HAL_TIM_PWM_ConfigChannel>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 800099e:	f000 f8b3 	bl	8000b08 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80009a2:	2300      	movs	r3, #0
 80009a4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80009a6:	2300      	movs	r3, #0
 80009a8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80009aa:	2300      	movs	r3, #0
 80009ac:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80009ae:	2300      	movs	r3, #0
 80009b0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80009b2:	2300      	movs	r3, #0
 80009b4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80009b6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009ba:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80009bc:	2300      	movs	r3, #0
 80009be:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80009c0:	1d3b      	adds	r3, r7, #4
 80009c2:	4619      	mov	r1, r3
 80009c4:	4807      	ldr	r0, [pc, #28]	@ (80009e4 <MX_TIM1_Init+0x13c>)
 80009c6:	f003 fb13 	bl	8003ff0 <HAL_TIMEx_ConfigBreakDeadTime>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 80009d0:	f000 f89a 	bl	8000b08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80009d4:	4803      	ldr	r0, [pc, #12]	@ (80009e4 <MX_TIM1_Init+0x13c>)
 80009d6:	f000 f979 	bl	8000ccc <HAL_TIM_MspPostInit>

}
 80009da:	bf00      	nop
 80009dc:	3758      	adds	r7, #88	@ 0x58
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	2000016c 	.word	0x2000016c
 80009e8:	40010000 	.word	0x40010000

080009ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009f0:	4b11      	ldr	r3, [pc, #68]	@ (8000a38 <MX_USART2_UART_Init+0x4c>)
 80009f2:	4a12      	ldr	r2, [pc, #72]	@ (8000a3c <MX_USART2_UART_Init+0x50>)
 80009f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009f6:	4b10      	ldr	r3, [pc, #64]	@ (8000a38 <MX_USART2_UART_Init+0x4c>)
 80009f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000a38 <MX_USART2_UART_Init+0x4c>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a04:	4b0c      	ldr	r3, [pc, #48]	@ (8000a38 <MX_USART2_UART_Init+0x4c>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a0a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a38 <MX_USART2_UART_Init+0x4c>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a10:	4b09      	ldr	r3, [pc, #36]	@ (8000a38 <MX_USART2_UART_Init+0x4c>)
 8000a12:	220c      	movs	r2, #12
 8000a14:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a16:	4b08      	ldr	r3, [pc, #32]	@ (8000a38 <MX_USART2_UART_Init+0x4c>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a1c:	4b06      	ldr	r3, [pc, #24]	@ (8000a38 <MX_USART2_UART_Init+0x4c>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a22:	4805      	ldr	r0, [pc, #20]	@ (8000a38 <MX_USART2_UART_Init+0x4c>)
 8000a24:	f003 fb36 	bl	8004094 <HAL_UART_Init>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a2e:	f000 f86b 	bl	8000b08 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	20000214 	.word	0x20000214
 8000a3c:	40004400 	.word	0x40004400

08000a40 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	607b      	str	r3, [r7, #4]
 8000a4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a7c <MX_DMA_Init+0x3c>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4e:	4a0b      	ldr	r2, [pc, #44]	@ (8000a7c <MX_DMA_Init+0x3c>)
 8000a50:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000a54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a56:	4b09      	ldr	r3, [pc, #36]	@ (8000a7c <MX_DMA_Init+0x3c>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000a5e:	607b      	str	r3, [r7, #4]
 8000a60:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000a62:	2200      	movs	r2, #0
 8000a64:	2100      	movs	r1, #0
 8000a66:	2039      	movs	r0, #57	@ 0x39
 8000a68:	f001 fadb 	bl	8002022 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000a6c:	2039      	movs	r0, #57	@ 0x39
 8000a6e:	f001 faf4 	bl	800205a <HAL_NVIC_EnableIRQ>

}
 8000a72:	bf00      	nop
 8000a74:	3708      	adds	r7, #8
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40023800 	.word	0x40023800

08000a80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b085      	sub	sp, #20
 8000a84:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	60fb      	str	r3, [r7, #12]
 8000a8a:	4b1e      	ldr	r3, [pc, #120]	@ (8000b04 <MX_GPIO_Init+0x84>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8e:	4a1d      	ldr	r2, [pc, #116]	@ (8000b04 <MX_GPIO_Init+0x84>)
 8000a90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a96:	4b1b      	ldr	r3, [pc, #108]	@ (8000b04 <MX_GPIO_Init+0x84>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	60bb      	str	r3, [r7, #8]
 8000aa6:	4b17      	ldr	r3, [pc, #92]	@ (8000b04 <MX_GPIO_Init+0x84>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aaa:	4a16      	ldr	r2, [pc, #88]	@ (8000b04 <MX_GPIO_Init+0x84>)
 8000aac:	f043 0301 	orr.w	r3, r3, #1
 8000ab0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ab2:	4b14      	ldr	r3, [pc, #80]	@ (8000b04 <MX_GPIO_Init+0x84>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab6:	f003 0301 	and.w	r3, r3, #1
 8000aba:	60bb      	str	r3, [r7, #8]
 8000abc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	607b      	str	r3, [r7, #4]
 8000ac2:	4b10      	ldr	r3, [pc, #64]	@ (8000b04 <MX_GPIO_Init+0x84>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac6:	4a0f      	ldr	r2, [pc, #60]	@ (8000b04 <MX_GPIO_Init+0x84>)
 8000ac8:	f043 0310 	orr.w	r3, r3, #16
 8000acc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ace:	4b0d      	ldr	r3, [pc, #52]	@ (8000b04 <MX_GPIO_Init+0x84>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad2:	f003 0310 	and.w	r3, r3, #16
 8000ad6:	607b      	str	r3, [r7, #4]
 8000ad8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	603b      	str	r3, [r7, #0]
 8000ade:	4b09      	ldr	r3, [pc, #36]	@ (8000b04 <MX_GPIO_Init+0x84>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae2:	4a08      	ldr	r2, [pc, #32]	@ (8000b04 <MX_GPIO_Init+0x84>)
 8000ae4:	f043 0302 	orr.w	r3, r3, #2
 8000ae8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aea:	4b06      	ldr	r3, [pc, #24]	@ (8000b04 <MX_GPIO_Init+0x84>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aee:	f003 0302 	and.w	r3, r3, #2
 8000af2:	603b      	str	r3, [r7, #0]
 8000af4:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000af6:	bf00      	nop
 8000af8:	3714      	adds	r7, #20
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	40023800 	.word	0x40023800

08000b08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000b0c:	b672      	cpsid	i
}
 8000b0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b10:	bf00      	nop
 8000b12:	e7fd      	b.n	8000b10 <Error_Handler+0x8>

08000b14 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	607b      	str	r3, [r7, #4]
 8000b1e:	4b10      	ldr	r3, [pc, #64]	@ (8000b60 <HAL_MspInit+0x4c>)
 8000b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b22:	4a0f      	ldr	r2, [pc, #60]	@ (8000b60 <HAL_MspInit+0x4c>)
 8000b24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b28:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b2a:	4b0d      	ldr	r3, [pc, #52]	@ (8000b60 <HAL_MspInit+0x4c>)
 8000b2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b32:	607b      	str	r3, [r7, #4]
 8000b34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	603b      	str	r3, [r7, #0]
 8000b3a:	4b09      	ldr	r3, [pc, #36]	@ (8000b60 <HAL_MspInit+0x4c>)
 8000b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b3e:	4a08      	ldr	r2, [pc, #32]	@ (8000b60 <HAL_MspInit+0x4c>)
 8000b40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b44:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b46:	4b06      	ldr	r3, [pc, #24]	@ (8000b60 <HAL_MspInit+0x4c>)
 8000b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b4e:	603b      	str	r3, [r7, #0]
 8000b50:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b52:	2003      	movs	r0, #3
 8000b54:	f001 fa5a 	bl	800200c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b58:	bf00      	nop
 8000b5a:	3708      	adds	r7, #8
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	40023800 	.word	0x40023800

08000b64 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b08a      	sub	sp, #40	@ 0x28
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6c:	f107 0314 	add.w	r3, r7, #20
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]
 8000b78:	60da      	str	r2, [r3, #12]
 8000b7a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a25      	ldr	r2, [pc, #148]	@ (8000c18 <HAL_CAN_MspInit+0xb4>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d144      	bne.n	8000c10 <HAL_CAN_MspInit+0xac>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	613b      	str	r3, [r7, #16]
 8000b8a:	4b24      	ldr	r3, [pc, #144]	@ (8000c1c <HAL_CAN_MspInit+0xb8>)
 8000b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b8e:	4a23      	ldr	r2, [pc, #140]	@ (8000c1c <HAL_CAN_MspInit+0xb8>)
 8000b90:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000b94:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b96:	4b21      	ldr	r3, [pc, #132]	@ (8000c1c <HAL_CAN_MspInit+0xb8>)
 8000b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000b9e:	613b      	str	r3, [r7, #16]
 8000ba0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	60fb      	str	r3, [r7, #12]
 8000ba6:	4b1d      	ldr	r3, [pc, #116]	@ (8000c1c <HAL_CAN_MspInit+0xb8>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000baa:	4a1c      	ldr	r2, [pc, #112]	@ (8000c1c <HAL_CAN_MspInit+0xb8>)
 8000bac:	f043 0302 	orr.w	r3, r3, #2
 8000bb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bb2:	4b1a      	ldr	r3, [pc, #104]	@ (8000c1c <HAL_CAN_MspInit+0xb8>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb6:	f003 0302 	and.w	r3, r3, #2
 8000bba:	60fb      	str	r3, [r7, #12]
 8000bbc:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000bbe:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000bc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bcc:	2303      	movs	r3, #3
 8000bce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000bd0:	2309      	movs	r3, #9
 8000bd2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bd4:	f107 0314 	add.w	r3, r7, #20
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4811      	ldr	r0, [pc, #68]	@ (8000c20 <HAL_CAN_MspInit+0xbc>)
 8000bdc:	f001 fd42 	bl	8002664 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8000be0:	2200      	movs	r2, #0
 8000be2:	2100      	movs	r1, #0
 8000be4:	2013      	movs	r0, #19
 8000be6:	f001 fa1c 	bl	8002022 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000bea:	2013      	movs	r0, #19
 8000bec:	f001 fa35 	bl	800205a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	2105      	movs	r1, #5
 8000bf4:	2014      	movs	r0, #20
 8000bf6:	f001 fa14 	bl	8002022 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000bfa:	2014      	movs	r0, #20
 8000bfc:	f001 fa2d 	bl	800205a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000c00:	2200      	movs	r2, #0
 8000c02:	2100      	movs	r1, #0
 8000c04:	2015      	movs	r0, #21
 8000c06:	f001 fa0c 	bl	8002022 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000c0a:	2015      	movs	r0, #21
 8000c0c:	f001 fa25 	bl	800205a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000c10:	bf00      	nop
 8000c12:	3728      	adds	r7, #40	@ 0x28
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	40006400 	.word	0x40006400
 8000c1c:	40023800 	.word	0x40023800
 8000c20:	40020400 	.word	0x40020400

08000c24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a22      	ldr	r2, [pc, #136]	@ (8000cbc <HAL_TIM_Base_MspInit+0x98>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d13d      	bne.n	8000cb2 <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	60fb      	str	r3, [r7, #12]
 8000c3a:	4b21      	ldr	r3, [pc, #132]	@ (8000cc0 <HAL_TIM_Base_MspInit+0x9c>)
 8000c3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c3e:	4a20      	ldr	r2, [pc, #128]	@ (8000cc0 <HAL_TIM_Base_MspInit+0x9c>)
 8000c40:	f043 0301 	orr.w	r3, r3, #1
 8000c44:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c46:	4b1e      	ldr	r3, [pc, #120]	@ (8000cc0 <HAL_TIM_Base_MspInit+0x9c>)
 8000c48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c4a:	f003 0301 	and.w	r3, r3, #1
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8000c52:	4b1c      	ldr	r3, [pc, #112]	@ (8000cc4 <HAL_TIM_Base_MspInit+0xa0>)
 8000c54:	4a1c      	ldr	r2, [pc, #112]	@ (8000cc8 <HAL_TIM_Base_MspInit+0xa4>)
 8000c56:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8000c58:	4b1a      	ldr	r3, [pc, #104]	@ (8000cc4 <HAL_TIM_Base_MspInit+0xa0>)
 8000c5a:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8000c5e:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c60:	4b18      	ldr	r3, [pc, #96]	@ (8000cc4 <HAL_TIM_Base_MspInit+0xa0>)
 8000c62:	2240      	movs	r2, #64	@ 0x40
 8000c64:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c66:	4b17      	ldr	r3, [pc, #92]	@ (8000cc4 <HAL_TIM_Base_MspInit+0xa0>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000c6c:	4b15      	ldr	r3, [pc, #84]	@ (8000cc4 <HAL_TIM_Base_MspInit+0xa0>)
 8000c6e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c72:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c74:	4b13      	ldr	r3, [pc, #76]	@ (8000cc4 <HAL_TIM_Base_MspInit+0xa0>)
 8000c76:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000c7a:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c7c:	4b11      	ldr	r3, [pc, #68]	@ (8000cc4 <HAL_TIM_Base_MspInit+0xa0>)
 8000c7e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c82:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8000c84:	4b0f      	ldr	r3, [pc, #60]	@ (8000cc4 <HAL_TIM_Base_MspInit+0xa0>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000c8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000cc4 <HAL_TIM_Base_MspInit+0xa0>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c90:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc4 <HAL_TIM_Base_MspInit+0xa0>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8000c96:	480b      	ldr	r0, [pc, #44]	@ (8000cc4 <HAL_TIM_Base_MspInit+0xa0>)
 8000c98:	f001 f9fa 	bl	8002090 <HAL_DMA_Init>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8000ca2:	f7ff ff31 	bl	8000b08 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	4a06      	ldr	r2, [pc, #24]	@ (8000cc4 <HAL_TIM_Base_MspInit+0xa0>)
 8000caa:	625a      	str	r2, [r3, #36]	@ 0x24
 8000cac:	4a05      	ldr	r2, [pc, #20]	@ (8000cc4 <HAL_TIM_Base_MspInit+0xa0>)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000cb2:	bf00      	nop
 8000cb4:	3710      	adds	r7, #16
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40010000 	.word	0x40010000
 8000cc0:	40023800 	.word	0x40023800
 8000cc4:	200001b4 	.word	0x200001b4
 8000cc8:	40026428 	.word	0x40026428

08000ccc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b088      	sub	sp, #32
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd4:	f107 030c 	add.w	r3, r7, #12
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	605a      	str	r2, [r3, #4]
 8000cde:	609a      	str	r2, [r3, #8]
 8000ce0:	60da      	str	r2, [r3, #12]
 8000ce2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a12      	ldr	r2, [pc, #72]	@ (8000d34 <HAL_TIM_MspPostInit+0x68>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d11e      	bne.n	8000d2c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	60bb      	str	r3, [r7, #8]
 8000cf2:	4b11      	ldr	r3, [pc, #68]	@ (8000d38 <HAL_TIM_MspPostInit+0x6c>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf6:	4a10      	ldr	r2, [pc, #64]	@ (8000d38 <HAL_TIM_MspPostInit+0x6c>)
 8000cf8:	f043 0310 	orr.w	r3, r3, #16
 8000cfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cfe:	4b0e      	ldr	r3, [pc, #56]	@ (8000d38 <HAL_TIM_MspPostInit+0x6c>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d02:	f003 0310 	and.w	r3, r3, #16
 8000d06:	60bb      	str	r3, [r7, #8]
 8000d08:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d0a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d0e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d10:	2302      	movs	r3, #2
 8000d12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d20:	f107 030c 	add.w	r3, r7, #12
 8000d24:	4619      	mov	r1, r3
 8000d26:	4805      	ldr	r0, [pc, #20]	@ (8000d3c <HAL_TIM_MspPostInit+0x70>)
 8000d28:	f001 fc9c 	bl	8002664 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000d2c:	bf00      	nop
 8000d2e:	3720      	adds	r7, #32
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	40010000 	.word	0x40010000
 8000d38:	40023800 	.word	0x40023800
 8000d3c:	40021000 	.word	0x40021000

08000d40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b08a      	sub	sp, #40	@ 0x28
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d48:	f107 0314 	add.w	r3, r7, #20
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	605a      	str	r2, [r3, #4]
 8000d52:	609a      	str	r2, [r3, #8]
 8000d54:	60da      	str	r2, [r3, #12]
 8000d56:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a19      	ldr	r2, [pc, #100]	@ (8000dc4 <HAL_UART_MspInit+0x84>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d12b      	bne.n	8000dba <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d62:	2300      	movs	r3, #0
 8000d64:	613b      	str	r3, [r7, #16]
 8000d66:	4b18      	ldr	r3, [pc, #96]	@ (8000dc8 <HAL_UART_MspInit+0x88>)
 8000d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d6a:	4a17      	ldr	r2, [pc, #92]	@ (8000dc8 <HAL_UART_MspInit+0x88>)
 8000d6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d70:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d72:	4b15      	ldr	r3, [pc, #84]	@ (8000dc8 <HAL_UART_MspInit+0x88>)
 8000d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d7a:	613b      	str	r3, [r7, #16]
 8000d7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60fb      	str	r3, [r7, #12]
 8000d82:	4b11      	ldr	r3, [pc, #68]	@ (8000dc8 <HAL_UART_MspInit+0x88>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d86:	4a10      	ldr	r2, [pc, #64]	@ (8000dc8 <HAL_UART_MspInit+0x88>)
 8000d88:	f043 0301 	orr.w	r3, r3, #1
 8000d8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000dc8 <HAL_UART_MspInit+0x88>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d92:	f003 0301 	and.w	r3, r3, #1
 8000d96:	60fb      	str	r3, [r7, #12]
 8000d98:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d9a:	230c      	movs	r3, #12
 8000d9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	2300      	movs	r3, #0
 8000da4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da6:	2303      	movs	r3, #3
 8000da8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000daa:	2307      	movs	r3, #7
 8000dac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dae:	f107 0314 	add.w	r3, r7, #20
 8000db2:	4619      	mov	r1, r3
 8000db4:	4805      	ldr	r0, [pc, #20]	@ (8000dcc <HAL_UART_MspInit+0x8c>)
 8000db6:	f001 fc55 	bl	8002664 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000dba:	bf00      	nop
 8000dbc:	3728      	adds	r7, #40	@ 0x28
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	40004400 	.word	0x40004400
 8000dc8:	40023800 	.word	0x40023800
 8000dcc:	40020000 	.word	0x40020000

08000dd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dd4:	bf00      	nop
 8000dd6:	e7fd      	b.n	8000dd4 <NMI_Handler+0x4>

08000dd8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ddc:	bf00      	nop
 8000dde:	e7fd      	b.n	8000ddc <HardFault_Handler+0x4>

08000de0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000de4:	bf00      	nop
 8000de6:	e7fd      	b.n	8000de4 <MemManage_Handler+0x4>

08000de8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dec:	bf00      	nop
 8000dee:	e7fd      	b.n	8000dec <BusFault_Handler+0x4>

08000df0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000df4:	bf00      	nop
 8000df6:	e7fd      	b.n	8000df4 <UsageFault_Handler+0x4>

08000df8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr

08000e06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e06:	b480      	push	{r7}
 8000e08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr

08000e14 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e18:	bf00      	nop
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr

08000e22 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e22:	b580      	push	{r7, lr}
 8000e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e26:	f000 f941 	bl	80010ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	bd80      	pop	{r7, pc}
	...

08000e30 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000e34:	4802      	ldr	r0, [pc, #8]	@ (8000e40 <CAN1_TX_IRQHandler+0x10>)
 8000e36:	f000 fdea 	bl	8001a0e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	20000144 	.word	0x20000144

08000e44 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000e48:	4802      	ldr	r0, [pc, #8]	@ (8000e54 <CAN1_RX0_IRQHandler+0x10>)
 8000e4a:	f000 fde0 	bl	8001a0e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	20000144 	.word	0x20000144

08000e58 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000e5c:	4802      	ldr	r0, [pc, #8]	@ (8000e68 <CAN1_RX1_IRQHandler+0x10>)
 8000e5e:	f000 fdd6 	bl	8001a0e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000e62:	bf00      	nop
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	20000144 	.word	0x20000144

08000e6c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8000e70:	4802      	ldr	r0, [pc, #8]	@ (8000e7c <DMA2_Stream1_IRQHandler+0x10>)
 8000e72:	f001 f9bb 	bl	80021ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	200001b4 	.word	0x200001b4

08000e80 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b086      	sub	sp, #24
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	60f8      	str	r0, [r7, #12]
 8000e88:	60b9      	str	r1, [r7, #8]
 8000e8a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	617b      	str	r3, [r7, #20]
 8000e90:	e00a      	b.n	8000ea8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e92:	f3af 8000 	nop.w
 8000e96:	4601      	mov	r1, r0
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	1c5a      	adds	r2, r3, #1
 8000e9c:	60ba      	str	r2, [r7, #8]
 8000e9e:	b2ca      	uxtb	r2, r1
 8000ea0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	617b      	str	r3, [r7, #20]
 8000ea8:	697a      	ldr	r2, [r7, #20]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	dbf0      	blt.n	8000e92 <_read+0x12>
  }

  return len;
 8000eb0:	687b      	ldr	r3, [r7, #4]
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3718      	adds	r7, #24
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <_close>:
  }
  return len;
}

int _close(int file)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	b083      	sub	sp, #12
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ec2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	370c      	adds	r7, #12
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr

08000ed2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	b083      	sub	sp, #12
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
 8000eda:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ee2:	605a      	str	r2, [r3, #4]
  return 0;
 8000ee4:	2300      	movs	r3, #0
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	370c      	adds	r7, #12
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr

08000ef2 <_isatty>:

int _isatty(int file)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	b083      	sub	sp, #12
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000efa:	2301      	movs	r3, #1
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr

08000f08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b085      	sub	sp, #20
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	60f8      	str	r0, [r7, #12]
 8000f10:	60b9      	str	r1, [r7, #8]
 8000f12:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f14:	2300      	movs	r3, #0
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3714      	adds	r7, #20
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
	...

08000f24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b086      	sub	sp, #24
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f2c:	4a14      	ldr	r2, [pc, #80]	@ (8000f80 <_sbrk+0x5c>)
 8000f2e:	4b15      	ldr	r3, [pc, #84]	@ (8000f84 <_sbrk+0x60>)
 8000f30:	1ad3      	subs	r3, r2, r3
 8000f32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f38:	4b13      	ldr	r3, [pc, #76]	@ (8000f88 <_sbrk+0x64>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d102      	bne.n	8000f46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f40:	4b11      	ldr	r3, [pc, #68]	@ (8000f88 <_sbrk+0x64>)
 8000f42:	4a12      	ldr	r2, [pc, #72]	@ (8000f8c <_sbrk+0x68>)
 8000f44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f46:	4b10      	ldr	r3, [pc, #64]	@ (8000f88 <_sbrk+0x64>)
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d207      	bcs.n	8000f64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f54:	f003 fef0 	bl	8004d38 <__errno>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	220c      	movs	r2, #12
 8000f5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f62:	e009      	b.n	8000f78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f64:	4b08      	ldr	r3, [pc, #32]	@ (8000f88 <_sbrk+0x64>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f6a:	4b07      	ldr	r3, [pc, #28]	@ (8000f88 <_sbrk+0x64>)
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4413      	add	r3, r2
 8000f72:	4a05      	ldr	r2, [pc, #20]	@ (8000f88 <_sbrk+0x64>)
 8000f74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f76:	68fb      	ldr	r3, [r7, #12]
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3718      	adds	r7, #24
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	20020000 	.word	0x20020000
 8000f84:	00000400 	.word	0x00000400
 8000f88:	200002a0 	.word	0x200002a0
 8000f8c:	200003f8 	.word	0x200003f8

08000f90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f94:	4b06      	ldr	r3, [pc, #24]	@ (8000fb0 <SystemInit+0x20>)
 8000f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f9a:	4a05      	ldr	r2, [pc, #20]	@ (8000fb0 <SystemInit+0x20>)
 8000f9c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fa0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fa4:	bf00      	nop
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	e000ed00 	.word	0xe000ed00

08000fb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000fb4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fec <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000fb8:	f7ff ffea 	bl	8000f90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fbc:	480c      	ldr	r0, [pc, #48]	@ (8000ff0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fbe:	490d      	ldr	r1, [pc, #52]	@ (8000ff4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fc0:	4a0d      	ldr	r2, [pc, #52]	@ (8000ff8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fc4:	e002      	b.n	8000fcc <LoopCopyDataInit>

08000fc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fca:	3304      	adds	r3, #4

08000fcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fd0:	d3f9      	bcc.n	8000fc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fd2:	4a0a      	ldr	r2, [pc, #40]	@ (8000ffc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fd4:	4c0a      	ldr	r4, [pc, #40]	@ (8001000 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fd8:	e001      	b.n	8000fde <LoopFillZerobss>

08000fda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fdc:	3204      	adds	r2, #4

08000fde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fe0:	d3fb      	bcc.n	8000fda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fe2:	f003 feaf 	bl	8004d44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fe6:	f7ff fac7 	bl	8000578 <main>
  bx  lr    
 8000fea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000fec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ff0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ff4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000ff8:	08005268 	.word	0x08005268
  ldr r2, =_sbss
 8000ffc:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001000:	200003f4 	.word	0x200003f4

08001004 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001004:	e7fe      	b.n	8001004 <ADC_IRQHandler>
	...

08001008 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800100c:	4b0e      	ldr	r3, [pc, #56]	@ (8001048 <HAL_Init+0x40>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a0d      	ldr	r2, [pc, #52]	@ (8001048 <HAL_Init+0x40>)
 8001012:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001016:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001018:	4b0b      	ldr	r3, [pc, #44]	@ (8001048 <HAL_Init+0x40>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a0a      	ldr	r2, [pc, #40]	@ (8001048 <HAL_Init+0x40>)
 800101e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001022:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001024:	4b08      	ldr	r3, [pc, #32]	@ (8001048 <HAL_Init+0x40>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a07      	ldr	r2, [pc, #28]	@ (8001048 <HAL_Init+0x40>)
 800102a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800102e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001030:	2003      	movs	r0, #3
 8001032:	f000 ffeb 	bl	800200c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001036:	2000      	movs	r0, #0
 8001038:	f000 f808 	bl	800104c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800103c:	f7ff fd6a 	bl	8000b14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001040:	2300      	movs	r3, #0
}
 8001042:	4618      	mov	r0, r3
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	40023c00 	.word	0x40023c00

0800104c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001054:	4b12      	ldr	r3, [pc, #72]	@ (80010a0 <HAL_InitTick+0x54>)
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	4b12      	ldr	r3, [pc, #72]	@ (80010a4 <HAL_InitTick+0x58>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	4619      	mov	r1, r3
 800105e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001062:	fbb3 f3f1 	udiv	r3, r3, r1
 8001066:	fbb2 f3f3 	udiv	r3, r2, r3
 800106a:	4618      	mov	r0, r3
 800106c:	f001 f803 	bl	8002076 <HAL_SYSTICK_Config>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e00e      	b.n	8001098 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2b0f      	cmp	r3, #15
 800107e:	d80a      	bhi.n	8001096 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001080:	2200      	movs	r2, #0
 8001082:	6879      	ldr	r1, [r7, #4]
 8001084:	f04f 30ff 	mov.w	r0, #4294967295
 8001088:	f000 ffcb 	bl	8002022 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800108c:	4a06      	ldr	r2, [pc, #24]	@ (80010a8 <HAL_InitTick+0x5c>)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001092:	2300      	movs	r3, #0
 8001094:	e000      	b.n	8001098 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
}
 8001098:	4618      	mov	r0, r3
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	20000000 	.word	0x20000000
 80010a4:	20000008 	.word	0x20000008
 80010a8:	20000004 	.word	0x20000004

080010ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010b0:	4b06      	ldr	r3, [pc, #24]	@ (80010cc <HAL_IncTick+0x20>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	461a      	mov	r2, r3
 80010b6:	4b06      	ldr	r3, [pc, #24]	@ (80010d0 <HAL_IncTick+0x24>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4413      	add	r3, r2
 80010bc:	4a04      	ldr	r2, [pc, #16]	@ (80010d0 <HAL_IncTick+0x24>)
 80010be:	6013      	str	r3, [r2, #0]
}
 80010c0:	bf00      	nop
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	20000008 	.word	0x20000008
 80010d0:	200002a4 	.word	0x200002a4

080010d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  return uwTick;
 80010d8:	4b03      	ldr	r3, [pc, #12]	@ (80010e8 <HAL_GetTick+0x14>)
 80010da:	681b      	ldr	r3, [r3, #0]
}
 80010dc:	4618      	mov	r0, r3
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	200002a4 	.word	0x200002a4

080010ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010f4:	f7ff ffee 	bl	80010d4 <HAL_GetTick>
 80010f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001104:	d005      	beq.n	8001112 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001106:	4b0a      	ldr	r3, [pc, #40]	@ (8001130 <HAL_Delay+0x44>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	461a      	mov	r2, r3
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	4413      	add	r3, r2
 8001110:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001112:	bf00      	nop
 8001114:	f7ff ffde 	bl	80010d4 <HAL_GetTick>
 8001118:	4602      	mov	r2, r0
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	68fa      	ldr	r2, [r7, #12]
 8001120:	429a      	cmp	r2, r3
 8001122:	d8f7      	bhi.n	8001114 <HAL_Delay+0x28>
  {
  }
}
 8001124:	bf00      	nop
 8001126:	bf00      	nop
 8001128:	3710      	adds	r7, #16
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	20000008 	.word	0x20000008

08001134 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d101      	bne.n	8001146 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	e0ed      	b.n	8001322 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	f893 3020 	ldrb.w	r3, [r3, #32]
 800114c:	b2db      	uxtb	r3, r3
 800114e:	2b00      	cmp	r3, #0
 8001150:	d102      	bne.n	8001158 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f7ff fd06 	bl	8000b64 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f042 0201 	orr.w	r2, r2, #1
 8001166:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001168:	f7ff ffb4 	bl	80010d4 <HAL_GetTick>
 800116c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800116e:	e012      	b.n	8001196 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001170:	f7ff ffb0 	bl	80010d4 <HAL_GetTick>
 8001174:	4602      	mov	r2, r0
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	2b0a      	cmp	r3, #10
 800117c:	d90b      	bls.n	8001196 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001182:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2205      	movs	r2, #5
 800118e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	e0c5      	b.n	8001322 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f003 0301 	and.w	r3, r3, #1
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d0e5      	beq.n	8001170 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f022 0202 	bic.w	r2, r2, #2
 80011b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011b4:	f7ff ff8e 	bl	80010d4 <HAL_GetTick>
 80011b8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80011ba:	e012      	b.n	80011e2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80011bc:	f7ff ff8a 	bl	80010d4 <HAL_GetTick>
 80011c0:	4602      	mov	r2, r0
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	2b0a      	cmp	r3, #10
 80011c8:	d90b      	bls.n	80011e2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011ce:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2205      	movs	r2, #5
 80011da:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	e09f      	b.n	8001322 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f003 0302 	and.w	r3, r3, #2
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d1e5      	bne.n	80011bc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	7e1b      	ldrb	r3, [r3, #24]
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d108      	bne.n	800120a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	e007      	b.n	800121a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001218:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	7e5b      	ldrb	r3, [r3, #25]
 800121e:	2b01      	cmp	r3, #1
 8001220:	d108      	bne.n	8001234 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001230:	601a      	str	r2, [r3, #0]
 8001232:	e007      	b.n	8001244 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001242:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	7e9b      	ldrb	r3, [r3, #26]
 8001248:	2b01      	cmp	r3, #1
 800124a:	d108      	bne.n	800125e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f042 0220 	orr.w	r2, r2, #32
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	e007      	b.n	800126e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f022 0220 	bic.w	r2, r2, #32
 800126c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	7edb      	ldrb	r3, [r3, #27]
 8001272:	2b01      	cmp	r3, #1
 8001274:	d108      	bne.n	8001288 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f022 0210 	bic.w	r2, r2, #16
 8001284:	601a      	str	r2, [r3, #0]
 8001286:	e007      	b.n	8001298 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f042 0210 	orr.w	r2, r2, #16
 8001296:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	7f1b      	ldrb	r3, [r3, #28]
 800129c:	2b01      	cmp	r3, #1
 800129e:	d108      	bne.n	80012b2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f042 0208 	orr.w	r2, r2, #8
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	e007      	b.n	80012c2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f022 0208 	bic.w	r2, r2, #8
 80012c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	7f5b      	ldrb	r3, [r3, #29]
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d108      	bne.n	80012dc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f042 0204 	orr.w	r2, r2, #4
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	e007      	b.n	80012ec <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f022 0204 	bic.w	r2, r2, #4
 80012ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	689a      	ldr	r2, [r3, #8]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	431a      	orrs	r2, r3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	691b      	ldr	r3, [r3, #16]
 80012fa:	431a      	orrs	r2, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	695b      	ldr	r3, [r3, #20]
 8001300:	ea42 0103 	orr.w	r1, r2, r3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	1e5a      	subs	r2, r3, #1
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	430a      	orrs	r2, r1
 8001310:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2200      	movs	r2, #0
 8001316:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2201      	movs	r2, #1
 800131c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001320:	2300      	movs	r3, #0
}
 8001322:	4618      	mov	r0, r3
 8001324:	3710      	adds	r7, #16
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
	...

0800132c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800132c:	b480      	push	{r7}
 800132e:	b087      	sub	sp, #28
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001342:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001344:	7cfb      	ldrb	r3, [r7, #19]
 8001346:	2b01      	cmp	r3, #1
 8001348:	d003      	beq.n	8001352 <HAL_CAN_ConfigFilter+0x26>
 800134a:	7cfb      	ldrb	r3, [r7, #19]
 800134c:	2b02      	cmp	r3, #2
 800134e:	f040 80be 	bne.w	80014ce <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001352:	4b65      	ldr	r3, [pc, #404]	@ (80014e8 <HAL_CAN_ConfigFilter+0x1bc>)
 8001354:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800135c:	f043 0201 	orr.w	r2, r3, #1
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800136c:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001380:	021b      	lsls	r3, r3, #8
 8001382:	431a      	orrs	r2, r3
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	695b      	ldr	r3, [r3, #20]
 800138e:	f003 031f 	and.w	r3, r3, #31
 8001392:	2201      	movs	r2, #1
 8001394:	fa02 f303 	lsl.w	r3, r2, r3
 8001398:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	43db      	mvns	r3, r3
 80013a4:	401a      	ands	r2, r3
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	69db      	ldr	r3, [r3, #28]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d123      	bne.n	80013fc <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	43db      	mvns	r3, r3
 80013be:	401a      	ands	r2, r3
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	68db      	ldr	r3, [r3, #12]
 80013ca:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80013d2:	683a      	ldr	r2, [r7, #0]
 80013d4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80013d6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	3248      	adds	r2, #72	@ 0x48
 80013dc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80013f0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80013f2:	6979      	ldr	r1, [r7, #20]
 80013f4:	3348      	adds	r3, #72	@ 0x48
 80013f6:	00db      	lsls	r3, r3, #3
 80013f8:	440b      	add	r3, r1
 80013fa:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	69db      	ldr	r3, [r3, #28]
 8001400:	2b01      	cmp	r3, #1
 8001402:	d122      	bne.n	800144a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	431a      	orrs	r2, r3
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001420:	683a      	ldr	r2, [r7, #0]
 8001422:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001424:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	3248      	adds	r2, #72	@ 0x48
 800142a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800143e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001440:	6979      	ldr	r1, [r7, #20]
 8001442:	3348      	adds	r3, #72	@ 0x48
 8001444:	00db      	lsls	r3, r3, #3
 8001446:	440b      	add	r3, r1
 8001448:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	699b      	ldr	r3, [r3, #24]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d109      	bne.n	8001466 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	43db      	mvns	r3, r3
 800145c:	401a      	ands	r2, r3
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001464:	e007      	b.n	8001476 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	431a      	orrs	r2, r3
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	691b      	ldr	r3, [r3, #16]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d109      	bne.n	8001492 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	43db      	mvns	r3, r3
 8001488:	401a      	ands	r2, r3
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001490:	e007      	b.n	80014a2 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	431a      	orrs	r2, r3
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	6a1b      	ldr	r3, [r3, #32]
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d107      	bne.n	80014ba <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	431a      	orrs	r2, r3
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80014c0:	f023 0201 	bic.w	r2, r3, #1
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80014ca:	2300      	movs	r3, #0
 80014cc:	e006      	b.n	80014dc <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014d2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
  }
}
 80014dc:	4618      	mov	r0, r3
 80014de:	371c      	adds	r7, #28
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr
 80014e8:	40006400 	.word	0x40006400

080014ec <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d12e      	bne.n	800155e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2202      	movs	r2, #2
 8001504:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f022 0201 	bic.w	r2, r2, #1
 8001516:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001518:	f7ff fddc 	bl	80010d4 <HAL_GetTick>
 800151c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800151e:	e012      	b.n	8001546 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001520:	f7ff fdd8 	bl	80010d4 <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	2b0a      	cmp	r3, #10
 800152c:	d90b      	bls.n	8001546 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001532:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2205      	movs	r2, #5
 800153e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e012      	b.n	800156c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f003 0301 	and.w	r3, r3, #1
 8001550:	2b00      	cmp	r3, #0
 8001552:	d1e5      	bne.n	8001520 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2200      	movs	r2, #0
 8001558:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800155a:	2300      	movs	r3, #0
 800155c:	e006      	b.n	800156c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001562:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
  }
}
 800156c:	4618      	mov	r0, r3
 800156e:	3710      	adds	r7, #16
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}

08001574 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001574:	b480      	push	{r7}
 8001576:	b089      	sub	sp, #36	@ 0x24
 8001578:	af00      	add	r7, sp, #0
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	60b9      	str	r1, [r7, #8]
 800157e:	607a      	str	r2, [r7, #4]
 8001580:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001588:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001592:	7ffb      	ldrb	r3, [r7, #31]
 8001594:	2b01      	cmp	r3, #1
 8001596:	d003      	beq.n	80015a0 <HAL_CAN_AddTxMessage+0x2c>
 8001598:	7ffb      	ldrb	r3, [r7, #31]
 800159a:	2b02      	cmp	r3, #2
 800159c:	f040 80ad 	bne.w	80016fa <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d10a      	bne.n	80015c0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d105      	bne.n	80015c0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80015b4:	69bb      	ldr	r3, [r7, #24]
 80015b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	f000 8095 	beq.w	80016ea <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80015c0:	69bb      	ldr	r3, [r7, #24]
 80015c2:	0e1b      	lsrs	r3, r3, #24
 80015c4:	f003 0303 	and.w	r3, r3, #3
 80015c8:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80015ca:	2201      	movs	r2, #1
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	409a      	lsls	r2, r3
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d10d      	bne.n	80015f8 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80015e6:	68f9      	ldr	r1, [r7, #12]
 80015e8:	6809      	ldr	r1, [r1, #0]
 80015ea:	431a      	orrs	r2, r3
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	3318      	adds	r3, #24
 80015f0:	011b      	lsls	r3, r3, #4
 80015f2:	440b      	add	r3, r1
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	e00f      	b.n	8001618 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001602:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001608:	68f9      	ldr	r1, [r7, #12]
 800160a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800160c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	3318      	adds	r3, #24
 8001612:	011b      	lsls	r3, r3, #4
 8001614:	440b      	add	r3, r1
 8001616:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	6819      	ldr	r1, [r3, #0]
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	691a      	ldr	r2, [r3, #16]
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	3318      	adds	r3, #24
 8001624:	011b      	lsls	r3, r3, #4
 8001626:	440b      	add	r3, r1
 8001628:	3304      	adds	r3, #4
 800162a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	7d1b      	ldrb	r3, [r3, #20]
 8001630:	2b01      	cmp	r3, #1
 8001632:	d111      	bne.n	8001658 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	3318      	adds	r3, #24
 800163c:	011b      	lsls	r3, r3, #4
 800163e:	4413      	add	r3, r2
 8001640:	3304      	adds	r3, #4
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	68fa      	ldr	r2, [r7, #12]
 8001646:	6811      	ldr	r1, [r2, #0]
 8001648:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	3318      	adds	r3, #24
 8001650:	011b      	lsls	r3, r3, #4
 8001652:	440b      	add	r3, r1
 8001654:	3304      	adds	r3, #4
 8001656:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	3307      	adds	r3, #7
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	061a      	lsls	r2, r3, #24
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	3306      	adds	r3, #6
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	041b      	lsls	r3, r3, #16
 8001668:	431a      	orrs	r2, r3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	3305      	adds	r3, #5
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	021b      	lsls	r3, r3, #8
 8001672:	4313      	orrs	r3, r2
 8001674:	687a      	ldr	r2, [r7, #4]
 8001676:	3204      	adds	r2, #4
 8001678:	7812      	ldrb	r2, [r2, #0]
 800167a:	4610      	mov	r0, r2
 800167c:	68fa      	ldr	r2, [r7, #12]
 800167e:	6811      	ldr	r1, [r2, #0]
 8001680:	ea43 0200 	orr.w	r2, r3, r0
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	011b      	lsls	r3, r3, #4
 8001688:	440b      	add	r3, r1
 800168a:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800168e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	3303      	adds	r3, #3
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	061a      	lsls	r2, r3, #24
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	3302      	adds	r3, #2
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	041b      	lsls	r3, r3, #16
 80016a0:	431a      	orrs	r2, r3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	3301      	adds	r3, #1
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	021b      	lsls	r3, r3, #8
 80016aa:	4313      	orrs	r3, r2
 80016ac:	687a      	ldr	r2, [r7, #4]
 80016ae:	7812      	ldrb	r2, [r2, #0]
 80016b0:	4610      	mov	r0, r2
 80016b2:	68fa      	ldr	r2, [r7, #12]
 80016b4:	6811      	ldr	r1, [r2, #0]
 80016b6:	ea43 0200 	orr.w	r2, r3, r0
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	011b      	lsls	r3, r3, #4
 80016be:	440b      	add	r3, r1
 80016c0:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80016c4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	3318      	adds	r3, #24
 80016ce:	011b      	lsls	r3, r3, #4
 80016d0:	4413      	add	r3, r2
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	68fa      	ldr	r2, [r7, #12]
 80016d6:	6811      	ldr	r1, [r2, #0]
 80016d8:	f043 0201 	orr.w	r2, r3, #1
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	3318      	adds	r3, #24
 80016e0:	011b      	lsls	r3, r3, #4
 80016e2:	440b      	add	r3, r1
 80016e4:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80016e6:	2300      	movs	r3, #0
 80016e8:	e00e      	b.n	8001708 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016ee:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e006      	b.n	8001708 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016fe:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
  }
}
 8001708:	4618      	mov	r0, r3
 800170a:	3724      	adds	r7, #36	@ 0x24
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr

08001714 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8001714:	b480      	push	{r7}
 8001716:	b085      	sub	sp, #20
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800171c:	2300      	movs	r3, #0
 800171e:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001726:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8001728:	7afb      	ldrb	r3, [r7, #11]
 800172a:	2b01      	cmp	r3, #1
 800172c:	d002      	beq.n	8001734 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 800172e:	7afb      	ldrb	r3, [r7, #11]
 8001730:	2b02      	cmp	r3, #2
 8001732:	d11d      	bne.n	8001770 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d002      	beq.n	8001748 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	3301      	adds	r3, #1
 8001746:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d002      	beq.n	800175c <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	3301      	adds	r3, #1
 800175a:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d002      	beq.n	8001770 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	3301      	adds	r3, #1
 800176e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8001770:	68fb      	ldr	r3, [r7, #12]
}
 8001772:	4618      	mov	r0, r3
 8001774:	3714      	adds	r7, #20
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr

0800177e <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800177e:	b480      	push	{r7}
 8001780:	b087      	sub	sp, #28
 8001782:	af00      	add	r7, sp, #0
 8001784:	60f8      	str	r0, [r7, #12]
 8001786:	60b9      	str	r1, [r7, #8]
 8001788:	607a      	str	r2, [r7, #4]
 800178a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001792:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001794:	7dfb      	ldrb	r3, [r7, #23]
 8001796:	2b01      	cmp	r3, #1
 8001798:	d003      	beq.n	80017a2 <HAL_CAN_GetRxMessage+0x24>
 800179a:	7dfb      	ldrb	r3, [r7, #23]
 800179c:	2b02      	cmp	r3, #2
 800179e:	f040 8103 	bne.w	80019a8 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d10e      	bne.n	80017c6 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	68db      	ldr	r3, [r3, #12]
 80017ae:	f003 0303 	and.w	r3, r3, #3
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d116      	bne.n	80017e4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017ba:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e0f7      	b.n	80019b6 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	691b      	ldr	r3, [r3, #16]
 80017cc:	f003 0303 	and.w	r3, r3, #3
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d107      	bne.n	80017e4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017d8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e0e8      	b.n	80019b6 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	331b      	adds	r3, #27
 80017ec:	011b      	lsls	r3, r3, #4
 80017ee:	4413      	add	r3, r2
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0204 	and.w	r2, r3, #4
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d10c      	bne.n	800181c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	331b      	adds	r3, #27
 800180a:	011b      	lsls	r3, r3, #4
 800180c:	4413      	add	r3, r2
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	0d5b      	lsrs	r3, r3, #21
 8001812:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	601a      	str	r2, [r3, #0]
 800181a:	e00b      	b.n	8001834 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	331b      	adds	r3, #27
 8001824:	011b      	lsls	r3, r3, #4
 8001826:	4413      	add	r3, r2
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	08db      	lsrs	r3, r3, #3
 800182c:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	331b      	adds	r3, #27
 800183c:	011b      	lsls	r3, r3, #4
 800183e:	4413      	add	r3, r2
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0202 	and.w	r2, r3, #2
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	331b      	adds	r3, #27
 8001852:	011b      	lsls	r3, r3, #4
 8001854:	4413      	add	r3, r2
 8001856:	3304      	adds	r3, #4
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0308 	and.w	r3, r3, #8
 800185e:	2b00      	cmp	r3, #0
 8001860:	d003      	beq.n	800186a <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2208      	movs	r2, #8
 8001866:	611a      	str	r2, [r3, #16]
 8001868:	e00b      	b.n	8001882 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	331b      	adds	r3, #27
 8001872:	011b      	lsls	r3, r3, #4
 8001874:	4413      	add	r3, r2
 8001876:	3304      	adds	r3, #4
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 020f 	and.w	r2, r3, #15
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	331b      	adds	r3, #27
 800188a:	011b      	lsls	r3, r3, #4
 800188c:	4413      	add	r3, r2
 800188e:	3304      	adds	r3, #4
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	0a1b      	lsrs	r3, r3, #8
 8001894:	b2da      	uxtb	r2, r3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	331b      	adds	r3, #27
 80018a2:	011b      	lsls	r3, r3, #4
 80018a4:	4413      	add	r3, r2
 80018a6:	3304      	adds	r3, #4
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	0c1b      	lsrs	r3, r3, #16
 80018ac:	b29a      	uxth	r2, r3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	011b      	lsls	r3, r3, #4
 80018ba:	4413      	add	r3, r2
 80018bc:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	b2da      	uxtb	r2, r3
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	011b      	lsls	r3, r3, #4
 80018d0:	4413      	add	r3, r2
 80018d2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	0a1a      	lsrs	r2, r3, #8
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	3301      	adds	r3, #1
 80018de:	b2d2      	uxtb	r2, r2
 80018e0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	011b      	lsls	r3, r3, #4
 80018ea:	4413      	add	r3, r2
 80018ec:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	0c1a      	lsrs	r2, r3, #16
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	3302      	adds	r3, #2
 80018f8:	b2d2      	uxtb	r2, r2
 80018fa:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	011b      	lsls	r3, r3, #4
 8001904:	4413      	add	r3, r2
 8001906:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	0e1a      	lsrs	r2, r3, #24
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	3303      	adds	r3, #3
 8001912:	b2d2      	uxtb	r2, r2
 8001914:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	011b      	lsls	r3, r3, #4
 800191e:	4413      	add	r3, r2
 8001920:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	3304      	adds	r3, #4
 800192a:	b2d2      	uxtb	r2, r2
 800192c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	011b      	lsls	r3, r3, #4
 8001936:	4413      	add	r3, r2
 8001938:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	0a1a      	lsrs	r2, r3, #8
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	3305      	adds	r3, #5
 8001944:	b2d2      	uxtb	r2, r2
 8001946:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	011b      	lsls	r3, r3, #4
 8001950:	4413      	add	r3, r2
 8001952:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	0c1a      	lsrs	r2, r3, #16
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	3306      	adds	r3, #6
 800195e:	b2d2      	uxtb	r2, r2
 8001960:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	011b      	lsls	r3, r3, #4
 800196a:	4413      	add	r3, r2
 800196c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	0e1a      	lsrs	r2, r3, #24
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	3307      	adds	r3, #7
 8001978:	b2d2      	uxtb	r2, r2
 800197a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d108      	bne.n	8001994 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	68da      	ldr	r2, [r3, #12]
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f042 0220 	orr.w	r2, r2, #32
 8001990:	60da      	str	r2, [r3, #12]
 8001992:	e007      	b.n	80019a4 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	691a      	ldr	r2, [r3, #16]
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f042 0220 	orr.w	r2, r2, #32
 80019a2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80019a4:	2300      	movs	r3, #0
 80019a6:	e006      	b.n	80019b6 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ac:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
  }
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	371c      	adds	r7, #28
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr

080019c2 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80019c2:	b480      	push	{r7}
 80019c4:	b085      	sub	sp, #20
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
 80019ca:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019d2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80019d4:	7bfb      	ldrb	r3, [r7, #15]
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d002      	beq.n	80019e0 <HAL_CAN_ActivateNotification+0x1e>
 80019da:	7bfb      	ldrb	r3, [r7, #15]
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d109      	bne.n	80019f4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	6959      	ldr	r1, [r3, #20]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	683a      	ldr	r2, [r7, #0]
 80019ec:	430a      	orrs	r2, r1
 80019ee:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80019f0:	2300      	movs	r3, #0
 80019f2:	e006      	b.n	8001a02 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019f8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
  }
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3714      	adds	r7, #20
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr

08001a0e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b08a      	sub	sp, #40	@ 0x28
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001a16:	2300      	movs	r3, #0
 8001a18:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	695b      	ldr	r3, [r3, #20]
 8001a20:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	691b      	ldr	r3, [r3, #16]
 8001a40:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	699b      	ldr	r3, [r3, #24]
 8001a48:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001a4a:	6a3b      	ldr	r3, [r7, #32]
 8001a4c:	f003 0301 	and.w	r3, r3, #1
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d07c      	beq.n	8001b4e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d023      	beq.n	8001aa6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2201      	movs	r2, #1
 8001a64:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	f003 0302 	and.w	r3, r3, #2
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d003      	beq.n	8001a78 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f000 f983 	bl	8001d7c <HAL_CAN_TxMailbox0CompleteCallback>
 8001a76:	e016      	b.n	8001aa6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	f003 0304 	and.w	r3, r3, #4
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d004      	beq.n	8001a8c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a84:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001a88:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a8a:	e00c      	b.n	8001aa6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001a8c:	69bb      	ldr	r3, [r7, #24]
 8001a8e:	f003 0308 	and.w	r3, r3, #8
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d004      	beq.n	8001aa0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a98:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001a9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a9e:	e002      	b.n	8001aa6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f000 f989 	bl	8001db8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d024      	beq.n	8001afa <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ab8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d003      	beq.n	8001acc <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f000 f963 	bl	8001d90 <HAL_CAN_TxMailbox1CompleteCallback>
 8001aca:	e016      	b.n	8001afa <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d004      	beq.n	8001ae0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ad8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001adc:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ade:	e00c      	b.n	8001afa <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d004      	beq.n	8001af4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001af0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001af2:	e002      	b.n	8001afa <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f000 f969 	bl	8001dcc <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d024      	beq.n	8001b4e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001b0c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d003      	beq.n	8001b20 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f000 f943 	bl	8001da4 <HAL_CAN_TxMailbox2CompleteCallback>
 8001b1e:	e016      	b.n	8001b4e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d004      	beq.n	8001b34 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b2c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b30:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b32:	e00c      	b.n	8001b4e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d004      	beq.n	8001b48 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b44:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b46:	e002      	b.n	8001b4e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f000 f949 	bl	8001de0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001b4e:	6a3b      	ldr	r3, [r7, #32]
 8001b50:	f003 0308 	and.w	r3, r3, #8
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d00c      	beq.n	8001b72 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	f003 0310 	and.w	r3, r3, #16
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d007      	beq.n	8001b72 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b64:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b68:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	2210      	movs	r2, #16
 8001b70:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001b72:	6a3b      	ldr	r3, [r7, #32]
 8001b74:	f003 0304 	and.w	r3, r3, #4
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d00b      	beq.n	8001b94 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	f003 0308 	and.w	r3, r3, #8
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d006      	beq.n	8001b94 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	2208      	movs	r2, #8
 8001b8c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f000 f930 	bl	8001df4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001b94:	6a3b      	ldr	r3, [r7, #32]
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d009      	beq.n	8001bb2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	f003 0303 	and.w	r3, r3, #3
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d002      	beq.n	8001bb2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f7fe fcd1 	bl	8000554 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001bb2:	6a3b      	ldr	r3, [r7, #32]
 8001bb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d00c      	beq.n	8001bd6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	f003 0310 	and.w	r3, r3, #16
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d007      	beq.n	8001bd6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001bcc:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	2210      	movs	r2, #16
 8001bd4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001bd6:	6a3b      	ldr	r3, [r7, #32]
 8001bd8:	f003 0320 	and.w	r3, r3, #32
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d00b      	beq.n	8001bf8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	f003 0308 	and.w	r3, r3, #8
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d006      	beq.n	8001bf8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	2208      	movs	r2, #8
 8001bf0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f000 f912 	bl	8001e1c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001bf8:	6a3b      	ldr	r3, [r7, #32]
 8001bfa:	f003 0310 	and.w	r3, r3, #16
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d009      	beq.n	8001c16 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	691b      	ldr	r3, [r3, #16]
 8001c08:	f003 0303 	and.w	r3, r3, #3
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d002      	beq.n	8001c16 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f000 f8f9 	bl	8001e08 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001c16:	6a3b      	ldr	r3, [r7, #32]
 8001c18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d00b      	beq.n	8001c38 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	f003 0310 	and.w	r3, r3, #16
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d006      	beq.n	8001c38 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2210      	movs	r2, #16
 8001c30:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f000 f8fc 	bl	8001e30 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001c38:	6a3b      	ldr	r3, [r7, #32]
 8001c3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d00b      	beq.n	8001c5a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	f003 0308 	and.w	r3, r3, #8
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d006      	beq.n	8001c5a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2208      	movs	r2, #8
 8001c52:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f000 f8f5 	bl	8001e44 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001c5a:	6a3b      	ldr	r3, [r7, #32]
 8001c5c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d07b      	beq.n	8001d5c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	f003 0304 	and.w	r3, r3, #4
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d072      	beq.n	8001d54 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001c6e:	6a3b      	ldr	r3, [r7, #32]
 8001c70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d008      	beq.n	8001c8a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d003      	beq.n	8001c8a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c84:	f043 0301 	orr.w	r3, r3, #1
 8001c88:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001c8a:	6a3b      	ldr	r3, [r7, #32]
 8001c8c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d008      	beq.n	8001ca6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d003      	beq.n	8001ca6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ca0:	f043 0302 	orr.w	r3, r3, #2
 8001ca4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001ca6:	6a3b      	ldr	r3, [r7, #32]
 8001ca8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d008      	beq.n	8001cc2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d003      	beq.n	8001cc2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cbc:	f043 0304 	orr.w	r3, r3, #4
 8001cc0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001cc2:	6a3b      	ldr	r3, [r7, #32]
 8001cc4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d043      	beq.n	8001d54 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d03e      	beq.n	8001d54 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001cdc:	2b60      	cmp	r3, #96	@ 0x60
 8001cde:	d02b      	beq.n	8001d38 <HAL_CAN_IRQHandler+0x32a>
 8001ce0:	2b60      	cmp	r3, #96	@ 0x60
 8001ce2:	d82e      	bhi.n	8001d42 <HAL_CAN_IRQHandler+0x334>
 8001ce4:	2b50      	cmp	r3, #80	@ 0x50
 8001ce6:	d022      	beq.n	8001d2e <HAL_CAN_IRQHandler+0x320>
 8001ce8:	2b50      	cmp	r3, #80	@ 0x50
 8001cea:	d82a      	bhi.n	8001d42 <HAL_CAN_IRQHandler+0x334>
 8001cec:	2b40      	cmp	r3, #64	@ 0x40
 8001cee:	d019      	beq.n	8001d24 <HAL_CAN_IRQHandler+0x316>
 8001cf0:	2b40      	cmp	r3, #64	@ 0x40
 8001cf2:	d826      	bhi.n	8001d42 <HAL_CAN_IRQHandler+0x334>
 8001cf4:	2b30      	cmp	r3, #48	@ 0x30
 8001cf6:	d010      	beq.n	8001d1a <HAL_CAN_IRQHandler+0x30c>
 8001cf8:	2b30      	cmp	r3, #48	@ 0x30
 8001cfa:	d822      	bhi.n	8001d42 <HAL_CAN_IRQHandler+0x334>
 8001cfc:	2b10      	cmp	r3, #16
 8001cfe:	d002      	beq.n	8001d06 <HAL_CAN_IRQHandler+0x2f8>
 8001d00:	2b20      	cmp	r3, #32
 8001d02:	d005      	beq.n	8001d10 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001d04:	e01d      	b.n	8001d42 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d08:	f043 0308 	orr.w	r3, r3, #8
 8001d0c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001d0e:	e019      	b.n	8001d44 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d12:	f043 0310 	orr.w	r3, r3, #16
 8001d16:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001d18:	e014      	b.n	8001d44 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d1c:	f043 0320 	orr.w	r3, r3, #32
 8001d20:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001d22:	e00f      	b.n	8001d44 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d2a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001d2c:	e00a      	b.n	8001d44 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d34:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001d36:	e005      	b.n	8001d44 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d3e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001d40:	e000      	b.n	8001d44 <HAL_CAN_IRQHandler+0x336>
            break;
 8001d42:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	699a      	ldr	r2, [r3, #24]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001d52:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2204      	movs	r2, #4
 8001d5a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d008      	beq.n	8001d74 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d68:	431a      	orrs	r2, r3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f000 f872 	bl	8001e58 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001d74:	bf00      	nop
 8001d76:	3728      	adds	r7, #40	@ 0x28
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001d84:	bf00      	nop
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001d98:	bf00      	nop
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001dac:	bf00      	nop
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001dc0:	bf00      	nop
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001dd4:	bf00      	nop
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001de8:	bf00      	nop
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001dfc:	bf00      	nop
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001e10:	bf00      	nop
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr

08001e1c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001e24:	bf00      	nop
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001e38:	bf00      	nop
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001e4c:	bf00      	nop
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001e60:	bf00      	nop
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f003 0307 	and.w	r3, r3, #7
 8001e7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e7c:	4b0c      	ldr	r3, [pc, #48]	@ (8001eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e82:	68ba      	ldr	r2, [r7, #8]
 8001e84:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e88:	4013      	ands	r3, r2
 8001e8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e94:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e9e:	4a04      	ldr	r2, [pc, #16]	@ (8001eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	60d3      	str	r3, [r2, #12]
}
 8001ea4:	bf00      	nop
 8001ea6:	3714      	adds	r7, #20
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr
 8001eb0:	e000ed00 	.word	0xe000ed00

08001eb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001eb8:	4b04      	ldr	r3, [pc, #16]	@ (8001ecc <__NVIC_GetPriorityGrouping+0x18>)
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	0a1b      	lsrs	r3, r3, #8
 8001ebe:	f003 0307 	and.w	r3, r3, #7
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr
 8001ecc:	e000ed00 	.word	0xe000ed00

08001ed0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	db0b      	blt.n	8001efa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ee2:	79fb      	ldrb	r3, [r7, #7]
 8001ee4:	f003 021f 	and.w	r2, r3, #31
 8001ee8:	4907      	ldr	r1, [pc, #28]	@ (8001f08 <__NVIC_EnableIRQ+0x38>)
 8001eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eee:	095b      	lsrs	r3, r3, #5
 8001ef0:	2001      	movs	r0, #1
 8001ef2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001efa:	bf00      	nop
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	e000e100 	.word	0xe000e100

08001f0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	4603      	mov	r3, r0
 8001f14:	6039      	str	r1, [r7, #0]
 8001f16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	db0a      	blt.n	8001f36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	b2da      	uxtb	r2, r3
 8001f24:	490c      	ldr	r1, [pc, #48]	@ (8001f58 <__NVIC_SetPriority+0x4c>)
 8001f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2a:	0112      	lsls	r2, r2, #4
 8001f2c:	b2d2      	uxtb	r2, r2
 8001f2e:	440b      	add	r3, r1
 8001f30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f34:	e00a      	b.n	8001f4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	b2da      	uxtb	r2, r3
 8001f3a:	4908      	ldr	r1, [pc, #32]	@ (8001f5c <__NVIC_SetPriority+0x50>)
 8001f3c:	79fb      	ldrb	r3, [r7, #7]
 8001f3e:	f003 030f 	and.w	r3, r3, #15
 8001f42:	3b04      	subs	r3, #4
 8001f44:	0112      	lsls	r2, r2, #4
 8001f46:	b2d2      	uxtb	r2, r2
 8001f48:	440b      	add	r3, r1
 8001f4a:	761a      	strb	r2, [r3, #24]
}
 8001f4c:	bf00      	nop
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr
 8001f58:	e000e100 	.word	0xe000e100
 8001f5c:	e000ed00 	.word	0xe000ed00

08001f60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b089      	sub	sp, #36	@ 0x24
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	60f8      	str	r0, [r7, #12]
 8001f68:	60b9      	str	r1, [r7, #8]
 8001f6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	f003 0307 	and.w	r3, r3, #7
 8001f72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	f1c3 0307 	rsb	r3, r3, #7
 8001f7a:	2b04      	cmp	r3, #4
 8001f7c:	bf28      	it	cs
 8001f7e:	2304      	movcs	r3, #4
 8001f80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	3304      	adds	r3, #4
 8001f86:	2b06      	cmp	r3, #6
 8001f88:	d902      	bls.n	8001f90 <NVIC_EncodePriority+0x30>
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	3b03      	subs	r3, #3
 8001f8e:	e000      	b.n	8001f92 <NVIC_EncodePriority+0x32>
 8001f90:	2300      	movs	r3, #0
 8001f92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f94:	f04f 32ff 	mov.w	r2, #4294967295
 8001f98:	69bb      	ldr	r3, [r7, #24]
 8001f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9e:	43da      	mvns	r2, r3
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	401a      	ands	r2, r3
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fa8:	f04f 31ff 	mov.w	r1, #4294967295
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb2:	43d9      	mvns	r1, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fb8:	4313      	orrs	r3, r2
         );
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3724      	adds	r7, #36	@ 0x24
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
	...

08001fc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	3b01      	subs	r3, #1
 8001fd4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001fd8:	d301      	bcc.n	8001fde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e00f      	b.n	8001ffe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fde:	4a0a      	ldr	r2, [pc, #40]	@ (8002008 <SysTick_Config+0x40>)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	3b01      	subs	r3, #1
 8001fe4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fe6:	210f      	movs	r1, #15
 8001fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8001fec:	f7ff ff8e 	bl	8001f0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ff0:	4b05      	ldr	r3, [pc, #20]	@ (8002008 <SysTick_Config+0x40>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ff6:	4b04      	ldr	r3, [pc, #16]	@ (8002008 <SysTick_Config+0x40>)
 8001ff8:	2207      	movs	r2, #7
 8001ffa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3708      	adds	r7, #8
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	e000e010 	.word	0xe000e010

0800200c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f7ff ff29 	bl	8001e6c <__NVIC_SetPriorityGrouping>
}
 800201a:	bf00      	nop
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002022:	b580      	push	{r7, lr}
 8002024:	b086      	sub	sp, #24
 8002026:	af00      	add	r7, sp, #0
 8002028:	4603      	mov	r3, r0
 800202a:	60b9      	str	r1, [r7, #8]
 800202c:	607a      	str	r2, [r7, #4]
 800202e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002030:	2300      	movs	r3, #0
 8002032:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002034:	f7ff ff3e 	bl	8001eb4 <__NVIC_GetPriorityGrouping>
 8002038:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	68b9      	ldr	r1, [r7, #8]
 800203e:	6978      	ldr	r0, [r7, #20]
 8002040:	f7ff ff8e 	bl	8001f60 <NVIC_EncodePriority>
 8002044:	4602      	mov	r2, r0
 8002046:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800204a:	4611      	mov	r1, r2
 800204c:	4618      	mov	r0, r3
 800204e:	f7ff ff5d 	bl	8001f0c <__NVIC_SetPriority>
}
 8002052:	bf00      	nop
 8002054:	3718      	adds	r7, #24
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800205a:	b580      	push	{r7, lr}
 800205c:	b082      	sub	sp, #8
 800205e:	af00      	add	r7, sp, #0
 8002060:	4603      	mov	r3, r0
 8002062:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002068:	4618      	mov	r0, r3
 800206a:	f7ff ff31 	bl	8001ed0 <__NVIC_EnableIRQ>
}
 800206e:	bf00      	nop
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b082      	sub	sp, #8
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f7ff ffa2 	bl	8001fc8 <SysTick_Config>
 8002084:	4603      	mov	r3, r0
}
 8002086:	4618      	mov	r0, r3
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
	...

08002090 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002098:	2300      	movs	r3, #0
 800209a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800209c:	f7ff f81a 	bl	80010d4 <HAL_GetTick>
 80020a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d101      	bne.n	80020ac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e099      	b.n	80021e0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2202      	movs	r2, #2
 80020b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2200      	movs	r2, #0
 80020b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f022 0201 	bic.w	r2, r2, #1
 80020ca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020cc:	e00f      	b.n	80020ee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020ce:	f7ff f801 	bl	80010d4 <HAL_GetTick>
 80020d2:	4602      	mov	r2, r0
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	2b05      	cmp	r3, #5
 80020da:	d908      	bls.n	80020ee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2220      	movs	r2, #32
 80020e0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2203      	movs	r2, #3
 80020e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e078      	b.n	80021e0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0301 	and.w	r3, r3, #1
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d1e8      	bne.n	80020ce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002104:	697a      	ldr	r2, [r7, #20]
 8002106:	4b38      	ldr	r3, [pc, #224]	@ (80021e8 <HAL_DMA_Init+0x158>)
 8002108:	4013      	ands	r3, r2
 800210a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685a      	ldr	r2, [r3, #4]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800211a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	691b      	ldr	r3, [r3, #16]
 8002120:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002126:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	699b      	ldr	r3, [r3, #24]
 800212c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002132:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6a1b      	ldr	r3, [r3, #32]
 8002138:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800213a:	697a      	ldr	r2, [r7, #20]
 800213c:	4313      	orrs	r3, r2
 800213e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002144:	2b04      	cmp	r3, #4
 8002146:	d107      	bne.n	8002158 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002150:	4313      	orrs	r3, r2
 8002152:	697a      	ldr	r2, [r7, #20]
 8002154:	4313      	orrs	r3, r2
 8002156:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	697a      	ldr	r2, [r7, #20]
 800215e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	695b      	ldr	r3, [r3, #20]
 8002166:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	f023 0307 	bic.w	r3, r3, #7
 800216e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002174:	697a      	ldr	r2, [r7, #20]
 8002176:	4313      	orrs	r3, r2
 8002178:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800217e:	2b04      	cmp	r3, #4
 8002180:	d117      	bne.n	80021b2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002186:	697a      	ldr	r2, [r7, #20]
 8002188:	4313      	orrs	r3, r2
 800218a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002190:	2b00      	cmp	r3, #0
 8002192:	d00e      	beq.n	80021b2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f000 f9e9 	bl	800256c <DMA_CheckFifoParam>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d008      	beq.n	80021b2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2240      	movs	r2, #64	@ 0x40
 80021a4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2201      	movs	r2, #1
 80021aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80021ae:	2301      	movs	r3, #1
 80021b0:	e016      	b.n	80021e0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	697a      	ldr	r2, [r7, #20]
 80021b8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f000 f9a0 	bl	8002500 <DMA_CalcBaseAndBitshift>
 80021c0:	4603      	mov	r3, r0
 80021c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021c8:	223f      	movs	r2, #63	@ 0x3f
 80021ca:	409a      	lsls	r2, r3
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2201      	movs	r2, #1
 80021da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80021de:	2300      	movs	r3, #0
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3718      	adds	r7, #24
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	f010803f 	.word	0xf010803f

080021ec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b086      	sub	sp, #24
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80021f4:	2300      	movs	r3, #0
 80021f6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80021f8:	4b8e      	ldr	r3, [pc, #568]	@ (8002434 <HAL_DMA_IRQHandler+0x248>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a8e      	ldr	r2, [pc, #568]	@ (8002438 <HAL_DMA_IRQHandler+0x24c>)
 80021fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002202:	0a9b      	lsrs	r3, r3, #10
 8002204:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800220a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002216:	2208      	movs	r2, #8
 8002218:	409a      	lsls	r2, r3
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	4013      	ands	r3, r2
 800221e:	2b00      	cmp	r3, #0
 8002220:	d01a      	beq.n	8002258 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0304 	and.w	r3, r3, #4
 800222c:	2b00      	cmp	r3, #0
 800222e:	d013      	beq.n	8002258 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f022 0204 	bic.w	r2, r2, #4
 800223e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002244:	2208      	movs	r2, #8
 8002246:	409a      	lsls	r2, r3
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002250:	f043 0201 	orr.w	r2, r3, #1
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800225c:	2201      	movs	r2, #1
 800225e:	409a      	lsls	r2, r3
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	4013      	ands	r3, r2
 8002264:	2b00      	cmp	r3, #0
 8002266:	d012      	beq.n	800228e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	695b      	ldr	r3, [r3, #20]
 800226e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002272:	2b00      	cmp	r3, #0
 8002274:	d00b      	beq.n	800228e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800227a:	2201      	movs	r2, #1
 800227c:	409a      	lsls	r2, r3
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002286:	f043 0202 	orr.w	r2, r3, #2
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002292:	2204      	movs	r2, #4
 8002294:	409a      	lsls	r2, r3
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	4013      	ands	r3, r2
 800229a:	2b00      	cmp	r3, #0
 800229c:	d012      	beq.n	80022c4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0302 	and.w	r3, r3, #2
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d00b      	beq.n	80022c4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022b0:	2204      	movs	r2, #4
 80022b2:	409a      	lsls	r2, r3
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022bc:	f043 0204 	orr.w	r2, r3, #4
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022c8:	2210      	movs	r2, #16
 80022ca:	409a      	lsls	r2, r3
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	4013      	ands	r3, r2
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d043      	beq.n	800235c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0308 	and.w	r3, r3, #8
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d03c      	beq.n	800235c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022e6:	2210      	movs	r2, #16
 80022e8:	409a      	lsls	r2, r3
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d018      	beq.n	800232e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d108      	bne.n	800231c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800230e:	2b00      	cmp	r3, #0
 8002310:	d024      	beq.n	800235c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	4798      	blx	r3
 800231a:	e01f      	b.n	800235c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002320:	2b00      	cmp	r3, #0
 8002322:	d01b      	beq.n	800235c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	4798      	blx	r3
 800232c:	e016      	b.n	800235c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002338:	2b00      	cmp	r3, #0
 800233a:	d107      	bne.n	800234c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f022 0208 	bic.w	r2, r2, #8
 800234a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002350:	2b00      	cmp	r3, #0
 8002352:	d003      	beq.n	800235c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002360:	2220      	movs	r2, #32
 8002362:	409a      	lsls	r2, r3
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	4013      	ands	r3, r2
 8002368:	2b00      	cmp	r3, #0
 800236a:	f000 808f 	beq.w	800248c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0310 	and.w	r3, r3, #16
 8002378:	2b00      	cmp	r3, #0
 800237a:	f000 8087 	beq.w	800248c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002382:	2220      	movs	r2, #32
 8002384:	409a      	lsls	r2, r3
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002390:	b2db      	uxtb	r3, r3
 8002392:	2b05      	cmp	r3, #5
 8002394:	d136      	bne.n	8002404 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f022 0216 	bic.w	r2, r2, #22
 80023a4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	695a      	ldr	r2, [r3, #20]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80023b4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d103      	bne.n	80023c6 <HAL_DMA_IRQHandler+0x1da>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d007      	beq.n	80023d6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f022 0208 	bic.w	r2, r2, #8
 80023d4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023da:	223f      	movs	r2, #63	@ 0x3f
 80023dc:	409a      	lsls	r2, r3
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2201      	movs	r2, #1
 80023e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2200      	movs	r2, #0
 80023ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d07e      	beq.n	80024f8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	4798      	blx	r3
        }
        return;
 8002402:	e079      	b.n	80024f8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d01d      	beq.n	800244e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d10d      	bne.n	800243c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002424:	2b00      	cmp	r3, #0
 8002426:	d031      	beq.n	800248c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	4798      	blx	r3
 8002430:	e02c      	b.n	800248c <HAL_DMA_IRQHandler+0x2a0>
 8002432:	bf00      	nop
 8002434:	20000000 	.word	0x20000000
 8002438:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002440:	2b00      	cmp	r3, #0
 8002442:	d023      	beq.n	800248c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	4798      	blx	r3
 800244c:	e01e      	b.n	800248c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002458:	2b00      	cmp	r3, #0
 800245a:	d10f      	bne.n	800247c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f022 0210 	bic.w	r2, r2, #16
 800246a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2201      	movs	r2, #1
 8002470:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002480:	2b00      	cmp	r3, #0
 8002482:	d003      	beq.n	800248c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002490:	2b00      	cmp	r3, #0
 8002492:	d032      	beq.n	80024fa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002498:	f003 0301 	and.w	r3, r3, #1
 800249c:	2b00      	cmp	r3, #0
 800249e:	d022      	beq.n	80024e6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2205      	movs	r2, #5
 80024a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f022 0201 	bic.w	r2, r2, #1
 80024b6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	3301      	adds	r3, #1
 80024bc:	60bb      	str	r3, [r7, #8]
 80024be:	697a      	ldr	r2, [r7, #20]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d307      	bcc.n	80024d4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0301 	and.w	r3, r3, #1
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d1f2      	bne.n	80024b8 <HAL_DMA_IRQHandler+0x2cc>
 80024d2:	e000      	b.n	80024d6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80024d4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2201      	movs	r2, #1
 80024da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d005      	beq.n	80024fa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	4798      	blx	r3
 80024f6:	e000      	b.n	80024fa <HAL_DMA_IRQHandler+0x30e>
        return;
 80024f8:	bf00      	nop
    }
  }
}
 80024fa:	3718      	adds	r7, #24
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}

08002500 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002500:	b480      	push	{r7}
 8002502:	b085      	sub	sp, #20
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	b2db      	uxtb	r3, r3
 800250e:	3b10      	subs	r3, #16
 8002510:	4a14      	ldr	r2, [pc, #80]	@ (8002564 <DMA_CalcBaseAndBitshift+0x64>)
 8002512:	fba2 2303 	umull	r2, r3, r2, r3
 8002516:	091b      	lsrs	r3, r3, #4
 8002518:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800251a:	4a13      	ldr	r2, [pc, #76]	@ (8002568 <DMA_CalcBaseAndBitshift+0x68>)
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	4413      	add	r3, r2
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	461a      	mov	r2, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2b03      	cmp	r3, #3
 800252c:	d909      	bls.n	8002542 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002536:	f023 0303 	bic.w	r3, r3, #3
 800253a:	1d1a      	adds	r2, r3, #4
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002540:	e007      	b.n	8002552 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800254a:	f023 0303 	bic.w	r3, r3, #3
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002556:	4618      	mov	r0, r3
 8002558:	3714      	adds	r7, #20
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	aaaaaaab 	.word	0xaaaaaaab
 8002568:	08005250 	.word	0x08005250

0800256c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800256c:	b480      	push	{r7}
 800256e:	b085      	sub	sp, #20
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002574:	2300      	movs	r3, #0
 8002576:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800257c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	699b      	ldr	r3, [r3, #24]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d11f      	bne.n	80025c6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	2b03      	cmp	r3, #3
 800258a:	d856      	bhi.n	800263a <DMA_CheckFifoParam+0xce>
 800258c:	a201      	add	r2, pc, #4	@ (adr r2, 8002594 <DMA_CheckFifoParam+0x28>)
 800258e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002592:	bf00      	nop
 8002594:	080025a5 	.word	0x080025a5
 8002598:	080025b7 	.word	0x080025b7
 800259c:	080025a5 	.word	0x080025a5
 80025a0:	0800263b 	.word	0x0800263b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d046      	beq.n	800263e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025b4:	e043      	b.n	800263e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025ba:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80025be:	d140      	bne.n	8002642 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025c4:	e03d      	b.n	8002642 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	699b      	ldr	r3, [r3, #24]
 80025ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80025ce:	d121      	bne.n	8002614 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	2b03      	cmp	r3, #3
 80025d4:	d837      	bhi.n	8002646 <DMA_CheckFifoParam+0xda>
 80025d6:	a201      	add	r2, pc, #4	@ (adr r2, 80025dc <DMA_CheckFifoParam+0x70>)
 80025d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025dc:	080025ed 	.word	0x080025ed
 80025e0:	080025f3 	.word	0x080025f3
 80025e4:	080025ed 	.word	0x080025ed
 80025e8:	08002605 	.word	0x08002605
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	73fb      	strb	r3, [r7, #15]
      break;
 80025f0:	e030      	b.n	8002654 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025f6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d025      	beq.n	800264a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002602:	e022      	b.n	800264a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002608:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800260c:	d11f      	bne.n	800264e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002612:	e01c      	b.n	800264e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	2b02      	cmp	r3, #2
 8002618:	d903      	bls.n	8002622 <DMA_CheckFifoParam+0xb6>
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	2b03      	cmp	r3, #3
 800261e:	d003      	beq.n	8002628 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002620:	e018      	b.n	8002654 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	73fb      	strb	r3, [r7, #15]
      break;
 8002626:	e015      	b.n	8002654 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800262c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d00e      	beq.n	8002652 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	73fb      	strb	r3, [r7, #15]
      break;
 8002638:	e00b      	b.n	8002652 <DMA_CheckFifoParam+0xe6>
      break;
 800263a:	bf00      	nop
 800263c:	e00a      	b.n	8002654 <DMA_CheckFifoParam+0xe8>
      break;
 800263e:	bf00      	nop
 8002640:	e008      	b.n	8002654 <DMA_CheckFifoParam+0xe8>
      break;
 8002642:	bf00      	nop
 8002644:	e006      	b.n	8002654 <DMA_CheckFifoParam+0xe8>
      break;
 8002646:	bf00      	nop
 8002648:	e004      	b.n	8002654 <DMA_CheckFifoParam+0xe8>
      break;
 800264a:	bf00      	nop
 800264c:	e002      	b.n	8002654 <DMA_CheckFifoParam+0xe8>
      break;   
 800264e:	bf00      	nop
 8002650:	e000      	b.n	8002654 <DMA_CheckFifoParam+0xe8>
      break;
 8002652:	bf00      	nop
    }
  } 
  
  return status; 
 8002654:	7bfb      	ldrb	r3, [r7, #15]
}
 8002656:	4618      	mov	r0, r3
 8002658:	3714      	adds	r7, #20
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop

08002664 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002664:	b480      	push	{r7}
 8002666:	b089      	sub	sp, #36	@ 0x24
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800266e:	2300      	movs	r3, #0
 8002670:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002672:	2300      	movs	r3, #0
 8002674:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002676:	2300      	movs	r3, #0
 8002678:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800267a:	2300      	movs	r3, #0
 800267c:	61fb      	str	r3, [r7, #28]
 800267e:	e16b      	b.n	8002958 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002680:	2201      	movs	r2, #1
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	697a      	ldr	r2, [r7, #20]
 8002690:	4013      	ands	r3, r2
 8002692:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002694:	693a      	ldr	r2, [r7, #16]
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	429a      	cmp	r2, r3
 800269a:	f040 815a 	bne.w	8002952 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f003 0303 	and.w	r3, r3, #3
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d005      	beq.n	80026b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d130      	bne.n	8002718 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	005b      	lsls	r3, r3, #1
 80026c0:	2203      	movs	r2, #3
 80026c2:	fa02 f303 	lsl.w	r3, r2, r3
 80026c6:	43db      	mvns	r3, r3
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	4013      	ands	r3, r2
 80026cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	68da      	ldr	r2, [r3, #12]
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	005b      	lsls	r3, r3, #1
 80026d6:	fa02 f303 	lsl.w	r3, r2, r3
 80026da:	69ba      	ldr	r2, [r7, #24]
 80026dc:	4313      	orrs	r3, r2
 80026de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	69ba      	ldr	r2, [r7, #24]
 80026e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026ec:	2201      	movs	r2, #1
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	fa02 f303 	lsl.w	r3, r2, r3
 80026f4:	43db      	mvns	r3, r3
 80026f6:	69ba      	ldr	r2, [r7, #24]
 80026f8:	4013      	ands	r3, r2
 80026fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	091b      	lsrs	r3, r3, #4
 8002702:	f003 0201 	and.w	r2, r3, #1
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	fa02 f303 	lsl.w	r3, r2, r3
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	4313      	orrs	r3, r2
 8002710:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f003 0303 	and.w	r3, r3, #3
 8002720:	2b03      	cmp	r3, #3
 8002722:	d017      	beq.n	8002754 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	2203      	movs	r2, #3
 8002730:	fa02 f303 	lsl.w	r3, r2, r3
 8002734:	43db      	mvns	r3, r3
 8002736:	69ba      	ldr	r2, [r7, #24]
 8002738:	4013      	ands	r3, r2
 800273a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	689a      	ldr	r2, [r3, #8]
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	005b      	lsls	r3, r3, #1
 8002744:	fa02 f303 	lsl.w	r3, r2, r3
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	4313      	orrs	r3, r2
 800274c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f003 0303 	and.w	r3, r3, #3
 800275c:	2b02      	cmp	r3, #2
 800275e:	d123      	bne.n	80027a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	08da      	lsrs	r2, r3, #3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	3208      	adds	r2, #8
 8002768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800276c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	f003 0307 	and.w	r3, r3, #7
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	220f      	movs	r2, #15
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	43db      	mvns	r3, r3
 800277e:	69ba      	ldr	r2, [r7, #24]
 8002780:	4013      	ands	r3, r2
 8002782:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	691a      	ldr	r2, [r3, #16]
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	f003 0307 	and.w	r3, r3, #7
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	fa02 f303 	lsl.w	r3, r2, r3
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	4313      	orrs	r3, r2
 8002798:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	08da      	lsrs	r2, r3, #3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	3208      	adds	r2, #8
 80027a2:	69b9      	ldr	r1, [r7, #24]
 80027a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	005b      	lsls	r3, r3, #1
 80027b2:	2203      	movs	r2, #3
 80027b4:	fa02 f303 	lsl.w	r3, r2, r3
 80027b8:	43db      	mvns	r3, r3
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	4013      	ands	r3, r2
 80027be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f003 0203 	and.w	r2, r3, #3
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	005b      	lsls	r3, r3, #1
 80027cc:	fa02 f303 	lsl.w	r3, r2, r3
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	f000 80b4 	beq.w	8002952 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027ea:	2300      	movs	r3, #0
 80027ec:	60fb      	str	r3, [r7, #12]
 80027ee:	4b60      	ldr	r3, [pc, #384]	@ (8002970 <HAL_GPIO_Init+0x30c>)
 80027f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027f2:	4a5f      	ldr	r2, [pc, #380]	@ (8002970 <HAL_GPIO_Init+0x30c>)
 80027f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80027fa:	4b5d      	ldr	r3, [pc, #372]	@ (8002970 <HAL_GPIO_Init+0x30c>)
 80027fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002802:	60fb      	str	r3, [r7, #12]
 8002804:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002806:	4a5b      	ldr	r2, [pc, #364]	@ (8002974 <HAL_GPIO_Init+0x310>)
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	089b      	lsrs	r3, r3, #2
 800280c:	3302      	adds	r3, #2
 800280e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002812:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	f003 0303 	and.w	r3, r3, #3
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	220f      	movs	r2, #15
 800281e:	fa02 f303 	lsl.w	r3, r2, r3
 8002822:	43db      	mvns	r3, r3
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	4013      	ands	r3, r2
 8002828:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a52      	ldr	r2, [pc, #328]	@ (8002978 <HAL_GPIO_Init+0x314>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d02b      	beq.n	800288a <HAL_GPIO_Init+0x226>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4a51      	ldr	r2, [pc, #324]	@ (800297c <HAL_GPIO_Init+0x318>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d025      	beq.n	8002886 <HAL_GPIO_Init+0x222>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a50      	ldr	r2, [pc, #320]	@ (8002980 <HAL_GPIO_Init+0x31c>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d01f      	beq.n	8002882 <HAL_GPIO_Init+0x21e>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a4f      	ldr	r2, [pc, #316]	@ (8002984 <HAL_GPIO_Init+0x320>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d019      	beq.n	800287e <HAL_GPIO_Init+0x21a>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a4e      	ldr	r2, [pc, #312]	@ (8002988 <HAL_GPIO_Init+0x324>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d013      	beq.n	800287a <HAL_GPIO_Init+0x216>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a4d      	ldr	r2, [pc, #308]	@ (800298c <HAL_GPIO_Init+0x328>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d00d      	beq.n	8002876 <HAL_GPIO_Init+0x212>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a4c      	ldr	r2, [pc, #304]	@ (8002990 <HAL_GPIO_Init+0x32c>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d007      	beq.n	8002872 <HAL_GPIO_Init+0x20e>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a4b      	ldr	r2, [pc, #300]	@ (8002994 <HAL_GPIO_Init+0x330>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d101      	bne.n	800286e <HAL_GPIO_Init+0x20a>
 800286a:	2307      	movs	r3, #7
 800286c:	e00e      	b.n	800288c <HAL_GPIO_Init+0x228>
 800286e:	2308      	movs	r3, #8
 8002870:	e00c      	b.n	800288c <HAL_GPIO_Init+0x228>
 8002872:	2306      	movs	r3, #6
 8002874:	e00a      	b.n	800288c <HAL_GPIO_Init+0x228>
 8002876:	2305      	movs	r3, #5
 8002878:	e008      	b.n	800288c <HAL_GPIO_Init+0x228>
 800287a:	2304      	movs	r3, #4
 800287c:	e006      	b.n	800288c <HAL_GPIO_Init+0x228>
 800287e:	2303      	movs	r3, #3
 8002880:	e004      	b.n	800288c <HAL_GPIO_Init+0x228>
 8002882:	2302      	movs	r3, #2
 8002884:	e002      	b.n	800288c <HAL_GPIO_Init+0x228>
 8002886:	2301      	movs	r3, #1
 8002888:	e000      	b.n	800288c <HAL_GPIO_Init+0x228>
 800288a:	2300      	movs	r3, #0
 800288c:	69fa      	ldr	r2, [r7, #28]
 800288e:	f002 0203 	and.w	r2, r2, #3
 8002892:	0092      	lsls	r2, r2, #2
 8002894:	4093      	lsls	r3, r2
 8002896:	69ba      	ldr	r2, [r7, #24]
 8002898:	4313      	orrs	r3, r2
 800289a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800289c:	4935      	ldr	r1, [pc, #212]	@ (8002974 <HAL_GPIO_Init+0x310>)
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	089b      	lsrs	r3, r3, #2
 80028a2:	3302      	adds	r3, #2
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028aa:	4b3b      	ldr	r3, [pc, #236]	@ (8002998 <HAL_GPIO_Init+0x334>)
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	43db      	mvns	r3, r3
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	4013      	ands	r3, r2
 80028b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d003      	beq.n	80028ce <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028ce:	4a32      	ldr	r2, [pc, #200]	@ (8002998 <HAL_GPIO_Init+0x334>)
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028d4:	4b30      	ldr	r3, [pc, #192]	@ (8002998 <HAL_GPIO_Init+0x334>)
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	43db      	mvns	r3, r3
 80028de:	69ba      	ldr	r2, [r7, #24]
 80028e0:	4013      	ands	r3, r2
 80028e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d003      	beq.n	80028f8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028f8:	4a27      	ldr	r2, [pc, #156]	@ (8002998 <HAL_GPIO_Init+0x334>)
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80028fe:	4b26      	ldr	r3, [pc, #152]	@ (8002998 <HAL_GPIO_Init+0x334>)
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	43db      	mvns	r3, r3
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	4013      	ands	r3, r2
 800290c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d003      	beq.n	8002922 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800291a:	69ba      	ldr	r2, [r7, #24]
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	4313      	orrs	r3, r2
 8002920:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002922:	4a1d      	ldr	r2, [pc, #116]	@ (8002998 <HAL_GPIO_Init+0x334>)
 8002924:	69bb      	ldr	r3, [r7, #24]
 8002926:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002928:	4b1b      	ldr	r3, [pc, #108]	@ (8002998 <HAL_GPIO_Init+0x334>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	43db      	mvns	r3, r3
 8002932:	69ba      	ldr	r2, [r7, #24]
 8002934:	4013      	ands	r3, r2
 8002936:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d003      	beq.n	800294c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002944:	69ba      	ldr	r2, [r7, #24]
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	4313      	orrs	r3, r2
 800294a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800294c:	4a12      	ldr	r2, [pc, #72]	@ (8002998 <HAL_GPIO_Init+0x334>)
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	3301      	adds	r3, #1
 8002956:	61fb      	str	r3, [r7, #28]
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	2b0f      	cmp	r3, #15
 800295c:	f67f ae90 	bls.w	8002680 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002960:	bf00      	nop
 8002962:	bf00      	nop
 8002964:	3724      	adds	r7, #36	@ 0x24
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop
 8002970:	40023800 	.word	0x40023800
 8002974:	40013800 	.word	0x40013800
 8002978:	40020000 	.word	0x40020000
 800297c:	40020400 	.word	0x40020400
 8002980:	40020800 	.word	0x40020800
 8002984:	40020c00 	.word	0x40020c00
 8002988:	40021000 	.word	0x40021000
 800298c:	40021400 	.word	0x40021400
 8002990:	40021800 	.word	0x40021800
 8002994:	40021c00 	.word	0x40021c00
 8002998:	40013c00 	.word	0x40013c00

0800299c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b086      	sub	sp, #24
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d101      	bne.n	80029ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e267      	b.n	8002e7e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0301 	and.w	r3, r3, #1
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d075      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029ba:	4b88      	ldr	r3, [pc, #544]	@ (8002bdc <HAL_RCC_OscConfig+0x240>)
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f003 030c 	and.w	r3, r3, #12
 80029c2:	2b04      	cmp	r3, #4
 80029c4:	d00c      	beq.n	80029e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029c6:	4b85      	ldr	r3, [pc, #532]	@ (8002bdc <HAL_RCC_OscConfig+0x240>)
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029ce:	2b08      	cmp	r3, #8
 80029d0:	d112      	bne.n	80029f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029d2:	4b82      	ldr	r3, [pc, #520]	@ (8002bdc <HAL_RCC_OscConfig+0x240>)
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80029de:	d10b      	bne.n	80029f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029e0:	4b7e      	ldr	r3, [pc, #504]	@ (8002bdc <HAL_RCC_OscConfig+0x240>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d05b      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x108>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d157      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e242      	b.n	8002e7e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a00:	d106      	bne.n	8002a10 <HAL_RCC_OscConfig+0x74>
 8002a02:	4b76      	ldr	r3, [pc, #472]	@ (8002bdc <HAL_RCC_OscConfig+0x240>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a75      	ldr	r2, [pc, #468]	@ (8002bdc <HAL_RCC_OscConfig+0x240>)
 8002a08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a0c:	6013      	str	r3, [r2, #0]
 8002a0e:	e01d      	b.n	8002a4c <HAL_RCC_OscConfig+0xb0>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a18:	d10c      	bne.n	8002a34 <HAL_RCC_OscConfig+0x98>
 8002a1a:	4b70      	ldr	r3, [pc, #448]	@ (8002bdc <HAL_RCC_OscConfig+0x240>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a6f      	ldr	r2, [pc, #444]	@ (8002bdc <HAL_RCC_OscConfig+0x240>)
 8002a20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a24:	6013      	str	r3, [r2, #0]
 8002a26:	4b6d      	ldr	r3, [pc, #436]	@ (8002bdc <HAL_RCC_OscConfig+0x240>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a6c      	ldr	r2, [pc, #432]	@ (8002bdc <HAL_RCC_OscConfig+0x240>)
 8002a2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a30:	6013      	str	r3, [r2, #0]
 8002a32:	e00b      	b.n	8002a4c <HAL_RCC_OscConfig+0xb0>
 8002a34:	4b69      	ldr	r3, [pc, #420]	@ (8002bdc <HAL_RCC_OscConfig+0x240>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a68      	ldr	r2, [pc, #416]	@ (8002bdc <HAL_RCC_OscConfig+0x240>)
 8002a3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a3e:	6013      	str	r3, [r2, #0]
 8002a40:	4b66      	ldr	r3, [pc, #408]	@ (8002bdc <HAL_RCC_OscConfig+0x240>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a65      	ldr	r2, [pc, #404]	@ (8002bdc <HAL_RCC_OscConfig+0x240>)
 8002a46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d013      	beq.n	8002a7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a54:	f7fe fb3e 	bl	80010d4 <HAL_GetTick>
 8002a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a5a:	e008      	b.n	8002a6e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a5c:	f7fe fb3a 	bl	80010d4 <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	2b64      	cmp	r3, #100	@ 0x64
 8002a68:	d901      	bls.n	8002a6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e207      	b.n	8002e7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a6e:	4b5b      	ldr	r3, [pc, #364]	@ (8002bdc <HAL_RCC_OscConfig+0x240>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d0f0      	beq.n	8002a5c <HAL_RCC_OscConfig+0xc0>
 8002a7a:	e014      	b.n	8002aa6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a7c:	f7fe fb2a 	bl	80010d4 <HAL_GetTick>
 8002a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a82:	e008      	b.n	8002a96 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a84:	f7fe fb26 	bl	80010d4 <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	2b64      	cmp	r3, #100	@ 0x64
 8002a90:	d901      	bls.n	8002a96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	e1f3      	b.n	8002e7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a96:	4b51      	ldr	r3, [pc, #324]	@ (8002bdc <HAL_RCC_OscConfig+0x240>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d1f0      	bne.n	8002a84 <HAL_RCC_OscConfig+0xe8>
 8002aa2:	e000      	b.n	8002aa6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0302 	and.w	r3, r3, #2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d063      	beq.n	8002b7a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ab2:	4b4a      	ldr	r3, [pc, #296]	@ (8002bdc <HAL_RCC_OscConfig+0x240>)
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f003 030c 	and.w	r3, r3, #12
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d00b      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002abe:	4b47      	ldr	r3, [pc, #284]	@ (8002bdc <HAL_RCC_OscConfig+0x240>)
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ac6:	2b08      	cmp	r3, #8
 8002ac8:	d11c      	bne.n	8002b04 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002aca:	4b44      	ldr	r3, [pc, #272]	@ (8002bdc <HAL_RCC_OscConfig+0x240>)
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d116      	bne.n	8002b04 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ad6:	4b41      	ldr	r3, [pc, #260]	@ (8002bdc <HAL_RCC_OscConfig+0x240>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0302 	and.w	r3, r3, #2
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d005      	beq.n	8002aee <HAL_RCC_OscConfig+0x152>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d001      	beq.n	8002aee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e1c7      	b.n	8002e7e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aee:	4b3b      	ldr	r3, [pc, #236]	@ (8002bdc <HAL_RCC_OscConfig+0x240>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	691b      	ldr	r3, [r3, #16]
 8002afa:	00db      	lsls	r3, r3, #3
 8002afc:	4937      	ldr	r1, [pc, #220]	@ (8002bdc <HAL_RCC_OscConfig+0x240>)
 8002afe:	4313      	orrs	r3, r2
 8002b00:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b02:	e03a      	b.n	8002b7a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d020      	beq.n	8002b4e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b0c:	4b34      	ldr	r3, [pc, #208]	@ (8002be0 <HAL_RCC_OscConfig+0x244>)
 8002b0e:	2201      	movs	r2, #1
 8002b10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b12:	f7fe fadf 	bl	80010d4 <HAL_GetTick>
 8002b16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b18:	e008      	b.n	8002b2c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b1a:	f7fe fadb 	bl	80010d4 <HAL_GetTick>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d901      	bls.n	8002b2c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	e1a8      	b.n	8002e7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b2c:	4b2b      	ldr	r3, [pc, #172]	@ (8002bdc <HAL_RCC_OscConfig+0x240>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0302 	and.w	r3, r3, #2
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d0f0      	beq.n	8002b1a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b38:	4b28      	ldr	r3, [pc, #160]	@ (8002bdc <HAL_RCC_OscConfig+0x240>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	691b      	ldr	r3, [r3, #16]
 8002b44:	00db      	lsls	r3, r3, #3
 8002b46:	4925      	ldr	r1, [pc, #148]	@ (8002bdc <HAL_RCC_OscConfig+0x240>)
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	600b      	str	r3, [r1, #0]
 8002b4c:	e015      	b.n	8002b7a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b4e:	4b24      	ldr	r3, [pc, #144]	@ (8002be0 <HAL_RCC_OscConfig+0x244>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b54:	f7fe fabe 	bl	80010d4 <HAL_GetTick>
 8002b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b5a:	e008      	b.n	8002b6e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b5c:	f7fe faba 	bl	80010d4 <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d901      	bls.n	8002b6e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e187      	b.n	8002e7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b6e:	4b1b      	ldr	r3, [pc, #108]	@ (8002bdc <HAL_RCC_OscConfig+0x240>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0302 	and.w	r3, r3, #2
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d1f0      	bne.n	8002b5c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0308 	and.w	r3, r3, #8
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d036      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	695b      	ldr	r3, [r3, #20]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d016      	beq.n	8002bbc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b8e:	4b15      	ldr	r3, [pc, #84]	@ (8002be4 <HAL_RCC_OscConfig+0x248>)
 8002b90:	2201      	movs	r2, #1
 8002b92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b94:	f7fe fa9e 	bl	80010d4 <HAL_GetTick>
 8002b98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b9a:	e008      	b.n	8002bae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b9c:	f7fe fa9a 	bl	80010d4 <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d901      	bls.n	8002bae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e167      	b.n	8002e7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bae:	4b0b      	ldr	r3, [pc, #44]	@ (8002bdc <HAL_RCC_OscConfig+0x240>)
 8002bb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bb2:	f003 0302 	and.w	r3, r3, #2
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d0f0      	beq.n	8002b9c <HAL_RCC_OscConfig+0x200>
 8002bba:	e01b      	b.n	8002bf4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bbc:	4b09      	ldr	r3, [pc, #36]	@ (8002be4 <HAL_RCC_OscConfig+0x248>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bc2:	f7fe fa87 	bl	80010d4 <HAL_GetTick>
 8002bc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bc8:	e00e      	b.n	8002be8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bca:	f7fe fa83 	bl	80010d4 <HAL_GetTick>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	d907      	bls.n	8002be8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	e150      	b.n	8002e7e <HAL_RCC_OscConfig+0x4e2>
 8002bdc:	40023800 	.word	0x40023800
 8002be0:	42470000 	.word	0x42470000
 8002be4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002be8:	4b88      	ldr	r3, [pc, #544]	@ (8002e0c <HAL_RCC_OscConfig+0x470>)
 8002bea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bec:	f003 0302 	and.w	r3, r3, #2
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d1ea      	bne.n	8002bca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0304 	and.w	r3, r3, #4
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	f000 8097 	beq.w	8002d30 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c02:	2300      	movs	r3, #0
 8002c04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c06:	4b81      	ldr	r3, [pc, #516]	@ (8002e0c <HAL_RCC_OscConfig+0x470>)
 8002c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d10f      	bne.n	8002c32 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c12:	2300      	movs	r3, #0
 8002c14:	60bb      	str	r3, [r7, #8]
 8002c16:	4b7d      	ldr	r3, [pc, #500]	@ (8002e0c <HAL_RCC_OscConfig+0x470>)
 8002c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c1a:	4a7c      	ldr	r2, [pc, #496]	@ (8002e0c <HAL_RCC_OscConfig+0x470>)
 8002c1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c20:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c22:	4b7a      	ldr	r3, [pc, #488]	@ (8002e0c <HAL_RCC_OscConfig+0x470>)
 8002c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c2a:	60bb      	str	r3, [r7, #8]
 8002c2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c32:	4b77      	ldr	r3, [pc, #476]	@ (8002e10 <HAL_RCC_OscConfig+0x474>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d118      	bne.n	8002c70 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c3e:	4b74      	ldr	r3, [pc, #464]	@ (8002e10 <HAL_RCC_OscConfig+0x474>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a73      	ldr	r2, [pc, #460]	@ (8002e10 <HAL_RCC_OscConfig+0x474>)
 8002c44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c4a:	f7fe fa43 	bl	80010d4 <HAL_GetTick>
 8002c4e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c50:	e008      	b.n	8002c64 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c52:	f7fe fa3f 	bl	80010d4 <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d901      	bls.n	8002c64 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002c60:	2303      	movs	r3, #3
 8002c62:	e10c      	b.n	8002e7e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c64:	4b6a      	ldr	r3, [pc, #424]	@ (8002e10 <HAL_RCC_OscConfig+0x474>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d0f0      	beq.n	8002c52 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d106      	bne.n	8002c86 <HAL_RCC_OscConfig+0x2ea>
 8002c78:	4b64      	ldr	r3, [pc, #400]	@ (8002e0c <HAL_RCC_OscConfig+0x470>)
 8002c7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c7c:	4a63      	ldr	r2, [pc, #396]	@ (8002e0c <HAL_RCC_OscConfig+0x470>)
 8002c7e:	f043 0301 	orr.w	r3, r3, #1
 8002c82:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c84:	e01c      	b.n	8002cc0 <HAL_RCC_OscConfig+0x324>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	2b05      	cmp	r3, #5
 8002c8c:	d10c      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x30c>
 8002c8e:	4b5f      	ldr	r3, [pc, #380]	@ (8002e0c <HAL_RCC_OscConfig+0x470>)
 8002c90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c92:	4a5e      	ldr	r2, [pc, #376]	@ (8002e0c <HAL_RCC_OscConfig+0x470>)
 8002c94:	f043 0304 	orr.w	r3, r3, #4
 8002c98:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c9a:	4b5c      	ldr	r3, [pc, #368]	@ (8002e0c <HAL_RCC_OscConfig+0x470>)
 8002c9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c9e:	4a5b      	ldr	r2, [pc, #364]	@ (8002e0c <HAL_RCC_OscConfig+0x470>)
 8002ca0:	f043 0301 	orr.w	r3, r3, #1
 8002ca4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ca6:	e00b      	b.n	8002cc0 <HAL_RCC_OscConfig+0x324>
 8002ca8:	4b58      	ldr	r3, [pc, #352]	@ (8002e0c <HAL_RCC_OscConfig+0x470>)
 8002caa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cac:	4a57      	ldr	r2, [pc, #348]	@ (8002e0c <HAL_RCC_OscConfig+0x470>)
 8002cae:	f023 0301 	bic.w	r3, r3, #1
 8002cb2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cb4:	4b55      	ldr	r3, [pc, #340]	@ (8002e0c <HAL_RCC_OscConfig+0x470>)
 8002cb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cb8:	4a54      	ldr	r2, [pc, #336]	@ (8002e0c <HAL_RCC_OscConfig+0x470>)
 8002cba:	f023 0304 	bic.w	r3, r3, #4
 8002cbe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d015      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cc8:	f7fe fa04 	bl	80010d4 <HAL_GetTick>
 8002ccc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cce:	e00a      	b.n	8002ce6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cd0:	f7fe fa00 	bl	80010d4 <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d901      	bls.n	8002ce6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e0cb      	b.n	8002e7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ce6:	4b49      	ldr	r3, [pc, #292]	@ (8002e0c <HAL_RCC_OscConfig+0x470>)
 8002ce8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cea:	f003 0302 	and.w	r3, r3, #2
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d0ee      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x334>
 8002cf2:	e014      	b.n	8002d1e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cf4:	f7fe f9ee 	bl	80010d4 <HAL_GetTick>
 8002cf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cfa:	e00a      	b.n	8002d12 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cfc:	f7fe f9ea 	bl	80010d4 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d901      	bls.n	8002d12 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e0b5      	b.n	8002e7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d12:	4b3e      	ldr	r3, [pc, #248]	@ (8002e0c <HAL_RCC_OscConfig+0x470>)
 8002d14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d16:	f003 0302 	and.w	r3, r3, #2
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d1ee      	bne.n	8002cfc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d1e:	7dfb      	ldrb	r3, [r7, #23]
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d105      	bne.n	8002d30 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d24:	4b39      	ldr	r3, [pc, #228]	@ (8002e0c <HAL_RCC_OscConfig+0x470>)
 8002d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d28:	4a38      	ldr	r2, [pc, #224]	@ (8002e0c <HAL_RCC_OscConfig+0x470>)
 8002d2a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d2e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	699b      	ldr	r3, [r3, #24]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	f000 80a1 	beq.w	8002e7c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d3a:	4b34      	ldr	r3, [pc, #208]	@ (8002e0c <HAL_RCC_OscConfig+0x470>)
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f003 030c 	and.w	r3, r3, #12
 8002d42:	2b08      	cmp	r3, #8
 8002d44:	d05c      	beq.n	8002e00 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	699b      	ldr	r3, [r3, #24]
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d141      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d4e:	4b31      	ldr	r3, [pc, #196]	@ (8002e14 <HAL_RCC_OscConfig+0x478>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d54:	f7fe f9be 	bl	80010d4 <HAL_GetTick>
 8002d58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d5a:	e008      	b.n	8002d6e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d5c:	f7fe f9ba 	bl	80010d4 <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d901      	bls.n	8002d6e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e087      	b.n	8002e7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d6e:	4b27      	ldr	r3, [pc, #156]	@ (8002e0c <HAL_RCC_OscConfig+0x470>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d1f0      	bne.n	8002d5c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	69da      	ldr	r2, [r3, #28]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a1b      	ldr	r3, [r3, #32]
 8002d82:	431a      	orrs	r2, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d88:	019b      	lsls	r3, r3, #6
 8002d8a:	431a      	orrs	r2, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d90:	085b      	lsrs	r3, r3, #1
 8002d92:	3b01      	subs	r3, #1
 8002d94:	041b      	lsls	r3, r3, #16
 8002d96:	431a      	orrs	r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d9c:	061b      	lsls	r3, r3, #24
 8002d9e:	491b      	ldr	r1, [pc, #108]	@ (8002e0c <HAL_RCC_OscConfig+0x470>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002da4:	4b1b      	ldr	r3, [pc, #108]	@ (8002e14 <HAL_RCC_OscConfig+0x478>)
 8002da6:	2201      	movs	r2, #1
 8002da8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002daa:	f7fe f993 	bl	80010d4 <HAL_GetTick>
 8002dae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002db0:	e008      	b.n	8002dc4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002db2:	f7fe f98f 	bl	80010d4 <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d901      	bls.n	8002dc4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e05c      	b.n	8002e7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dc4:	4b11      	ldr	r3, [pc, #68]	@ (8002e0c <HAL_RCC_OscConfig+0x470>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d0f0      	beq.n	8002db2 <HAL_RCC_OscConfig+0x416>
 8002dd0:	e054      	b.n	8002e7c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dd2:	4b10      	ldr	r3, [pc, #64]	@ (8002e14 <HAL_RCC_OscConfig+0x478>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dd8:	f7fe f97c 	bl	80010d4 <HAL_GetTick>
 8002ddc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dde:	e008      	b.n	8002df2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002de0:	f7fe f978 	bl	80010d4 <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d901      	bls.n	8002df2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e045      	b.n	8002e7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002df2:	4b06      	ldr	r3, [pc, #24]	@ (8002e0c <HAL_RCC_OscConfig+0x470>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d1f0      	bne.n	8002de0 <HAL_RCC_OscConfig+0x444>
 8002dfe:	e03d      	b.n	8002e7c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	699b      	ldr	r3, [r3, #24]
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d107      	bne.n	8002e18 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e038      	b.n	8002e7e <HAL_RCC_OscConfig+0x4e2>
 8002e0c:	40023800 	.word	0x40023800
 8002e10:	40007000 	.word	0x40007000
 8002e14:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e18:	4b1b      	ldr	r3, [pc, #108]	@ (8002e88 <HAL_RCC_OscConfig+0x4ec>)
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	699b      	ldr	r3, [r3, #24]
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d028      	beq.n	8002e78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d121      	bne.n	8002e78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d11a      	bne.n	8002e78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e42:	68fa      	ldr	r2, [r7, #12]
 8002e44:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002e48:	4013      	ands	r3, r2
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002e4e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d111      	bne.n	8002e78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e5e:	085b      	lsrs	r3, r3, #1
 8002e60:	3b01      	subs	r3, #1
 8002e62:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d107      	bne.n	8002e78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e72:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d001      	beq.n	8002e7c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e000      	b.n	8002e7e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002e7c:	2300      	movs	r3, #0
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3718      	adds	r7, #24
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	40023800 	.word	0x40023800

08002e8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d101      	bne.n	8002ea0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e0cc      	b.n	800303a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ea0:	4b68      	ldr	r3, [pc, #416]	@ (8003044 <HAL_RCC_ClockConfig+0x1b8>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0307 	and.w	r3, r3, #7
 8002ea8:	683a      	ldr	r2, [r7, #0]
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d90c      	bls.n	8002ec8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eae:	4b65      	ldr	r3, [pc, #404]	@ (8003044 <HAL_RCC_ClockConfig+0x1b8>)
 8002eb0:	683a      	ldr	r2, [r7, #0]
 8002eb2:	b2d2      	uxtb	r2, r2
 8002eb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eb6:	4b63      	ldr	r3, [pc, #396]	@ (8003044 <HAL_RCC_ClockConfig+0x1b8>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0307 	and.w	r3, r3, #7
 8002ebe:	683a      	ldr	r2, [r7, #0]
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d001      	beq.n	8002ec8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e0b8      	b.n	800303a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0302 	and.w	r3, r3, #2
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d020      	beq.n	8002f16 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0304 	and.w	r3, r3, #4
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d005      	beq.n	8002eec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ee0:	4b59      	ldr	r3, [pc, #356]	@ (8003048 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	4a58      	ldr	r2, [pc, #352]	@ (8003048 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002eea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0308 	and.w	r3, r3, #8
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d005      	beq.n	8002f04 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ef8:	4b53      	ldr	r3, [pc, #332]	@ (8003048 <HAL_RCC_ClockConfig+0x1bc>)
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	4a52      	ldr	r2, [pc, #328]	@ (8003048 <HAL_RCC_ClockConfig+0x1bc>)
 8002efe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002f02:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f04:	4b50      	ldr	r3, [pc, #320]	@ (8003048 <HAL_RCC_ClockConfig+0x1bc>)
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	494d      	ldr	r1, [pc, #308]	@ (8003048 <HAL_RCC_ClockConfig+0x1bc>)
 8002f12:	4313      	orrs	r3, r2
 8002f14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d044      	beq.n	8002fac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d107      	bne.n	8002f3a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f2a:	4b47      	ldr	r3, [pc, #284]	@ (8003048 <HAL_RCC_ClockConfig+0x1bc>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d119      	bne.n	8002f6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e07f      	b.n	800303a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d003      	beq.n	8002f4a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f46:	2b03      	cmp	r3, #3
 8002f48:	d107      	bne.n	8002f5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f4a:	4b3f      	ldr	r3, [pc, #252]	@ (8003048 <HAL_RCC_ClockConfig+0x1bc>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d109      	bne.n	8002f6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e06f      	b.n	800303a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f5a:	4b3b      	ldr	r3, [pc, #236]	@ (8003048 <HAL_RCC_ClockConfig+0x1bc>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0302 	and.w	r3, r3, #2
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d101      	bne.n	8002f6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e067      	b.n	800303a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f6a:	4b37      	ldr	r3, [pc, #220]	@ (8003048 <HAL_RCC_ClockConfig+0x1bc>)
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	f023 0203 	bic.w	r2, r3, #3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	4934      	ldr	r1, [pc, #208]	@ (8003048 <HAL_RCC_ClockConfig+0x1bc>)
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f7c:	f7fe f8aa 	bl	80010d4 <HAL_GetTick>
 8002f80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f82:	e00a      	b.n	8002f9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f84:	f7fe f8a6 	bl	80010d4 <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d901      	bls.n	8002f9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e04f      	b.n	800303a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f9a:	4b2b      	ldr	r3, [pc, #172]	@ (8003048 <HAL_RCC_ClockConfig+0x1bc>)
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	f003 020c 	and.w	r2, r3, #12
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d1eb      	bne.n	8002f84 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fac:	4b25      	ldr	r3, [pc, #148]	@ (8003044 <HAL_RCC_ClockConfig+0x1b8>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0307 	and.w	r3, r3, #7
 8002fb4:	683a      	ldr	r2, [r7, #0]
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d20c      	bcs.n	8002fd4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fba:	4b22      	ldr	r3, [pc, #136]	@ (8003044 <HAL_RCC_ClockConfig+0x1b8>)
 8002fbc:	683a      	ldr	r2, [r7, #0]
 8002fbe:	b2d2      	uxtb	r2, r2
 8002fc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fc2:	4b20      	ldr	r3, [pc, #128]	@ (8003044 <HAL_RCC_ClockConfig+0x1b8>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0307 	and.w	r3, r3, #7
 8002fca:	683a      	ldr	r2, [r7, #0]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d001      	beq.n	8002fd4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e032      	b.n	800303a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0304 	and.w	r3, r3, #4
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d008      	beq.n	8002ff2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fe0:	4b19      	ldr	r3, [pc, #100]	@ (8003048 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	4916      	ldr	r1, [pc, #88]	@ (8003048 <HAL_RCC_ClockConfig+0x1bc>)
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0308 	and.w	r3, r3, #8
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d009      	beq.n	8003012 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ffe:	4b12      	ldr	r3, [pc, #72]	@ (8003048 <HAL_RCC_ClockConfig+0x1bc>)
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	00db      	lsls	r3, r3, #3
 800300c:	490e      	ldr	r1, [pc, #56]	@ (8003048 <HAL_RCC_ClockConfig+0x1bc>)
 800300e:	4313      	orrs	r3, r2
 8003010:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003012:	f000 f821 	bl	8003058 <HAL_RCC_GetSysClockFreq>
 8003016:	4602      	mov	r2, r0
 8003018:	4b0b      	ldr	r3, [pc, #44]	@ (8003048 <HAL_RCC_ClockConfig+0x1bc>)
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	091b      	lsrs	r3, r3, #4
 800301e:	f003 030f 	and.w	r3, r3, #15
 8003022:	490a      	ldr	r1, [pc, #40]	@ (800304c <HAL_RCC_ClockConfig+0x1c0>)
 8003024:	5ccb      	ldrb	r3, [r1, r3]
 8003026:	fa22 f303 	lsr.w	r3, r2, r3
 800302a:	4a09      	ldr	r2, [pc, #36]	@ (8003050 <HAL_RCC_ClockConfig+0x1c4>)
 800302c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800302e:	4b09      	ldr	r3, [pc, #36]	@ (8003054 <HAL_RCC_ClockConfig+0x1c8>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4618      	mov	r0, r3
 8003034:	f7fe f80a 	bl	800104c <HAL_InitTick>

  return HAL_OK;
 8003038:	2300      	movs	r3, #0
}
 800303a:	4618      	mov	r0, r3
 800303c:	3710      	adds	r7, #16
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	40023c00 	.word	0x40023c00
 8003048:	40023800 	.word	0x40023800
 800304c:	08005238 	.word	0x08005238
 8003050:	20000000 	.word	0x20000000
 8003054:	20000004 	.word	0x20000004

08003058 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003058:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800305c:	b094      	sub	sp, #80	@ 0x50
 800305e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003060:	2300      	movs	r3, #0
 8003062:	647b      	str	r3, [r7, #68]	@ 0x44
 8003064:	2300      	movs	r3, #0
 8003066:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003068:	2300      	movs	r3, #0
 800306a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800306c:	2300      	movs	r3, #0
 800306e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003070:	4b79      	ldr	r3, [pc, #484]	@ (8003258 <HAL_RCC_GetSysClockFreq+0x200>)
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	f003 030c 	and.w	r3, r3, #12
 8003078:	2b08      	cmp	r3, #8
 800307a:	d00d      	beq.n	8003098 <HAL_RCC_GetSysClockFreq+0x40>
 800307c:	2b08      	cmp	r3, #8
 800307e:	f200 80e1 	bhi.w	8003244 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003082:	2b00      	cmp	r3, #0
 8003084:	d002      	beq.n	800308c <HAL_RCC_GetSysClockFreq+0x34>
 8003086:	2b04      	cmp	r3, #4
 8003088:	d003      	beq.n	8003092 <HAL_RCC_GetSysClockFreq+0x3a>
 800308a:	e0db      	b.n	8003244 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800308c:	4b73      	ldr	r3, [pc, #460]	@ (800325c <HAL_RCC_GetSysClockFreq+0x204>)
 800308e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003090:	e0db      	b.n	800324a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003092:	4b73      	ldr	r3, [pc, #460]	@ (8003260 <HAL_RCC_GetSysClockFreq+0x208>)
 8003094:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003096:	e0d8      	b.n	800324a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003098:	4b6f      	ldr	r3, [pc, #444]	@ (8003258 <HAL_RCC_GetSysClockFreq+0x200>)
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80030a0:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030a2:	4b6d      	ldr	r3, [pc, #436]	@ (8003258 <HAL_RCC_GetSysClockFreq+0x200>)
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d063      	beq.n	8003176 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030ae:	4b6a      	ldr	r3, [pc, #424]	@ (8003258 <HAL_RCC_GetSysClockFreq+0x200>)
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	099b      	lsrs	r3, r3, #6
 80030b4:	2200      	movs	r2, #0
 80030b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80030b8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80030ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80030c2:	2300      	movs	r3, #0
 80030c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80030c6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80030ca:	4622      	mov	r2, r4
 80030cc:	462b      	mov	r3, r5
 80030ce:	f04f 0000 	mov.w	r0, #0
 80030d2:	f04f 0100 	mov.w	r1, #0
 80030d6:	0159      	lsls	r1, r3, #5
 80030d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030dc:	0150      	lsls	r0, r2, #5
 80030de:	4602      	mov	r2, r0
 80030e0:	460b      	mov	r3, r1
 80030e2:	4621      	mov	r1, r4
 80030e4:	1a51      	subs	r1, r2, r1
 80030e6:	6139      	str	r1, [r7, #16]
 80030e8:	4629      	mov	r1, r5
 80030ea:	eb63 0301 	sbc.w	r3, r3, r1
 80030ee:	617b      	str	r3, [r7, #20]
 80030f0:	f04f 0200 	mov.w	r2, #0
 80030f4:	f04f 0300 	mov.w	r3, #0
 80030f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80030fc:	4659      	mov	r1, fp
 80030fe:	018b      	lsls	r3, r1, #6
 8003100:	4651      	mov	r1, sl
 8003102:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003106:	4651      	mov	r1, sl
 8003108:	018a      	lsls	r2, r1, #6
 800310a:	4651      	mov	r1, sl
 800310c:	ebb2 0801 	subs.w	r8, r2, r1
 8003110:	4659      	mov	r1, fp
 8003112:	eb63 0901 	sbc.w	r9, r3, r1
 8003116:	f04f 0200 	mov.w	r2, #0
 800311a:	f04f 0300 	mov.w	r3, #0
 800311e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003122:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003126:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800312a:	4690      	mov	r8, r2
 800312c:	4699      	mov	r9, r3
 800312e:	4623      	mov	r3, r4
 8003130:	eb18 0303 	adds.w	r3, r8, r3
 8003134:	60bb      	str	r3, [r7, #8]
 8003136:	462b      	mov	r3, r5
 8003138:	eb49 0303 	adc.w	r3, r9, r3
 800313c:	60fb      	str	r3, [r7, #12]
 800313e:	f04f 0200 	mov.w	r2, #0
 8003142:	f04f 0300 	mov.w	r3, #0
 8003146:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800314a:	4629      	mov	r1, r5
 800314c:	024b      	lsls	r3, r1, #9
 800314e:	4621      	mov	r1, r4
 8003150:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003154:	4621      	mov	r1, r4
 8003156:	024a      	lsls	r2, r1, #9
 8003158:	4610      	mov	r0, r2
 800315a:	4619      	mov	r1, r3
 800315c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800315e:	2200      	movs	r2, #0
 8003160:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003162:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003164:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003168:	f7fd f82e 	bl	80001c8 <__aeabi_uldivmod>
 800316c:	4602      	mov	r2, r0
 800316e:	460b      	mov	r3, r1
 8003170:	4613      	mov	r3, r2
 8003172:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003174:	e058      	b.n	8003228 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003176:	4b38      	ldr	r3, [pc, #224]	@ (8003258 <HAL_RCC_GetSysClockFreq+0x200>)
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	099b      	lsrs	r3, r3, #6
 800317c:	2200      	movs	r2, #0
 800317e:	4618      	mov	r0, r3
 8003180:	4611      	mov	r1, r2
 8003182:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003186:	623b      	str	r3, [r7, #32]
 8003188:	2300      	movs	r3, #0
 800318a:	627b      	str	r3, [r7, #36]	@ 0x24
 800318c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003190:	4642      	mov	r2, r8
 8003192:	464b      	mov	r3, r9
 8003194:	f04f 0000 	mov.w	r0, #0
 8003198:	f04f 0100 	mov.w	r1, #0
 800319c:	0159      	lsls	r1, r3, #5
 800319e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031a2:	0150      	lsls	r0, r2, #5
 80031a4:	4602      	mov	r2, r0
 80031a6:	460b      	mov	r3, r1
 80031a8:	4641      	mov	r1, r8
 80031aa:	ebb2 0a01 	subs.w	sl, r2, r1
 80031ae:	4649      	mov	r1, r9
 80031b0:	eb63 0b01 	sbc.w	fp, r3, r1
 80031b4:	f04f 0200 	mov.w	r2, #0
 80031b8:	f04f 0300 	mov.w	r3, #0
 80031bc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80031c0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80031c4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80031c8:	ebb2 040a 	subs.w	r4, r2, sl
 80031cc:	eb63 050b 	sbc.w	r5, r3, fp
 80031d0:	f04f 0200 	mov.w	r2, #0
 80031d4:	f04f 0300 	mov.w	r3, #0
 80031d8:	00eb      	lsls	r3, r5, #3
 80031da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031de:	00e2      	lsls	r2, r4, #3
 80031e0:	4614      	mov	r4, r2
 80031e2:	461d      	mov	r5, r3
 80031e4:	4643      	mov	r3, r8
 80031e6:	18e3      	adds	r3, r4, r3
 80031e8:	603b      	str	r3, [r7, #0]
 80031ea:	464b      	mov	r3, r9
 80031ec:	eb45 0303 	adc.w	r3, r5, r3
 80031f0:	607b      	str	r3, [r7, #4]
 80031f2:	f04f 0200 	mov.w	r2, #0
 80031f6:	f04f 0300 	mov.w	r3, #0
 80031fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80031fe:	4629      	mov	r1, r5
 8003200:	028b      	lsls	r3, r1, #10
 8003202:	4621      	mov	r1, r4
 8003204:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003208:	4621      	mov	r1, r4
 800320a:	028a      	lsls	r2, r1, #10
 800320c:	4610      	mov	r0, r2
 800320e:	4619      	mov	r1, r3
 8003210:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003212:	2200      	movs	r2, #0
 8003214:	61bb      	str	r3, [r7, #24]
 8003216:	61fa      	str	r2, [r7, #28]
 8003218:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800321c:	f7fc ffd4 	bl	80001c8 <__aeabi_uldivmod>
 8003220:	4602      	mov	r2, r0
 8003222:	460b      	mov	r3, r1
 8003224:	4613      	mov	r3, r2
 8003226:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003228:	4b0b      	ldr	r3, [pc, #44]	@ (8003258 <HAL_RCC_GetSysClockFreq+0x200>)
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	0c1b      	lsrs	r3, r3, #16
 800322e:	f003 0303 	and.w	r3, r3, #3
 8003232:	3301      	adds	r3, #1
 8003234:	005b      	lsls	r3, r3, #1
 8003236:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003238:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800323a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800323c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003240:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003242:	e002      	b.n	800324a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003244:	4b05      	ldr	r3, [pc, #20]	@ (800325c <HAL_RCC_GetSysClockFreq+0x204>)
 8003246:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003248:	bf00      	nop
    }
  }
  return sysclockfreq;
 800324a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800324c:	4618      	mov	r0, r3
 800324e:	3750      	adds	r7, #80	@ 0x50
 8003250:	46bd      	mov	sp, r7
 8003252:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003256:	bf00      	nop
 8003258:	40023800 	.word	0x40023800
 800325c:	00f42400 	.word	0x00f42400
 8003260:	007a1200 	.word	0x007a1200

08003264 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003264:	b480      	push	{r7}
 8003266:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003268:	4b03      	ldr	r3, [pc, #12]	@ (8003278 <HAL_RCC_GetHCLKFreq+0x14>)
 800326a:	681b      	ldr	r3, [r3, #0]
}
 800326c:	4618      	mov	r0, r3
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr
 8003276:	bf00      	nop
 8003278:	20000000 	.word	0x20000000

0800327c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003280:	f7ff fff0 	bl	8003264 <HAL_RCC_GetHCLKFreq>
 8003284:	4602      	mov	r2, r0
 8003286:	4b05      	ldr	r3, [pc, #20]	@ (800329c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	0a9b      	lsrs	r3, r3, #10
 800328c:	f003 0307 	and.w	r3, r3, #7
 8003290:	4903      	ldr	r1, [pc, #12]	@ (80032a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003292:	5ccb      	ldrb	r3, [r1, r3]
 8003294:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003298:	4618      	mov	r0, r3
 800329a:	bd80      	pop	{r7, pc}
 800329c:	40023800 	.word	0x40023800
 80032a0:	08005248 	.word	0x08005248

080032a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80032a8:	f7ff ffdc 	bl	8003264 <HAL_RCC_GetHCLKFreq>
 80032ac:	4602      	mov	r2, r0
 80032ae:	4b05      	ldr	r3, [pc, #20]	@ (80032c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	0b5b      	lsrs	r3, r3, #13
 80032b4:	f003 0307 	and.w	r3, r3, #7
 80032b8:	4903      	ldr	r1, [pc, #12]	@ (80032c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032ba:	5ccb      	ldrb	r3, [r1, r3]
 80032bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	40023800 	.word	0x40023800
 80032c8:	08005248 	.word	0x08005248

080032cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d101      	bne.n	80032de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e041      	b.n	8003362 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d106      	bne.n	80032f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f7fd fc96 	bl	8000c24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2202      	movs	r2, #2
 80032fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	3304      	adds	r3, #4
 8003308:	4619      	mov	r1, r3
 800330a:	4610      	mov	r0, r2
 800330c:	f000 fad8 	bl	80038c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2201      	movs	r2, #1
 8003314:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2201      	movs	r2, #1
 800331c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2201      	movs	r2, #1
 8003324:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2201      	movs	r2, #1
 800332c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2201      	movs	r2, #1
 8003334:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2201      	movs	r2, #1
 800333c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2201      	movs	r2, #1
 8003344:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2201      	movs	r2, #1
 800334c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003360:	2300      	movs	r3, #0
}
 8003362:	4618      	mov	r0, r3
 8003364:	3708      	adds	r7, #8
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}

0800336a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800336a:	b580      	push	{r7, lr}
 800336c:	b082      	sub	sp, #8
 800336e:	af00      	add	r7, sp, #0
 8003370:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d101      	bne.n	800337c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e041      	b.n	8003400 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003382:	b2db      	uxtb	r3, r3
 8003384:	2b00      	cmp	r3, #0
 8003386:	d106      	bne.n	8003396 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f000 f839 	bl	8003408 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2202      	movs	r2, #2
 800339a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	3304      	adds	r3, #4
 80033a6:	4619      	mov	r1, r3
 80033a8:	4610      	mov	r0, r2
 80033aa:	f000 fa89 	bl	80038c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2201      	movs	r2, #1
 80033b2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2201      	movs	r2, #1
 80033ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2201      	movs	r2, #1
 80033c2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2201      	movs	r2, #1
 80033ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2201      	movs	r2, #1
 80033d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2201      	movs	r2, #1
 80033da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2201      	movs	r2, #1
 80033e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2201      	movs	r2, #1
 80033ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2201      	movs	r2, #1
 80033f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2201      	movs	r2, #1
 80033fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80033fe:	2300      	movs	r3, #0
}
 8003400:	4618      	mov	r0, r3
 8003402:	3708      	adds	r7, #8
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}

08003408 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003410:	bf00      	nop
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b084      	sub	sp, #16
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d109      	bne.n	8003440 <HAL_TIM_PWM_Start+0x24>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003432:	b2db      	uxtb	r3, r3
 8003434:	2b01      	cmp	r3, #1
 8003436:	bf14      	ite	ne
 8003438:	2301      	movne	r3, #1
 800343a:	2300      	moveq	r3, #0
 800343c:	b2db      	uxtb	r3, r3
 800343e:	e022      	b.n	8003486 <HAL_TIM_PWM_Start+0x6a>
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	2b04      	cmp	r3, #4
 8003444:	d109      	bne.n	800345a <HAL_TIM_PWM_Start+0x3e>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800344c:	b2db      	uxtb	r3, r3
 800344e:	2b01      	cmp	r3, #1
 8003450:	bf14      	ite	ne
 8003452:	2301      	movne	r3, #1
 8003454:	2300      	moveq	r3, #0
 8003456:	b2db      	uxtb	r3, r3
 8003458:	e015      	b.n	8003486 <HAL_TIM_PWM_Start+0x6a>
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	2b08      	cmp	r3, #8
 800345e:	d109      	bne.n	8003474 <HAL_TIM_PWM_Start+0x58>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003466:	b2db      	uxtb	r3, r3
 8003468:	2b01      	cmp	r3, #1
 800346a:	bf14      	ite	ne
 800346c:	2301      	movne	r3, #1
 800346e:	2300      	moveq	r3, #0
 8003470:	b2db      	uxtb	r3, r3
 8003472:	e008      	b.n	8003486 <HAL_TIM_PWM_Start+0x6a>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800347a:	b2db      	uxtb	r3, r3
 800347c:	2b01      	cmp	r3, #1
 800347e:	bf14      	ite	ne
 8003480:	2301      	movne	r3, #1
 8003482:	2300      	moveq	r3, #0
 8003484:	b2db      	uxtb	r3, r3
 8003486:	2b00      	cmp	r3, #0
 8003488:	d001      	beq.n	800348e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e07c      	b.n	8003588 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d104      	bne.n	800349e <HAL_TIM_PWM_Start+0x82>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2202      	movs	r2, #2
 8003498:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800349c:	e013      	b.n	80034c6 <HAL_TIM_PWM_Start+0xaa>
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	2b04      	cmp	r3, #4
 80034a2:	d104      	bne.n	80034ae <HAL_TIM_PWM_Start+0x92>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2202      	movs	r2, #2
 80034a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80034ac:	e00b      	b.n	80034c6 <HAL_TIM_PWM_Start+0xaa>
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	2b08      	cmp	r3, #8
 80034b2:	d104      	bne.n	80034be <HAL_TIM_PWM_Start+0xa2>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2202      	movs	r2, #2
 80034b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80034bc:	e003      	b.n	80034c6 <HAL_TIM_PWM_Start+0xaa>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2202      	movs	r2, #2
 80034c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	2201      	movs	r2, #1
 80034cc:	6839      	ldr	r1, [r7, #0]
 80034ce:	4618      	mov	r0, r3
 80034d0:	f000 fcec 	bl	8003eac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a2d      	ldr	r2, [pc, #180]	@ (8003590 <HAL_TIM_PWM_Start+0x174>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d004      	beq.n	80034e8 <HAL_TIM_PWM_Start+0xcc>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a2c      	ldr	r2, [pc, #176]	@ (8003594 <HAL_TIM_PWM_Start+0x178>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d101      	bne.n	80034ec <HAL_TIM_PWM_Start+0xd0>
 80034e8:	2301      	movs	r3, #1
 80034ea:	e000      	b.n	80034ee <HAL_TIM_PWM_Start+0xd2>
 80034ec:	2300      	movs	r3, #0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d007      	beq.n	8003502 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003500:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a22      	ldr	r2, [pc, #136]	@ (8003590 <HAL_TIM_PWM_Start+0x174>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d022      	beq.n	8003552 <HAL_TIM_PWM_Start+0x136>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003514:	d01d      	beq.n	8003552 <HAL_TIM_PWM_Start+0x136>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a1f      	ldr	r2, [pc, #124]	@ (8003598 <HAL_TIM_PWM_Start+0x17c>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d018      	beq.n	8003552 <HAL_TIM_PWM_Start+0x136>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a1d      	ldr	r2, [pc, #116]	@ (800359c <HAL_TIM_PWM_Start+0x180>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d013      	beq.n	8003552 <HAL_TIM_PWM_Start+0x136>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a1c      	ldr	r2, [pc, #112]	@ (80035a0 <HAL_TIM_PWM_Start+0x184>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d00e      	beq.n	8003552 <HAL_TIM_PWM_Start+0x136>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a16      	ldr	r2, [pc, #88]	@ (8003594 <HAL_TIM_PWM_Start+0x178>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d009      	beq.n	8003552 <HAL_TIM_PWM_Start+0x136>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a18      	ldr	r2, [pc, #96]	@ (80035a4 <HAL_TIM_PWM_Start+0x188>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d004      	beq.n	8003552 <HAL_TIM_PWM_Start+0x136>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a16      	ldr	r2, [pc, #88]	@ (80035a8 <HAL_TIM_PWM_Start+0x18c>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d111      	bne.n	8003576 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	f003 0307 	and.w	r3, r3, #7
 800355c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2b06      	cmp	r3, #6
 8003562:	d010      	beq.n	8003586 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f042 0201 	orr.w	r2, r2, #1
 8003572:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003574:	e007      	b.n	8003586 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f042 0201 	orr.w	r2, r2, #1
 8003584:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003586:	2300      	movs	r3, #0
}
 8003588:	4618      	mov	r0, r3
 800358a:	3710      	adds	r7, #16
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}
 8003590:	40010000 	.word	0x40010000
 8003594:	40010400 	.word	0x40010400
 8003598:	40000400 	.word	0x40000400
 800359c:	40000800 	.word	0x40000800
 80035a0:	40000c00 	.word	0x40000c00
 80035a4:	40014000 	.word	0x40014000
 80035a8:	40001800 	.word	0x40001800

080035ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b086      	sub	sp, #24
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	60b9      	str	r1, [r7, #8]
 80035b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035b8:	2300      	movs	r3, #0
 80035ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d101      	bne.n	80035ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 80035c6:	2302      	movs	r3, #2
 80035c8:	e0ae      	b.n	8003728 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2201      	movs	r2, #1
 80035ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2b0c      	cmp	r3, #12
 80035d6:	f200 809f 	bhi.w	8003718 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80035da:	a201      	add	r2, pc, #4	@ (adr r2, 80035e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80035dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035e0:	08003615 	.word	0x08003615
 80035e4:	08003719 	.word	0x08003719
 80035e8:	08003719 	.word	0x08003719
 80035ec:	08003719 	.word	0x08003719
 80035f0:	08003655 	.word	0x08003655
 80035f4:	08003719 	.word	0x08003719
 80035f8:	08003719 	.word	0x08003719
 80035fc:	08003719 	.word	0x08003719
 8003600:	08003697 	.word	0x08003697
 8003604:	08003719 	.word	0x08003719
 8003608:	08003719 	.word	0x08003719
 800360c:	08003719 	.word	0x08003719
 8003610:	080036d7 	.word	0x080036d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	68b9      	ldr	r1, [r7, #8]
 800361a:	4618      	mov	r0, r3
 800361c:	f000 f9fc 	bl	8003a18 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	699a      	ldr	r2, [r3, #24]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f042 0208 	orr.w	r2, r2, #8
 800362e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	699a      	ldr	r2, [r3, #24]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f022 0204 	bic.w	r2, r2, #4
 800363e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	6999      	ldr	r1, [r3, #24]
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	691a      	ldr	r2, [r3, #16]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	430a      	orrs	r2, r1
 8003650:	619a      	str	r2, [r3, #24]
      break;
 8003652:	e064      	b.n	800371e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	68b9      	ldr	r1, [r7, #8]
 800365a:	4618      	mov	r0, r3
 800365c:	f000 fa4c 	bl	8003af8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	699a      	ldr	r2, [r3, #24]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800366e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	699a      	ldr	r2, [r3, #24]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800367e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	6999      	ldr	r1, [r3, #24]
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	021a      	lsls	r2, r3, #8
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	430a      	orrs	r2, r1
 8003692:	619a      	str	r2, [r3, #24]
      break;
 8003694:	e043      	b.n	800371e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	68b9      	ldr	r1, [r7, #8]
 800369c:	4618      	mov	r0, r3
 800369e:	f000 faa1 	bl	8003be4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	69da      	ldr	r2, [r3, #28]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f042 0208 	orr.w	r2, r2, #8
 80036b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	69da      	ldr	r2, [r3, #28]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f022 0204 	bic.w	r2, r2, #4
 80036c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	69d9      	ldr	r1, [r3, #28]
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	691a      	ldr	r2, [r3, #16]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	430a      	orrs	r2, r1
 80036d2:	61da      	str	r2, [r3, #28]
      break;
 80036d4:	e023      	b.n	800371e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	68b9      	ldr	r1, [r7, #8]
 80036dc:	4618      	mov	r0, r3
 80036de:	f000 faf5 	bl	8003ccc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	69da      	ldr	r2, [r3, #28]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80036f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	69da      	ldr	r2, [r3, #28]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003700:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	69d9      	ldr	r1, [r3, #28]
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	691b      	ldr	r3, [r3, #16]
 800370c:	021a      	lsls	r2, r3, #8
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	430a      	orrs	r2, r1
 8003714:	61da      	str	r2, [r3, #28]
      break;
 8003716:	e002      	b.n	800371e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	75fb      	strb	r3, [r7, #23]
      break;
 800371c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2200      	movs	r2, #0
 8003722:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003726:	7dfb      	ldrb	r3, [r7, #23]
}
 8003728:	4618      	mov	r0, r3
 800372a:	3718      	adds	r7, #24
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}

08003730 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800373a:	2300      	movs	r3, #0
 800373c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003744:	2b01      	cmp	r3, #1
 8003746:	d101      	bne.n	800374c <HAL_TIM_ConfigClockSource+0x1c>
 8003748:	2302      	movs	r3, #2
 800374a:	e0b4      	b.n	80038b6 <HAL_TIM_ConfigClockSource+0x186>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2202      	movs	r2, #2
 8003758:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800376a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003772:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	68ba      	ldr	r2, [r7, #8]
 800377a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003784:	d03e      	beq.n	8003804 <HAL_TIM_ConfigClockSource+0xd4>
 8003786:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800378a:	f200 8087 	bhi.w	800389c <HAL_TIM_ConfigClockSource+0x16c>
 800378e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003792:	f000 8086 	beq.w	80038a2 <HAL_TIM_ConfigClockSource+0x172>
 8003796:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800379a:	d87f      	bhi.n	800389c <HAL_TIM_ConfigClockSource+0x16c>
 800379c:	2b70      	cmp	r3, #112	@ 0x70
 800379e:	d01a      	beq.n	80037d6 <HAL_TIM_ConfigClockSource+0xa6>
 80037a0:	2b70      	cmp	r3, #112	@ 0x70
 80037a2:	d87b      	bhi.n	800389c <HAL_TIM_ConfigClockSource+0x16c>
 80037a4:	2b60      	cmp	r3, #96	@ 0x60
 80037a6:	d050      	beq.n	800384a <HAL_TIM_ConfigClockSource+0x11a>
 80037a8:	2b60      	cmp	r3, #96	@ 0x60
 80037aa:	d877      	bhi.n	800389c <HAL_TIM_ConfigClockSource+0x16c>
 80037ac:	2b50      	cmp	r3, #80	@ 0x50
 80037ae:	d03c      	beq.n	800382a <HAL_TIM_ConfigClockSource+0xfa>
 80037b0:	2b50      	cmp	r3, #80	@ 0x50
 80037b2:	d873      	bhi.n	800389c <HAL_TIM_ConfigClockSource+0x16c>
 80037b4:	2b40      	cmp	r3, #64	@ 0x40
 80037b6:	d058      	beq.n	800386a <HAL_TIM_ConfigClockSource+0x13a>
 80037b8:	2b40      	cmp	r3, #64	@ 0x40
 80037ba:	d86f      	bhi.n	800389c <HAL_TIM_ConfigClockSource+0x16c>
 80037bc:	2b30      	cmp	r3, #48	@ 0x30
 80037be:	d064      	beq.n	800388a <HAL_TIM_ConfigClockSource+0x15a>
 80037c0:	2b30      	cmp	r3, #48	@ 0x30
 80037c2:	d86b      	bhi.n	800389c <HAL_TIM_ConfigClockSource+0x16c>
 80037c4:	2b20      	cmp	r3, #32
 80037c6:	d060      	beq.n	800388a <HAL_TIM_ConfigClockSource+0x15a>
 80037c8:	2b20      	cmp	r3, #32
 80037ca:	d867      	bhi.n	800389c <HAL_TIM_ConfigClockSource+0x16c>
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d05c      	beq.n	800388a <HAL_TIM_ConfigClockSource+0x15a>
 80037d0:	2b10      	cmp	r3, #16
 80037d2:	d05a      	beq.n	800388a <HAL_TIM_ConfigClockSource+0x15a>
 80037d4:	e062      	b.n	800389c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80037e6:	f000 fb41 	bl	8003e6c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80037f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	68ba      	ldr	r2, [r7, #8]
 8003800:	609a      	str	r2, [r3, #8]
      break;
 8003802:	e04f      	b.n	80038a4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003814:	f000 fb2a 	bl	8003e6c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	689a      	ldr	r2, [r3, #8]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003826:	609a      	str	r2, [r3, #8]
      break;
 8003828:	e03c      	b.n	80038a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003836:	461a      	mov	r2, r3
 8003838:	f000 fa9e 	bl	8003d78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2150      	movs	r1, #80	@ 0x50
 8003842:	4618      	mov	r0, r3
 8003844:	f000 faf7 	bl	8003e36 <TIM_ITRx_SetConfig>
      break;
 8003848:	e02c      	b.n	80038a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003856:	461a      	mov	r2, r3
 8003858:	f000 fabd 	bl	8003dd6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2160      	movs	r1, #96	@ 0x60
 8003862:	4618      	mov	r0, r3
 8003864:	f000 fae7 	bl	8003e36 <TIM_ITRx_SetConfig>
      break;
 8003868:	e01c      	b.n	80038a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003876:	461a      	mov	r2, r3
 8003878:	f000 fa7e 	bl	8003d78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2140      	movs	r1, #64	@ 0x40
 8003882:	4618      	mov	r0, r3
 8003884:	f000 fad7 	bl	8003e36 <TIM_ITRx_SetConfig>
      break;
 8003888:	e00c      	b.n	80038a4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4619      	mov	r1, r3
 8003894:	4610      	mov	r0, r2
 8003896:	f000 face 	bl	8003e36 <TIM_ITRx_SetConfig>
      break;
 800389a:	e003      	b.n	80038a4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	73fb      	strb	r3, [r7, #15]
      break;
 80038a0:	e000      	b.n	80038a4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80038a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80038b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3710      	adds	r7, #16
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
	...

080038c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b085      	sub	sp, #20
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	4a46      	ldr	r2, [pc, #280]	@ (80039ec <TIM_Base_SetConfig+0x12c>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d013      	beq.n	8003900 <TIM_Base_SetConfig+0x40>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038de:	d00f      	beq.n	8003900 <TIM_Base_SetConfig+0x40>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	4a43      	ldr	r2, [pc, #268]	@ (80039f0 <TIM_Base_SetConfig+0x130>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d00b      	beq.n	8003900 <TIM_Base_SetConfig+0x40>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	4a42      	ldr	r2, [pc, #264]	@ (80039f4 <TIM_Base_SetConfig+0x134>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d007      	beq.n	8003900 <TIM_Base_SetConfig+0x40>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	4a41      	ldr	r2, [pc, #260]	@ (80039f8 <TIM_Base_SetConfig+0x138>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d003      	beq.n	8003900 <TIM_Base_SetConfig+0x40>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	4a40      	ldr	r2, [pc, #256]	@ (80039fc <TIM_Base_SetConfig+0x13c>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d108      	bne.n	8003912 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003906:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	68fa      	ldr	r2, [r7, #12]
 800390e:	4313      	orrs	r3, r2
 8003910:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a35      	ldr	r2, [pc, #212]	@ (80039ec <TIM_Base_SetConfig+0x12c>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d02b      	beq.n	8003972 <TIM_Base_SetConfig+0xb2>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003920:	d027      	beq.n	8003972 <TIM_Base_SetConfig+0xb2>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a32      	ldr	r2, [pc, #200]	@ (80039f0 <TIM_Base_SetConfig+0x130>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d023      	beq.n	8003972 <TIM_Base_SetConfig+0xb2>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a31      	ldr	r2, [pc, #196]	@ (80039f4 <TIM_Base_SetConfig+0x134>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d01f      	beq.n	8003972 <TIM_Base_SetConfig+0xb2>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a30      	ldr	r2, [pc, #192]	@ (80039f8 <TIM_Base_SetConfig+0x138>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d01b      	beq.n	8003972 <TIM_Base_SetConfig+0xb2>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a2f      	ldr	r2, [pc, #188]	@ (80039fc <TIM_Base_SetConfig+0x13c>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d017      	beq.n	8003972 <TIM_Base_SetConfig+0xb2>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a2e      	ldr	r2, [pc, #184]	@ (8003a00 <TIM_Base_SetConfig+0x140>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d013      	beq.n	8003972 <TIM_Base_SetConfig+0xb2>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4a2d      	ldr	r2, [pc, #180]	@ (8003a04 <TIM_Base_SetConfig+0x144>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d00f      	beq.n	8003972 <TIM_Base_SetConfig+0xb2>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4a2c      	ldr	r2, [pc, #176]	@ (8003a08 <TIM_Base_SetConfig+0x148>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d00b      	beq.n	8003972 <TIM_Base_SetConfig+0xb2>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4a2b      	ldr	r2, [pc, #172]	@ (8003a0c <TIM_Base_SetConfig+0x14c>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d007      	beq.n	8003972 <TIM_Base_SetConfig+0xb2>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4a2a      	ldr	r2, [pc, #168]	@ (8003a10 <TIM_Base_SetConfig+0x150>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d003      	beq.n	8003972 <TIM_Base_SetConfig+0xb2>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4a29      	ldr	r2, [pc, #164]	@ (8003a14 <TIM_Base_SetConfig+0x154>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d108      	bne.n	8003984 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003978:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	68fa      	ldr	r2, [r7, #12]
 8003980:	4313      	orrs	r3, r2
 8003982:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	695b      	ldr	r3, [r3, #20]
 800398e:	4313      	orrs	r3, r2
 8003990:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	68fa      	ldr	r2, [r7, #12]
 8003996:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	689a      	ldr	r2, [r3, #8]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	4a10      	ldr	r2, [pc, #64]	@ (80039ec <TIM_Base_SetConfig+0x12c>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d003      	beq.n	80039b8 <TIM_Base_SetConfig+0xf8>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	4a12      	ldr	r2, [pc, #72]	@ (80039fc <TIM_Base_SetConfig+0x13c>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d103      	bne.n	80039c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	691a      	ldr	r2, [r3, #16]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	691b      	ldr	r3, [r3, #16]
 80039ca:	f003 0301 	and.w	r3, r3, #1
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d105      	bne.n	80039de <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	691b      	ldr	r3, [r3, #16]
 80039d6:	f023 0201 	bic.w	r2, r3, #1
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	611a      	str	r2, [r3, #16]
  }
}
 80039de:	bf00      	nop
 80039e0:	3714      	adds	r7, #20
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop
 80039ec:	40010000 	.word	0x40010000
 80039f0:	40000400 	.word	0x40000400
 80039f4:	40000800 	.word	0x40000800
 80039f8:	40000c00 	.word	0x40000c00
 80039fc:	40010400 	.word	0x40010400
 8003a00:	40014000 	.word	0x40014000
 8003a04:	40014400 	.word	0x40014400
 8003a08:	40014800 	.word	0x40014800
 8003a0c:	40001800 	.word	0x40001800
 8003a10:	40001c00 	.word	0x40001c00
 8003a14:	40002000 	.word	0x40002000

08003a18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b087      	sub	sp, #28
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a1b      	ldr	r3, [r3, #32]
 8003a26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6a1b      	ldr	r3, [r3, #32]
 8003a2c:	f023 0201 	bic.w	r2, r3, #1
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	699b      	ldr	r3, [r3, #24]
 8003a3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f023 0303 	bic.w	r3, r3, #3
 8003a4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	68fa      	ldr	r2, [r7, #12]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	f023 0302 	bic.w	r3, r3, #2
 8003a60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	697a      	ldr	r2, [r7, #20]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	4a20      	ldr	r2, [pc, #128]	@ (8003af0 <TIM_OC1_SetConfig+0xd8>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d003      	beq.n	8003a7c <TIM_OC1_SetConfig+0x64>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	4a1f      	ldr	r2, [pc, #124]	@ (8003af4 <TIM_OC1_SetConfig+0xdc>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d10c      	bne.n	8003a96 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	f023 0308 	bic.w	r3, r3, #8
 8003a82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	697a      	ldr	r2, [r7, #20]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	f023 0304 	bic.w	r3, r3, #4
 8003a94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a15      	ldr	r2, [pc, #84]	@ (8003af0 <TIM_OC1_SetConfig+0xd8>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d003      	beq.n	8003aa6 <TIM_OC1_SetConfig+0x8e>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a14      	ldr	r2, [pc, #80]	@ (8003af4 <TIM_OC1_SetConfig+0xdc>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d111      	bne.n	8003aca <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003aac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003ab4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	695b      	ldr	r3, [r3, #20]
 8003aba:	693a      	ldr	r2, [r7, #16]
 8003abc:	4313      	orrs	r3, r2
 8003abe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	699b      	ldr	r3, [r3, #24]
 8003ac4:	693a      	ldr	r2, [r7, #16]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	693a      	ldr	r2, [r7, #16]
 8003ace:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	68fa      	ldr	r2, [r7, #12]
 8003ad4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	685a      	ldr	r2, [r3, #4]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	697a      	ldr	r2, [r7, #20]
 8003ae2:	621a      	str	r2, [r3, #32]
}
 8003ae4:	bf00      	nop
 8003ae6:	371c      	adds	r7, #28
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr
 8003af0:	40010000 	.word	0x40010000
 8003af4:	40010400 	.word	0x40010400

08003af8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b087      	sub	sp, #28
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a1b      	ldr	r3, [r3, #32]
 8003b06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6a1b      	ldr	r3, [r3, #32]
 8003b0c:	f023 0210 	bic.w	r2, r3, #16
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	699b      	ldr	r3, [r3, #24]
 8003b1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	021b      	lsls	r3, r3, #8
 8003b36:	68fa      	ldr	r2, [r7, #12]
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	f023 0320 	bic.w	r3, r3, #32
 8003b42:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	011b      	lsls	r3, r3, #4
 8003b4a:	697a      	ldr	r2, [r7, #20]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	4a22      	ldr	r2, [pc, #136]	@ (8003bdc <TIM_OC2_SetConfig+0xe4>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d003      	beq.n	8003b60 <TIM_OC2_SetConfig+0x68>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	4a21      	ldr	r2, [pc, #132]	@ (8003be0 <TIM_OC2_SetConfig+0xe8>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d10d      	bne.n	8003b7c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	011b      	lsls	r3, r3, #4
 8003b6e:	697a      	ldr	r2, [r7, #20]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b7a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4a17      	ldr	r2, [pc, #92]	@ (8003bdc <TIM_OC2_SetConfig+0xe4>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d003      	beq.n	8003b8c <TIM_OC2_SetConfig+0x94>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	4a16      	ldr	r2, [pc, #88]	@ (8003be0 <TIM_OC2_SetConfig+0xe8>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d113      	bne.n	8003bb4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003b92:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003b9a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	695b      	ldr	r3, [r3, #20]
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	693a      	ldr	r2, [r7, #16]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	699b      	ldr	r3, [r3, #24]
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	693a      	ldr	r2, [r7, #16]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	693a      	ldr	r2, [r7, #16]
 8003bb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	68fa      	ldr	r2, [r7, #12]
 8003bbe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	685a      	ldr	r2, [r3, #4]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	697a      	ldr	r2, [r7, #20]
 8003bcc:	621a      	str	r2, [r3, #32]
}
 8003bce:	bf00      	nop
 8003bd0:	371c      	adds	r7, #28
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr
 8003bda:	bf00      	nop
 8003bdc:	40010000 	.word	0x40010000
 8003be0:	40010400 	.word	0x40010400

08003be4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b087      	sub	sp, #28
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6a1b      	ldr	r3, [r3, #32]
 8003bf2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6a1b      	ldr	r3, [r3, #32]
 8003bf8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	69db      	ldr	r3, [r3, #28]
 8003c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f023 0303 	bic.w	r3, r3, #3
 8003c1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	68fa      	ldr	r2, [r7, #12]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003c2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	021b      	lsls	r3, r3, #8
 8003c34:	697a      	ldr	r2, [r7, #20]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a21      	ldr	r2, [pc, #132]	@ (8003cc4 <TIM_OC3_SetConfig+0xe0>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d003      	beq.n	8003c4a <TIM_OC3_SetConfig+0x66>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a20      	ldr	r2, [pc, #128]	@ (8003cc8 <TIM_OC3_SetConfig+0xe4>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d10d      	bne.n	8003c66 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003c50:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	021b      	lsls	r3, r3, #8
 8003c58:	697a      	ldr	r2, [r7, #20]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003c64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a16      	ldr	r2, [pc, #88]	@ (8003cc4 <TIM_OC3_SetConfig+0xe0>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d003      	beq.n	8003c76 <TIM_OC3_SetConfig+0x92>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a15      	ldr	r2, [pc, #84]	@ (8003cc8 <TIM_OC3_SetConfig+0xe4>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d113      	bne.n	8003c9e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003c7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003c84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	695b      	ldr	r3, [r3, #20]
 8003c8a:	011b      	lsls	r3, r3, #4
 8003c8c:	693a      	ldr	r2, [r7, #16]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	699b      	ldr	r3, [r3, #24]
 8003c96:	011b      	lsls	r3, r3, #4
 8003c98:	693a      	ldr	r2, [r7, #16]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	693a      	ldr	r2, [r7, #16]
 8003ca2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	68fa      	ldr	r2, [r7, #12]
 8003ca8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	685a      	ldr	r2, [r3, #4]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	697a      	ldr	r2, [r7, #20]
 8003cb6:	621a      	str	r2, [r3, #32]
}
 8003cb8:	bf00      	nop
 8003cba:	371c      	adds	r7, #28
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr
 8003cc4:	40010000 	.word	0x40010000
 8003cc8:	40010400 	.word	0x40010400

08003ccc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b087      	sub	sp, #28
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a1b      	ldr	r3, [r3, #32]
 8003cda:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a1b      	ldr	r3, [r3, #32]
 8003ce0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	69db      	ldr	r3, [r3, #28]
 8003cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003cfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	021b      	lsls	r3, r3, #8
 8003d0a:	68fa      	ldr	r2, [r7, #12]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003d16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	031b      	lsls	r3, r3, #12
 8003d1e:	693a      	ldr	r2, [r7, #16]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	4a12      	ldr	r2, [pc, #72]	@ (8003d70 <TIM_OC4_SetConfig+0xa4>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d003      	beq.n	8003d34 <TIM_OC4_SetConfig+0x68>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	4a11      	ldr	r2, [pc, #68]	@ (8003d74 <TIM_OC4_SetConfig+0xa8>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d109      	bne.n	8003d48 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003d3a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	695b      	ldr	r3, [r3, #20]
 8003d40:	019b      	lsls	r3, r3, #6
 8003d42:	697a      	ldr	r2, [r7, #20]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	697a      	ldr	r2, [r7, #20]
 8003d4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	68fa      	ldr	r2, [r7, #12]
 8003d52:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	685a      	ldr	r2, [r3, #4]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	693a      	ldr	r2, [r7, #16]
 8003d60:	621a      	str	r2, [r3, #32]
}
 8003d62:	bf00      	nop
 8003d64:	371c      	adds	r7, #28
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr
 8003d6e:	bf00      	nop
 8003d70:	40010000 	.word	0x40010000
 8003d74:	40010400 	.word	0x40010400

08003d78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b087      	sub	sp, #28
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	60f8      	str	r0, [r7, #12]
 8003d80:	60b9      	str	r1, [r7, #8]
 8003d82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6a1b      	ldr	r3, [r3, #32]
 8003d88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6a1b      	ldr	r3, [r3, #32]
 8003d8e:	f023 0201 	bic.w	r2, r3, #1
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	699b      	ldr	r3, [r3, #24]
 8003d9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003da2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	011b      	lsls	r3, r3, #4
 8003da8:	693a      	ldr	r2, [r7, #16]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	f023 030a 	bic.w	r3, r3, #10
 8003db4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003db6:	697a      	ldr	r2, [r7, #20]
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	693a      	ldr	r2, [r7, #16]
 8003dc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	697a      	ldr	r2, [r7, #20]
 8003dc8:	621a      	str	r2, [r3, #32]
}
 8003dca:	bf00      	nop
 8003dcc:	371c      	adds	r7, #28
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr

08003dd6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003dd6:	b480      	push	{r7}
 8003dd8:	b087      	sub	sp, #28
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	60f8      	str	r0, [r7, #12]
 8003dde:	60b9      	str	r1, [r7, #8]
 8003de0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	6a1b      	ldr	r3, [r3, #32]
 8003de6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6a1b      	ldr	r3, [r3, #32]
 8003dec:	f023 0210 	bic.w	r2, r3, #16
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	699b      	ldr	r3, [r3, #24]
 8003df8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003e00:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	031b      	lsls	r3, r3, #12
 8003e06:	693a      	ldr	r2, [r7, #16]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003e12:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	011b      	lsls	r3, r3, #4
 8003e18:	697a      	ldr	r2, [r7, #20]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	693a      	ldr	r2, [r7, #16]
 8003e22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	697a      	ldr	r2, [r7, #20]
 8003e28:	621a      	str	r2, [r3, #32]
}
 8003e2a:	bf00      	nop
 8003e2c:	371c      	adds	r7, #28
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr

08003e36 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e36:	b480      	push	{r7}
 8003e38:	b085      	sub	sp, #20
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	6078      	str	r0, [r7, #4]
 8003e3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e4e:	683a      	ldr	r2, [r7, #0]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	f043 0307 	orr.w	r3, r3, #7
 8003e58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	68fa      	ldr	r2, [r7, #12]
 8003e5e:	609a      	str	r2, [r3, #8]
}
 8003e60:	bf00      	nop
 8003e62:	3714      	adds	r7, #20
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b087      	sub	sp, #28
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	60b9      	str	r1, [r7, #8]
 8003e76:	607a      	str	r2, [r7, #4]
 8003e78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003e86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	021a      	lsls	r2, r3, #8
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	431a      	orrs	r2, r3
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	697a      	ldr	r2, [r7, #20]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	697a      	ldr	r2, [r7, #20]
 8003e9e:	609a      	str	r2, [r3, #8]
}
 8003ea0:	bf00      	nop
 8003ea2:	371c      	adds	r7, #28
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr

08003eac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b087      	sub	sp, #28
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	60f8      	str	r0, [r7, #12]
 8003eb4:	60b9      	str	r1, [r7, #8]
 8003eb6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	f003 031f 	and.w	r3, r3, #31
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6a1a      	ldr	r2, [r3, #32]
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	43db      	mvns	r3, r3
 8003ece:	401a      	ands	r2, r3
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6a1a      	ldr	r2, [r3, #32]
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	f003 031f 	and.w	r3, r3, #31
 8003ede:	6879      	ldr	r1, [r7, #4]
 8003ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ee4:	431a      	orrs	r2, r3
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	621a      	str	r2, [r3, #32]
}
 8003eea:	bf00      	nop
 8003eec:	371c      	adds	r7, #28
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr
	...

08003ef8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b085      	sub	sp, #20
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d101      	bne.n	8003f10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f0c:	2302      	movs	r3, #2
 8003f0e:	e05a      	b.n	8003fc6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2202      	movs	r2, #2
 8003f1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	68fa      	ldr	r2, [r7, #12]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	68fa      	ldr	r2, [r7, #12]
 8003f48:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a21      	ldr	r2, [pc, #132]	@ (8003fd4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d022      	beq.n	8003f9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f5c:	d01d      	beq.n	8003f9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a1d      	ldr	r2, [pc, #116]	@ (8003fd8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d018      	beq.n	8003f9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a1b      	ldr	r2, [pc, #108]	@ (8003fdc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d013      	beq.n	8003f9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a1a      	ldr	r2, [pc, #104]	@ (8003fe0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d00e      	beq.n	8003f9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a18      	ldr	r2, [pc, #96]	@ (8003fe4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d009      	beq.n	8003f9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a17      	ldr	r2, [pc, #92]	@ (8003fe8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d004      	beq.n	8003f9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a15      	ldr	r2, [pc, #84]	@ (8003fec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d10c      	bne.n	8003fb4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003fa0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	68ba      	ldr	r2, [r7, #8]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	68ba      	ldr	r2, [r7, #8]
 8003fb2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003fc4:	2300      	movs	r3, #0
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3714      	adds	r7, #20
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	40010000 	.word	0x40010000
 8003fd8:	40000400 	.word	0x40000400
 8003fdc:	40000800 	.word	0x40000800
 8003fe0:	40000c00 	.word	0x40000c00
 8003fe4:	40010400 	.word	0x40010400
 8003fe8:	40014000 	.word	0x40014000
 8003fec:	40001800 	.word	0x40001800

08003ff0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b085      	sub	sp, #20
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004004:	2b01      	cmp	r3, #1
 8004006:	d101      	bne.n	800400c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004008:	2302      	movs	r3, #2
 800400a:	e03d      	b.n	8004088 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	4313      	orrs	r3, r2
 8004020:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	4313      	orrs	r3, r2
 800402e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	4313      	orrs	r3, r2
 800403c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4313      	orrs	r3, r2
 800404a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	691b      	ldr	r3, [r3, #16]
 8004056:	4313      	orrs	r3, r2
 8004058:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	695b      	ldr	r3, [r3, #20]
 8004064:	4313      	orrs	r3, r2
 8004066:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	69db      	ldr	r3, [r3, #28]
 8004072:	4313      	orrs	r3, r2
 8004074:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	68fa      	ldr	r2, [r7, #12]
 800407c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004086:	2300      	movs	r3, #0
}
 8004088:	4618      	mov	r0, r3
 800408a:	3714      	adds	r7, #20
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d101      	bne.n	80040a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e042      	b.n	800412c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d106      	bne.n	80040c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f7fc fe40 	bl	8000d40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2224      	movs	r2, #36	@ 0x24
 80040c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	68da      	ldr	r2, [r3, #12]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80040d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f000 f973 	bl	80043c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	691a      	ldr	r2, [r3, #16]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80040ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	695a      	ldr	r2, [r3, #20]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80040fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	68da      	ldr	r2, [r3, #12]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800410c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2220      	movs	r2, #32
 8004118:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2220      	movs	r2, #32
 8004120:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800412a:	2300      	movs	r3, #0
}
 800412c:	4618      	mov	r0, r3
 800412e:	3708      	adds	r7, #8
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}

08004134 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b08a      	sub	sp, #40	@ 0x28
 8004138:	af02      	add	r7, sp, #8
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	60b9      	str	r1, [r7, #8]
 800413e:	603b      	str	r3, [r7, #0]
 8004140:	4613      	mov	r3, r2
 8004142:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004144:	2300      	movs	r3, #0
 8004146:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800414e:	b2db      	uxtb	r3, r3
 8004150:	2b20      	cmp	r3, #32
 8004152:	d175      	bne.n	8004240 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d002      	beq.n	8004160 <HAL_UART_Transmit+0x2c>
 800415a:	88fb      	ldrh	r3, [r7, #6]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d101      	bne.n	8004164 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e06e      	b.n	8004242 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2200      	movs	r2, #0
 8004168:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2221      	movs	r2, #33	@ 0x21
 800416e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004172:	f7fc ffaf 	bl	80010d4 <HAL_GetTick>
 8004176:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	88fa      	ldrh	r2, [r7, #6]
 800417c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	88fa      	ldrh	r2, [r7, #6]
 8004182:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800418c:	d108      	bne.n	80041a0 <HAL_UART_Transmit+0x6c>
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	691b      	ldr	r3, [r3, #16]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d104      	bne.n	80041a0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004196:	2300      	movs	r3, #0
 8004198:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	61bb      	str	r3, [r7, #24]
 800419e:	e003      	b.n	80041a8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80041a4:	2300      	movs	r3, #0
 80041a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80041a8:	e02e      	b.n	8004208 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	9300      	str	r3, [sp, #0]
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	2200      	movs	r2, #0
 80041b2:	2180      	movs	r1, #128	@ 0x80
 80041b4:	68f8      	ldr	r0, [r7, #12]
 80041b6:	f000 f848 	bl	800424a <UART_WaitOnFlagUntilTimeout>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d005      	beq.n	80041cc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2220      	movs	r2, #32
 80041c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80041c8:	2303      	movs	r3, #3
 80041ca:	e03a      	b.n	8004242 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d10b      	bne.n	80041ea <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80041d2:	69bb      	ldr	r3, [r7, #24]
 80041d4:	881b      	ldrh	r3, [r3, #0]
 80041d6:	461a      	mov	r2, r3
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041e0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80041e2:	69bb      	ldr	r3, [r7, #24]
 80041e4:	3302      	adds	r3, #2
 80041e6:	61bb      	str	r3, [r7, #24]
 80041e8:	e007      	b.n	80041fa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	781a      	ldrb	r2, [r3, #0]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80041f4:	69fb      	ldr	r3, [r7, #28]
 80041f6:	3301      	adds	r3, #1
 80041f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80041fe:	b29b      	uxth	r3, r3
 8004200:	3b01      	subs	r3, #1
 8004202:	b29a      	uxth	r2, r3
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800420c:	b29b      	uxth	r3, r3
 800420e:	2b00      	cmp	r3, #0
 8004210:	d1cb      	bne.n	80041aa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	9300      	str	r3, [sp, #0]
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	2200      	movs	r2, #0
 800421a:	2140      	movs	r1, #64	@ 0x40
 800421c:	68f8      	ldr	r0, [r7, #12]
 800421e:	f000 f814 	bl	800424a <UART_WaitOnFlagUntilTimeout>
 8004222:	4603      	mov	r3, r0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d005      	beq.n	8004234 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2220      	movs	r2, #32
 800422c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004230:	2303      	movs	r3, #3
 8004232:	e006      	b.n	8004242 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2220      	movs	r2, #32
 8004238:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800423c:	2300      	movs	r3, #0
 800423e:	e000      	b.n	8004242 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004240:	2302      	movs	r3, #2
  }
}
 8004242:	4618      	mov	r0, r3
 8004244:	3720      	adds	r7, #32
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}

0800424a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800424a:	b580      	push	{r7, lr}
 800424c:	b086      	sub	sp, #24
 800424e:	af00      	add	r7, sp, #0
 8004250:	60f8      	str	r0, [r7, #12]
 8004252:	60b9      	str	r1, [r7, #8]
 8004254:	603b      	str	r3, [r7, #0]
 8004256:	4613      	mov	r3, r2
 8004258:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800425a:	e03b      	b.n	80042d4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800425c:	6a3b      	ldr	r3, [r7, #32]
 800425e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004262:	d037      	beq.n	80042d4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004264:	f7fc ff36 	bl	80010d4 <HAL_GetTick>
 8004268:	4602      	mov	r2, r0
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	6a3a      	ldr	r2, [r7, #32]
 8004270:	429a      	cmp	r2, r3
 8004272:	d302      	bcc.n	800427a <UART_WaitOnFlagUntilTimeout+0x30>
 8004274:	6a3b      	ldr	r3, [r7, #32]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d101      	bne.n	800427e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e03a      	b.n	80042f4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	f003 0304 	and.w	r3, r3, #4
 8004288:	2b00      	cmp	r3, #0
 800428a:	d023      	beq.n	80042d4 <UART_WaitOnFlagUntilTimeout+0x8a>
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	2b80      	cmp	r3, #128	@ 0x80
 8004290:	d020      	beq.n	80042d4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	2b40      	cmp	r3, #64	@ 0x40
 8004296:	d01d      	beq.n	80042d4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0308 	and.w	r3, r3, #8
 80042a2:	2b08      	cmp	r3, #8
 80042a4:	d116      	bne.n	80042d4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80042a6:	2300      	movs	r3, #0
 80042a8:	617b      	str	r3, [r7, #20]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	617b      	str	r3, [r7, #20]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	617b      	str	r3, [r7, #20]
 80042ba:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80042bc:	68f8      	ldr	r0, [r7, #12]
 80042be:	f000 f81d 	bl	80042fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2208      	movs	r2, #8
 80042c6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2200      	movs	r2, #0
 80042cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e00f      	b.n	80042f4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	4013      	ands	r3, r2
 80042de:	68ba      	ldr	r2, [r7, #8]
 80042e0:	429a      	cmp	r2, r3
 80042e2:	bf0c      	ite	eq
 80042e4:	2301      	moveq	r3, #1
 80042e6:	2300      	movne	r3, #0
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	461a      	mov	r2, r3
 80042ec:	79fb      	ldrb	r3, [r7, #7]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d0b4      	beq.n	800425c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042f2:	2300      	movs	r3, #0
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3718      	adds	r7, #24
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}

080042fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b095      	sub	sp, #84	@ 0x54
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	330c      	adds	r3, #12
 800430a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800430c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800430e:	e853 3f00 	ldrex	r3, [r3]
 8004312:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004316:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800431a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	330c      	adds	r3, #12
 8004322:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004324:	643a      	str	r2, [r7, #64]	@ 0x40
 8004326:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004328:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800432a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800432c:	e841 2300 	strex	r3, r2, [r1]
 8004330:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004332:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004334:	2b00      	cmp	r3, #0
 8004336:	d1e5      	bne.n	8004304 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	3314      	adds	r3, #20
 800433e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004340:	6a3b      	ldr	r3, [r7, #32]
 8004342:	e853 3f00 	ldrex	r3, [r3]
 8004346:	61fb      	str	r3, [r7, #28]
   return(result);
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	f023 0301 	bic.w	r3, r3, #1
 800434e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	3314      	adds	r3, #20
 8004356:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004358:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800435a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800435c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800435e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004360:	e841 2300 	strex	r3, r2, [r1]
 8004364:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004368:	2b00      	cmp	r3, #0
 800436a:	d1e5      	bne.n	8004338 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004370:	2b01      	cmp	r3, #1
 8004372:	d119      	bne.n	80043a8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	330c      	adds	r3, #12
 800437a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	e853 3f00 	ldrex	r3, [r3]
 8004382:	60bb      	str	r3, [r7, #8]
   return(result);
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	f023 0310 	bic.w	r3, r3, #16
 800438a:	647b      	str	r3, [r7, #68]	@ 0x44
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	330c      	adds	r3, #12
 8004392:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004394:	61ba      	str	r2, [r7, #24]
 8004396:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004398:	6979      	ldr	r1, [r7, #20]
 800439a:	69ba      	ldr	r2, [r7, #24]
 800439c:	e841 2300 	strex	r3, r2, [r1]
 80043a0:	613b      	str	r3, [r7, #16]
   return(result);
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d1e5      	bne.n	8004374 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2220      	movs	r2, #32
 80043ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80043b6:	bf00      	nop
 80043b8:	3754      	adds	r7, #84	@ 0x54
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr
	...

080043c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043c8:	b0c0      	sub	sp, #256	@ 0x100
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	691b      	ldr	r3, [r3, #16]
 80043d8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80043dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043e0:	68d9      	ldr	r1, [r3, #12]
 80043e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	ea40 0301 	orr.w	r3, r0, r1
 80043ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80043ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043f2:	689a      	ldr	r2, [r3, #8]
 80043f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	431a      	orrs	r2, r3
 80043fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004400:	695b      	ldr	r3, [r3, #20]
 8004402:	431a      	orrs	r2, r3
 8004404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004408:	69db      	ldr	r3, [r3, #28]
 800440a:	4313      	orrs	r3, r2
 800440c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800441c:	f021 010c 	bic.w	r1, r1, #12
 8004420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800442a:	430b      	orrs	r3, r1
 800442c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800442e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	695b      	ldr	r3, [r3, #20]
 8004436:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800443a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800443e:	6999      	ldr	r1, [r3, #24]
 8004440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	ea40 0301 	orr.w	r3, r0, r1
 800444a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800444c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	4b8f      	ldr	r3, [pc, #572]	@ (8004690 <UART_SetConfig+0x2cc>)
 8004454:	429a      	cmp	r2, r3
 8004456:	d005      	beq.n	8004464 <UART_SetConfig+0xa0>
 8004458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	4b8d      	ldr	r3, [pc, #564]	@ (8004694 <UART_SetConfig+0x2d0>)
 8004460:	429a      	cmp	r2, r3
 8004462:	d104      	bne.n	800446e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004464:	f7fe ff1e 	bl	80032a4 <HAL_RCC_GetPCLK2Freq>
 8004468:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800446c:	e003      	b.n	8004476 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800446e:	f7fe ff05 	bl	800327c <HAL_RCC_GetPCLK1Freq>
 8004472:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004476:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800447a:	69db      	ldr	r3, [r3, #28]
 800447c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004480:	f040 810c 	bne.w	800469c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004484:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004488:	2200      	movs	r2, #0
 800448a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800448e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004492:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004496:	4622      	mov	r2, r4
 8004498:	462b      	mov	r3, r5
 800449a:	1891      	adds	r1, r2, r2
 800449c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800449e:	415b      	adcs	r3, r3
 80044a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80044a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80044a6:	4621      	mov	r1, r4
 80044a8:	eb12 0801 	adds.w	r8, r2, r1
 80044ac:	4629      	mov	r1, r5
 80044ae:	eb43 0901 	adc.w	r9, r3, r1
 80044b2:	f04f 0200 	mov.w	r2, #0
 80044b6:	f04f 0300 	mov.w	r3, #0
 80044ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80044be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80044c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80044c6:	4690      	mov	r8, r2
 80044c8:	4699      	mov	r9, r3
 80044ca:	4623      	mov	r3, r4
 80044cc:	eb18 0303 	adds.w	r3, r8, r3
 80044d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80044d4:	462b      	mov	r3, r5
 80044d6:	eb49 0303 	adc.w	r3, r9, r3
 80044da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80044de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80044ea:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80044ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80044f2:	460b      	mov	r3, r1
 80044f4:	18db      	adds	r3, r3, r3
 80044f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80044f8:	4613      	mov	r3, r2
 80044fa:	eb42 0303 	adc.w	r3, r2, r3
 80044fe:	657b      	str	r3, [r7, #84]	@ 0x54
 8004500:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004504:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004508:	f7fb fe5e 	bl	80001c8 <__aeabi_uldivmod>
 800450c:	4602      	mov	r2, r0
 800450e:	460b      	mov	r3, r1
 8004510:	4b61      	ldr	r3, [pc, #388]	@ (8004698 <UART_SetConfig+0x2d4>)
 8004512:	fba3 2302 	umull	r2, r3, r3, r2
 8004516:	095b      	lsrs	r3, r3, #5
 8004518:	011c      	lsls	r4, r3, #4
 800451a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800451e:	2200      	movs	r2, #0
 8004520:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004524:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004528:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800452c:	4642      	mov	r2, r8
 800452e:	464b      	mov	r3, r9
 8004530:	1891      	adds	r1, r2, r2
 8004532:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004534:	415b      	adcs	r3, r3
 8004536:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004538:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800453c:	4641      	mov	r1, r8
 800453e:	eb12 0a01 	adds.w	sl, r2, r1
 8004542:	4649      	mov	r1, r9
 8004544:	eb43 0b01 	adc.w	fp, r3, r1
 8004548:	f04f 0200 	mov.w	r2, #0
 800454c:	f04f 0300 	mov.w	r3, #0
 8004550:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004554:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004558:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800455c:	4692      	mov	sl, r2
 800455e:	469b      	mov	fp, r3
 8004560:	4643      	mov	r3, r8
 8004562:	eb1a 0303 	adds.w	r3, sl, r3
 8004566:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800456a:	464b      	mov	r3, r9
 800456c:	eb4b 0303 	adc.w	r3, fp, r3
 8004570:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004580:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004584:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004588:	460b      	mov	r3, r1
 800458a:	18db      	adds	r3, r3, r3
 800458c:	643b      	str	r3, [r7, #64]	@ 0x40
 800458e:	4613      	mov	r3, r2
 8004590:	eb42 0303 	adc.w	r3, r2, r3
 8004594:	647b      	str	r3, [r7, #68]	@ 0x44
 8004596:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800459a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800459e:	f7fb fe13 	bl	80001c8 <__aeabi_uldivmod>
 80045a2:	4602      	mov	r2, r0
 80045a4:	460b      	mov	r3, r1
 80045a6:	4611      	mov	r1, r2
 80045a8:	4b3b      	ldr	r3, [pc, #236]	@ (8004698 <UART_SetConfig+0x2d4>)
 80045aa:	fba3 2301 	umull	r2, r3, r3, r1
 80045ae:	095b      	lsrs	r3, r3, #5
 80045b0:	2264      	movs	r2, #100	@ 0x64
 80045b2:	fb02 f303 	mul.w	r3, r2, r3
 80045b6:	1acb      	subs	r3, r1, r3
 80045b8:	00db      	lsls	r3, r3, #3
 80045ba:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80045be:	4b36      	ldr	r3, [pc, #216]	@ (8004698 <UART_SetConfig+0x2d4>)
 80045c0:	fba3 2302 	umull	r2, r3, r3, r2
 80045c4:	095b      	lsrs	r3, r3, #5
 80045c6:	005b      	lsls	r3, r3, #1
 80045c8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80045cc:	441c      	add	r4, r3
 80045ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045d2:	2200      	movs	r2, #0
 80045d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80045d8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80045dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80045e0:	4642      	mov	r2, r8
 80045e2:	464b      	mov	r3, r9
 80045e4:	1891      	adds	r1, r2, r2
 80045e6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80045e8:	415b      	adcs	r3, r3
 80045ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80045ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80045f0:	4641      	mov	r1, r8
 80045f2:	1851      	adds	r1, r2, r1
 80045f4:	6339      	str	r1, [r7, #48]	@ 0x30
 80045f6:	4649      	mov	r1, r9
 80045f8:	414b      	adcs	r3, r1
 80045fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80045fc:	f04f 0200 	mov.w	r2, #0
 8004600:	f04f 0300 	mov.w	r3, #0
 8004604:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004608:	4659      	mov	r1, fp
 800460a:	00cb      	lsls	r3, r1, #3
 800460c:	4651      	mov	r1, sl
 800460e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004612:	4651      	mov	r1, sl
 8004614:	00ca      	lsls	r2, r1, #3
 8004616:	4610      	mov	r0, r2
 8004618:	4619      	mov	r1, r3
 800461a:	4603      	mov	r3, r0
 800461c:	4642      	mov	r2, r8
 800461e:	189b      	adds	r3, r3, r2
 8004620:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004624:	464b      	mov	r3, r9
 8004626:	460a      	mov	r2, r1
 8004628:	eb42 0303 	adc.w	r3, r2, r3
 800462c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800463c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004640:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004644:	460b      	mov	r3, r1
 8004646:	18db      	adds	r3, r3, r3
 8004648:	62bb      	str	r3, [r7, #40]	@ 0x28
 800464a:	4613      	mov	r3, r2
 800464c:	eb42 0303 	adc.w	r3, r2, r3
 8004650:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004652:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004656:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800465a:	f7fb fdb5 	bl	80001c8 <__aeabi_uldivmod>
 800465e:	4602      	mov	r2, r0
 8004660:	460b      	mov	r3, r1
 8004662:	4b0d      	ldr	r3, [pc, #52]	@ (8004698 <UART_SetConfig+0x2d4>)
 8004664:	fba3 1302 	umull	r1, r3, r3, r2
 8004668:	095b      	lsrs	r3, r3, #5
 800466a:	2164      	movs	r1, #100	@ 0x64
 800466c:	fb01 f303 	mul.w	r3, r1, r3
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	00db      	lsls	r3, r3, #3
 8004674:	3332      	adds	r3, #50	@ 0x32
 8004676:	4a08      	ldr	r2, [pc, #32]	@ (8004698 <UART_SetConfig+0x2d4>)
 8004678:	fba2 2303 	umull	r2, r3, r2, r3
 800467c:	095b      	lsrs	r3, r3, #5
 800467e:	f003 0207 	and.w	r2, r3, #7
 8004682:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4422      	add	r2, r4
 800468a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800468c:	e106      	b.n	800489c <UART_SetConfig+0x4d8>
 800468e:	bf00      	nop
 8004690:	40011000 	.word	0x40011000
 8004694:	40011400 	.word	0x40011400
 8004698:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800469c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046a0:	2200      	movs	r2, #0
 80046a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80046a6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80046aa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80046ae:	4642      	mov	r2, r8
 80046b0:	464b      	mov	r3, r9
 80046b2:	1891      	adds	r1, r2, r2
 80046b4:	6239      	str	r1, [r7, #32]
 80046b6:	415b      	adcs	r3, r3
 80046b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80046ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80046be:	4641      	mov	r1, r8
 80046c0:	1854      	adds	r4, r2, r1
 80046c2:	4649      	mov	r1, r9
 80046c4:	eb43 0501 	adc.w	r5, r3, r1
 80046c8:	f04f 0200 	mov.w	r2, #0
 80046cc:	f04f 0300 	mov.w	r3, #0
 80046d0:	00eb      	lsls	r3, r5, #3
 80046d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046d6:	00e2      	lsls	r2, r4, #3
 80046d8:	4614      	mov	r4, r2
 80046da:	461d      	mov	r5, r3
 80046dc:	4643      	mov	r3, r8
 80046de:	18e3      	adds	r3, r4, r3
 80046e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80046e4:	464b      	mov	r3, r9
 80046e6:	eb45 0303 	adc.w	r3, r5, r3
 80046ea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80046ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80046fa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80046fe:	f04f 0200 	mov.w	r2, #0
 8004702:	f04f 0300 	mov.w	r3, #0
 8004706:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800470a:	4629      	mov	r1, r5
 800470c:	008b      	lsls	r3, r1, #2
 800470e:	4621      	mov	r1, r4
 8004710:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004714:	4621      	mov	r1, r4
 8004716:	008a      	lsls	r2, r1, #2
 8004718:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800471c:	f7fb fd54 	bl	80001c8 <__aeabi_uldivmod>
 8004720:	4602      	mov	r2, r0
 8004722:	460b      	mov	r3, r1
 8004724:	4b60      	ldr	r3, [pc, #384]	@ (80048a8 <UART_SetConfig+0x4e4>)
 8004726:	fba3 2302 	umull	r2, r3, r3, r2
 800472a:	095b      	lsrs	r3, r3, #5
 800472c:	011c      	lsls	r4, r3, #4
 800472e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004732:	2200      	movs	r2, #0
 8004734:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004738:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800473c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004740:	4642      	mov	r2, r8
 8004742:	464b      	mov	r3, r9
 8004744:	1891      	adds	r1, r2, r2
 8004746:	61b9      	str	r1, [r7, #24]
 8004748:	415b      	adcs	r3, r3
 800474a:	61fb      	str	r3, [r7, #28]
 800474c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004750:	4641      	mov	r1, r8
 8004752:	1851      	adds	r1, r2, r1
 8004754:	6139      	str	r1, [r7, #16]
 8004756:	4649      	mov	r1, r9
 8004758:	414b      	adcs	r3, r1
 800475a:	617b      	str	r3, [r7, #20]
 800475c:	f04f 0200 	mov.w	r2, #0
 8004760:	f04f 0300 	mov.w	r3, #0
 8004764:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004768:	4659      	mov	r1, fp
 800476a:	00cb      	lsls	r3, r1, #3
 800476c:	4651      	mov	r1, sl
 800476e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004772:	4651      	mov	r1, sl
 8004774:	00ca      	lsls	r2, r1, #3
 8004776:	4610      	mov	r0, r2
 8004778:	4619      	mov	r1, r3
 800477a:	4603      	mov	r3, r0
 800477c:	4642      	mov	r2, r8
 800477e:	189b      	adds	r3, r3, r2
 8004780:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004784:	464b      	mov	r3, r9
 8004786:	460a      	mov	r2, r1
 8004788:	eb42 0303 	adc.w	r3, r2, r3
 800478c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	2200      	movs	r2, #0
 8004798:	67bb      	str	r3, [r7, #120]	@ 0x78
 800479a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800479c:	f04f 0200 	mov.w	r2, #0
 80047a0:	f04f 0300 	mov.w	r3, #0
 80047a4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80047a8:	4649      	mov	r1, r9
 80047aa:	008b      	lsls	r3, r1, #2
 80047ac:	4641      	mov	r1, r8
 80047ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047b2:	4641      	mov	r1, r8
 80047b4:	008a      	lsls	r2, r1, #2
 80047b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80047ba:	f7fb fd05 	bl	80001c8 <__aeabi_uldivmod>
 80047be:	4602      	mov	r2, r0
 80047c0:	460b      	mov	r3, r1
 80047c2:	4611      	mov	r1, r2
 80047c4:	4b38      	ldr	r3, [pc, #224]	@ (80048a8 <UART_SetConfig+0x4e4>)
 80047c6:	fba3 2301 	umull	r2, r3, r3, r1
 80047ca:	095b      	lsrs	r3, r3, #5
 80047cc:	2264      	movs	r2, #100	@ 0x64
 80047ce:	fb02 f303 	mul.w	r3, r2, r3
 80047d2:	1acb      	subs	r3, r1, r3
 80047d4:	011b      	lsls	r3, r3, #4
 80047d6:	3332      	adds	r3, #50	@ 0x32
 80047d8:	4a33      	ldr	r2, [pc, #204]	@ (80048a8 <UART_SetConfig+0x4e4>)
 80047da:	fba2 2303 	umull	r2, r3, r2, r3
 80047de:	095b      	lsrs	r3, r3, #5
 80047e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80047e4:	441c      	add	r4, r3
 80047e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80047ea:	2200      	movs	r2, #0
 80047ec:	673b      	str	r3, [r7, #112]	@ 0x70
 80047ee:	677a      	str	r2, [r7, #116]	@ 0x74
 80047f0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80047f4:	4642      	mov	r2, r8
 80047f6:	464b      	mov	r3, r9
 80047f8:	1891      	adds	r1, r2, r2
 80047fa:	60b9      	str	r1, [r7, #8]
 80047fc:	415b      	adcs	r3, r3
 80047fe:	60fb      	str	r3, [r7, #12]
 8004800:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004804:	4641      	mov	r1, r8
 8004806:	1851      	adds	r1, r2, r1
 8004808:	6039      	str	r1, [r7, #0]
 800480a:	4649      	mov	r1, r9
 800480c:	414b      	adcs	r3, r1
 800480e:	607b      	str	r3, [r7, #4]
 8004810:	f04f 0200 	mov.w	r2, #0
 8004814:	f04f 0300 	mov.w	r3, #0
 8004818:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800481c:	4659      	mov	r1, fp
 800481e:	00cb      	lsls	r3, r1, #3
 8004820:	4651      	mov	r1, sl
 8004822:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004826:	4651      	mov	r1, sl
 8004828:	00ca      	lsls	r2, r1, #3
 800482a:	4610      	mov	r0, r2
 800482c:	4619      	mov	r1, r3
 800482e:	4603      	mov	r3, r0
 8004830:	4642      	mov	r2, r8
 8004832:	189b      	adds	r3, r3, r2
 8004834:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004836:	464b      	mov	r3, r9
 8004838:	460a      	mov	r2, r1
 800483a:	eb42 0303 	adc.w	r3, r2, r3
 800483e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	2200      	movs	r2, #0
 8004848:	663b      	str	r3, [r7, #96]	@ 0x60
 800484a:	667a      	str	r2, [r7, #100]	@ 0x64
 800484c:	f04f 0200 	mov.w	r2, #0
 8004850:	f04f 0300 	mov.w	r3, #0
 8004854:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004858:	4649      	mov	r1, r9
 800485a:	008b      	lsls	r3, r1, #2
 800485c:	4641      	mov	r1, r8
 800485e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004862:	4641      	mov	r1, r8
 8004864:	008a      	lsls	r2, r1, #2
 8004866:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800486a:	f7fb fcad 	bl	80001c8 <__aeabi_uldivmod>
 800486e:	4602      	mov	r2, r0
 8004870:	460b      	mov	r3, r1
 8004872:	4b0d      	ldr	r3, [pc, #52]	@ (80048a8 <UART_SetConfig+0x4e4>)
 8004874:	fba3 1302 	umull	r1, r3, r3, r2
 8004878:	095b      	lsrs	r3, r3, #5
 800487a:	2164      	movs	r1, #100	@ 0x64
 800487c:	fb01 f303 	mul.w	r3, r1, r3
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	011b      	lsls	r3, r3, #4
 8004884:	3332      	adds	r3, #50	@ 0x32
 8004886:	4a08      	ldr	r2, [pc, #32]	@ (80048a8 <UART_SetConfig+0x4e4>)
 8004888:	fba2 2303 	umull	r2, r3, r2, r3
 800488c:	095b      	lsrs	r3, r3, #5
 800488e:	f003 020f 	and.w	r2, r3, #15
 8004892:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4422      	add	r2, r4
 800489a:	609a      	str	r2, [r3, #8]
}
 800489c:	bf00      	nop
 800489e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80048a2:	46bd      	mov	sp, r7
 80048a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048a8:	51eb851f 	.word	0x51eb851f

080048ac <std>:
 80048ac:	2300      	movs	r3, #0
 80048ae:	b510      	push	{r4, lr}
 80048b0:	4604      	mov	r4, r0
 80048b2:	e9c0 3300 	strd	r3, r3, [r0]
 80048b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80048ba:	6083      	str	r3, [r0, #8]
 80048bc:	8181      	strh	r1, [r0, #12]
 80048be:	6643      	str	r3, [r0, #100]	@ 0x64
 80048c0:	81c2      	strh	r2, [r0, #14]
 80048c2:	6183      	str	r3, [r0, #24]
 80048c4:	4619      	mov	r1, r3
 80048c6:	2208      	movs	r2, #8
 80048c8:	305c      	adds	r0, #92	@ 0x5c
 80048ca:	f000 f9e7 	bl	8004c9c <memset>
 80048ce:	4b0d      	ldr	r3, [pc, #52]	@ (8004904 <std+0x58>)
 80048d0:	6263      	str	r3, [r4, #36]	@ 0x24
 80048d2:	4b0d      	ldr	r3, [pc, #52]	@ (8004908 <std+0x5c>)
 80048d4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80048d6:	4b0d      	ldr	r3, [pc, #52]	@ (800490c <std+0x60>)
 80048d8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80048da:	4b0d      	ldr	r3, [pc, #52]	@ (8004910 <std+0x64>)
 80048dc:	6323      	str	r3, [r4, #48]	@ 0x30
 80048de:	4b0d      	ldr	r3, [pc, #52]	@ (8004914 <std+0x68>)
 80048e0:	6224      	str	r4, [r4, #32]
 80048e2:	429c      	cmp	r4, r3
 80048e4:	d006      	beq.n	80048f4 <std+0x48>
 80048e6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80048ea:	4294      	cmp	r4, r2
 80048ec:	d002      	beq.n	80048f4 <std+0x48>
 80048ee:	33d0      	adds	r3, #208	@ 0xd0
 80048f0:	429c      	cmp	r4, r3
 80048f2:	d105      	bne.n	8004900 <std+0x54>
 80048f4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80048f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048fc:	f000 ba46 	b.w	8004d8c <__retarget_lock_init_recursive>
 8004900:	bd10      	pop	{r4, pc}
 8004902:	bf00      	nop
 8004904:	08004aed 	.word	0x08004aed
 8004908:	08004b0f 	.word	0x08004b0f
 800490c:	08004b47 	.word	0x08004b47
 8004910:	08004b6b 	.word	0x08004b6b
 8004914:	200002a8 	.word	0x200002a8

08004918 <stdio_exit_handler>:
 8004918:	4a02      	ldr	r2, [pc, #8]	@ (8004924 <stdio_exit_handler+0xc>)
 800491a:	4903      	ldr	r1, [pc, #12]	@ (8004928 <stdio_exit_handler+0x10>)
 800491c:	4803      	ldr	r0, [pc, #12]	@ (800492c <stdio_exit_handler+0x14>)
 800491e:	f000 b869 	b.w	80049f4 <_fwalk_sglue>
 8004922:	bf00      	nop
 8004924:	2000000c 	.word	0x2000000c
 8004928:	0800508d 	.word	0x0800508d
 800492c:	2000001c 	.word	0x2000001c

08004930 <cleanup_stdio>:
 8004930:	6841      	ldr	r1, [r0, #4]
 8004932:	4b0c      	ldr	r3, [pc, #48]	@ (8004964 <cleanup_stdio+0x34>)
 8004934:	4299      	cmp	r1, r3
 8004936:	b510      	push	{r4, lr}
 8004938:	4604      	mov	r4, r0
 800493a:	d001      	beq.n	8004940 <cleanup_stdio+0x10>
 800493c:	f000 fba6 	bl	800508c <_fflush_r>
 8004940:	68a1      	ldr	r1, [r4, #8]
 8004942:	4b09      	ldr	r3, [pc, #36]	@ (8004968 <cleanup_stdio+0x38>)
 8004944:	4299      	cmp	r1, r3
 8004946:	d002      	beq.n	800494e <cleanup_stdio+0x1e>
 8004948:	4620      	mov	r0, r4
 800494a:	f000 fb9f 	bl	800508c <_fflush_r>
 800494e:	68e1      	ldr	r1, [r4, #12]
 8004950:	4b06      	ldr	r3, [pc, #24]	@ (800496c <cleanup_stdio+0x3c>)
 8004952:	4299      	cmp	r1, r3
 8004954:	d004      	beq.n	8004960 <cleanup_stdio+0x30>
 8004956:	4620      	mov	r0, r4
 8004958:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800495c:	f000 bb96 	b.w	800508c <_fflush_r>
 8004960:	bd10      	pop	{r4, pc}
 8004962:	bf00      	nop
 8004964:	200002a8 	.word	0x200002a8
 8004968:	20000310 	.word	0x20000310
 800496c:	20000378 	.word	0x20000378

08004970 <global_stdio_init.part.0>:
 8004970:	b510      	push	{r4, lr}
 8004972:	4b0b      	ldr	r3, [pc, #44]	@ (80049a0 <global_stdio_init.part.0+0x30>)
 8004974:	4c0b      	ldr	r4, [pc, #44]	@ (80049a4 <global_stdio_init.part.0+0x34>)
 8004976:	4a0c      	ldr	r2, [pc, #48]	@ (80049a8 <global_stdio_init.part.0+0x38>)
 8004978:	601a      	str	r2, [r3, #0]
 800497a:	4620      	mov	r0, r4
 800497c:	2200      	movs	r2, #0
 800497e:	2104      	movs	r1, #4
 8004980:	f7ff ff94 	bl	80048ac <std>
 8004984:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004988:	2201      	movs	r2, #1
 800498a:	2109      	movs	r1, #9
 800498c:	f7ff ff8e 	bl	80048ac <std>
 8004990:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004994:	2202      	movs	r2, #2
 8004996:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800499a:	2112      	movs	r1, #18
 800499c:	f7ff bf86 	b.w	80048ac <std>
 80049a0:	200003e0 	.word	0x200003e0
 80049a4:	200002a8 	.word	0x200002a8
 80049a8:	08004919 	.word	0x08004919

080049ac <__sfp_lock_acquire>:
 80049ac:	4801      	ldr	r0, [pc, #4]	@ (80049b4 <__sfp_lock_acquire+0x8>)
 80049ae:	f000 b9ee 	b.w	8004d8e <__retarget_lock_acquire_recursive>
 80049b2:	bf00      	nop
 80049b4:	200003e9 	.word	0x200003e9

080049b8 <__sfp_lock_release>:
 80049b8:	4801      	ldr	r0, [pc, #4]	@ (80049c0 <__sfp_lock_release+0x8>)
 80049ba:	f000 b9e9 	b.w	8004d90 <__retarget_lock_release_recursive>
 80049be:	bf00      	nop
 80049c0:	200003e9 	.word	0x200003e9

080049c4 <__sinit>:
 80049c4:	b510      	push	{r4, lr}
 80049c6:	4604      	mov	r4, r0
 80049c8:	f7ff fff0 	bl	80049ac <__sfp_lock_acquire>
 80049cc:	6a23      	ldr	r3, [r4, #32]
 80049ce:	b11b      	cbz	r3, 80049d8 <__sinit+0x14>
 80049d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049d4:	f7ff bff0 	b.w	80049b8 <__sfp_lock_release>
 80049d8:	4b04      	ldr	r3, [pc, #16]	@ (80049ec <__sinit+0x28>)
 80049da:	6223      	str	r3, [r4, #32]
 80049dc:	4b04      	ldr	r3, [pc, #16]	@ (80049f0 <__sinit+0x2c>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d1f5      	bne.n	80049d0 <__sinit+0xc>
 80049e4:	f7ff ffc4 	bl	8004970 <global_stdio_init.part.0>
 80049e8:	e7f2      	b.n	80049d0 <__sinit+0xc>
 80049ea:	bf00      	nop
 80049ec:	08004931 	.word	0x08004931
 80049f0:	200003e0 	.word	0x200003e0

080049f4 <_fwalk_sglue>:
 80049f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049f8:	4607      	mov	r7, r0
 80049fa:	4688      	mov	r8, r1
 80049fc:	4614      	mov	r4, r2
 80049fe:	2600      	movs	r6, #0
 8004a00:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004a04:	f1b9 0901 	subs.w	r9, r9, #1
 8004a08:	d505      	bpl.n	8004a16 <_fwalk_sglue+0x22>
 8004a0a:	6824      	ldr	r4, [r4, #0]
 8004a0c:	2c00      	cmp	r4, #0
 8004a0e:	d1f7      	bne.n	8004a00 <_fwalk_sglue+0xc>
 8004a10:	4630      	mov	r0, r6
 8004a12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a16:	89ab      	ldrh	r3, [r5, #12]
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d907      	bls.n	8004a2c <_fwalk_sglue+0x38>
 8004a1c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004a20:	3301      	adds	r3, #1
 8004a22:	d003      	beq.n	8004a2c <_fwalk_sglue+0x38>
 8004a24:	4629      	mov	r1, r5
 8004a26:	4638      	mov	r0, r7
 8004a28:	47c0      	blx	r8
 8004a2a:	4306      	orrs	r6, r0
 8004a2c:	3568      	adds	r5, #104	@ 0x68
 8004a2e:	e7e9      	b.n	8004a04 <_fwalk_sglue+0x10>

08004a30 <_puts_r>:
 8004a30:	6a03      	ldr	r3, [r0, #32]
 8004a32:	b570      	push	{r4, r5, r6, lr}
 8004a34:	6884      	ldr	r4, [r0, #8]
 8004a36:	4605      	mov	r5, r0
 8004a38:	460e      	mov	r6, r1
 8004a3a:	b90b      	cbnz	r3, 8004a40 <_puts_r+0x10>
 8004a3c:	f7ff ffc2 	bl	80049c4 <__sinit>
 8004a40:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004a42:	07db      	lsls	r3, r3, #31
 8004a44:	d405      	bmi.n	8004a52 <_puts_r+0x22>
 8004a46:	89a3      	ldrh	r3, [r4, #12]
 8004a48:	0598      	lsls	r0, r3, #22
 8004a4a:	d402      	bmi.n	8004a52 <_puts_r+0x22>
 8004a4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a4e:	f000 f99e 	bl	8004d8e <__retarget_lock_acquire_recursive>
 8004a52:	89a3      	ldrh	r3, [r4, #12]
 8004a54:	0719      	lsls	r1, r3, #28
 8004a56:	d502      	bpl.n	8004a5e <_puts_r+0x2e>
 8004a58:	6923      	ldr	r3, [r4, #16]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d135      	bne.n	8004aca <_puts_r+0x9a>
 8004a5e:	4621      	mov	r1, r4
 8004a60:	4628      	mov	r0, r5
 8004a62:	f000 f8c5 	bl	8004bf0 <__swsetup_r>
 8004a66:	b380      	cbz	r0, 8004aca <_puts_r+0x9a>
 8004a68:	f04f 35ff 	mov.w	r5, #4294967295
 8004a6c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004a6e:	07da      	lsls	r2, r3, #31
 8004a70:	d405      	bmi.n	8004a7e <_puts_r+0x4e>
 8004a72:	89a3      	ldrh	r3, [r4, #12]
 8004a74:	059b      	lsls	r3, r3, #22
 8004a76:	d402      	bmi.n	8004a7e <_puts_r+0x4e>
 8004a78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a7a:	f000 f989 	bl	8004d90 <__retarget_lock_release_recursive>
 8004a7e:	4628      	mov	r0, r5
 8004a80:	bd70      	pop	{r4, r5, r6, pc}
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	da04      	bge.n	8004a90 <_puts_r+0x60>
 8004a86:	69a2      	ldr	r2, [r4, #24]
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	dc17      	bgt.n	8004abc <_puts_r+0x8c>
 8004a8c:	290a      	cmp	r1, #10
 8004a8e:	d015      	beq.n	8004abc <_puts_r+0x8c>
 8004a90:	6823      	ldr	r3, [r4, #0]
 8004a92:	1c5a      	adds	r2, r3, #1
 8004a94:	6022      	str	r2, [r4, #0]
 8004a96:	7019      	strb	r1, [r3, #0]
 8004a98:	68a3      	ldr	r3, [r4, #8]
 8004a9a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004a9e:	3b01      	subs	r3, #1
 8004aa0:	60a3      	str	r3, [r4, #8]
 8004aa2:	2900      	cmp	r1, #0
 8004aa4:	d1ed      	bne.n	8004a82 <_puts_r+0x52>
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	da11      	bge.n	8004ace <_puts_r+0x9e>
 8004aaa:	4622      	mov	r2, r4
 8004aac:	210a      	movs	r1, #10
 8004aae:	4628      	mov	r0, r5
 8004ab0:	f000 f85f 	bl	8004b72 <__swbuf_r>
 8004ab4:	3001      	adds	r0, #1
 8004ab6:	d0d7      	beq.n	8004a68 <_puts_r+0x38>
 8004ab8:	250a      	movs	r5, #10
 8004aba:	e7d7      	b.n	8004a6c <_puts_r+0x3c>
 8004abc:	4622      	mov	r2, r4
 8004abe:	4628      	mov	r0, r5
 8004ac0:	f000 f857 	bl	8004b72 <__swbuf_r>
 8004ac4:	3001      	adds	r0, #1
 8004ac6:	d1e7      	bne.n	8004a98 <_puts_r+0x68>
 8004ac8:	e7ce      	b.n	8004a68 <_puts_r+0x38>
 8004aca:	3e01      	subs	r6, #1
 8004acc:	e7e4      	b.n	8004a98 <_puts_r+0x68>
 8004ace:	6823      	ldr	r3, [r4, #0]
 8004ad0:	1c5a      	adds	r2, r3, #1
 8004ad2:	6022      	str	r2, [r4, #0]
 8004ad4:	220a      	movs	r2, #10
 8004ad6:	701a      	strb	r2, [r3, #0]
 8004ad8:	e7ee      	b.n	8004ab8 <_puts_r+0x88>
	...

08004adc <puts>:
 8004adc:	4b02      	ldr	r3, [pc, #8]	@ (8004ae8 <puts+0xc>)
 8004ade:	4601      	mov	r1, r0
 8004ae0:	6818      	ldr	r0, [r3, #0]
 8004ae2:	f7ff bfa5 	b.w	8004a30 <_puts_r>
 8004ae6:	bf00      	nop
 8004ae8:	20000018 	.word	0x20000018

08004aec <__sread>:
 8004aec:	b510      	push	{r4, lr}
 8004aee:	460c      	mov	r4, r1
 8004af0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004af4:	f000 f8fc 	bl	8004cf0 <_read_r>
 8004af8:	2800      	cmp	r0, #0
 8004afa:	bfab      	itete	ge
 8004afc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004afe:	89a3      	ldrhlt	r3, [r4, #12]
 8004b00:	181b      	addge	r3, r3, r0
 8004b02:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004b06:	bfac      	ite	ge
 8004b08:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004b0a:	81a3      	strhlt	r3, [r4, #12]
 8004b0c:	bd10      	pop	{r4, pc}

08004b0e <__swrite>:
 8004b0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b12:	461f      	mov	r7, r3
 8004b14:	898b      	ldrh	r3, [r1, #12]
 8004b16:	05db      	lsls	r3, r3, #23
 8004b18:	4605      	mov	r5, r0
 8004b1a:	460c      	mov	r4, r1
 8004b1c:	4616      	mov	r6, r2
 8004b1e:	d505      	bpl.n	8004b2c <__swrite+0x1e>
 8004b20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b24:	2302      	movs	r3, #2
 8004b26:	2200      	movs	r2, #0
 8004b28:	f000 f8d0 	bl	8004ccc <_lseek_r>
 8004b2c:	89a3      	ldrh	r3, [r4, #12]
 8004b2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b32:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004b36:	81a3      	strh	r3, [r4, #12]
 8004b38:	4632      	mov	r2, r6
 8004b3a:	463b      	mov	r3, r7
 8004b3c:	4628      	mov	r0, r5
 8004b3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b42:	f000 b8e7 	b.w	8004d14 <_write_r>

08004b46 <__sseek>:
 8004b46:	b510      	push	{r4, lr}
 8004b48:	460c      	mov	r4, r1
 8004b4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b4e:	f000 f8bd 	bl	8004ccc <_lseek_r>
 8004b52:	1c43      	adds	r3, r0, #1
 8004b54:	89a3      	ldrh	r3, [r4, #12]
 8004b56:	bf15      	itete	ne
 8004b58:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004b5a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004b5e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004b62:	81a3      	strheq	r3, [r4, #12]
 8004b64:	bf18      	it	ne
 8004b66:	81a3      	strhne	r3, [r4, #12]
 8004b68:	bd10      	pop	{r4, pc}

08004b6a <__sclose>:
 8004b6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b6e:	f000 b89d 	b.w	8004cac <_close_r>

08004b72 <__swbuf_r>:
 8004b72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b74:	460e      	mov	r6, r1
 8004b76:	4614      	mov	r4, r2
 8004b78:	4605      	mov	r5, r0
 8004b7a:	b118      	cbz	r0, 8004b84 <__swbuf_r+0x12>
 8004b7c:	6a03      	ldr	r3, [r0, #32]
 8004b7e:	b90b      	cbnz	r3, 8004b84 <__swbuf_r+0x12>
 8004b80:	f7ff ff20 	bl	80049c4 <__sinit>
 8004b84:	69a3      	ldr	r3, [r4, #24]
 8004b86:	60a3      	str	r3, [r4, #8]
 8004b88:	89a3      	ldrh	r3, [r4, #12]
 8004b8a:	071a      	lsls	r2, r3, #28
 8004b8c:	d501      	bpl.n	8004b92 <__swbuf_r+0x20>
 8004b8e:	6923      	ldr	r3, [r4, #16]
 8004b90:	b943      	cbnz	r3, 8004ba4 <__swbuf_r+0x32>
 8004b92:	4621      	mov	r1, r4
 8004b94:	4628      	mov	r0, r5
 8004b96:	f000 f82b 	bl	8004bf0 <__swsetup_r>
 8004b9a:	b118      	cbz	r0, 8004ba4 <__swbuf_r+0x32>
 8004b9c:	f04f 37ff 	mov.w	r7, #4294967295
 8004ba0:	4638      	mov	r0, r7
 8004ba2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ba4:	6823      	ldr	r3, [r4, #0]
 8004ba6:	6922      	ldr	r2, [r4, #16]
 8004ba8:	1a98      	subs	r0, r3, r2
 8004baa:	6963      	ldr	r3, [r4, #20]
 8004bac:	b2f6      	uxtb	r6, r6
 8004bae:	4283      	cmp	r3, r0
 8004bb0:	4637      	mov	r7, r6
 8004bb2:	dc05      	bgt.n	8004bc0 <__swbuf_r+0x4e>
 8004bb4:	4621      	mov	r1, r4
 8004bb6:	4628      	mov	r0, r5
 8004bb8:	f000 fa68 	bl	800508c <_fflush_r>
 8004bbc:	2800      	cmp	r0, #0
 8004bbe:	d1ed      	bne.n	8004b9c <__swbuf_r+0x2a>
 8004bc0:	68a3      	ldr	r3, [r4, #8]
 8004bc2:	3b01      	subs	r3, #1
 8004bc4:	60a3      	str	r3, [r4, #8]
 8004bc6:	6823      	ldr	r3, [r4, #0]
 8004bc8:	1c5a      	adds	r2, r3, #1
 8004bca:	6022      	str	r2, [r4, #0]
 8004bcc:	701e      	strb	r6, [r3, #0]
 8004bce:	6962      	ldr	r2, [r4, #20]
 8004bd0:	1c43      	adds	r3, r0, #1
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d004      	beq.n	8004be0 <__swbuf_r+0x6e>
 8004bd6:	89a3      	ldrh	r3, [r4, #12]
 8004bd8:	07db      	lsls	r3, r3, #31
 8004bda:	d5e1      	bpl.n	8004ba0 <__swbuf_r+0x2e>
 8004bdc:	2e0a      	cmp	r6, #10
 8004bde:	d1df      	bne.n	8004ba0 <__swbuf_r+0x2e>
 8004be0:	4621      	mov	r1, r4
 8004be2:	4628      	mov	r0, r5
 8004be4:	f000 fa52 	bl	800508c <_fflush_r>
 8004be8:	2800      	cmp	r0, #0
 8004bea:	d0d9      	beq.n	8004ba0 <__swbuf_r+0x2e>
 8004bec:	e7d6      	b.n	8004b9c <__swbuf_r+0x2a>
	...

08004bf0 <__swsetup_r>:
 8004bf0:	b538      	push	{r3, r4, r5, lr}
 8004bf2:	4b29      	ldr	r3, [pc, #164]	@ (8004c98 <__swsetup_r+0xa8>)
 8004bf4:	4605      	mov	r5, r0
 8004bf6:	6818      	ldr	r0, [r3, #0]
 8004bf8:	460c      	mov	r4, r1
 8004bfa:	b118      	cbz	r0, 8004c04 <__swsetup_r+0x14>
 8004bfc:	6a03      	ldr	r3, [r0, #32]
 8004bfe:	b90b      	cbnz	r3, 8004c04 <__swsetup_r+0x14>
 8004c00:	f7ff fee0 	bl	80049c4 <__sinit>
 8004c04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c08:	0719      	lsls	r1, r3, #28
 8004c0a:	d422      	bmi.n	8004c52 <__swsetup_r+0x62>
 8004c0c:	06da      	lsls	r2, r3, #27
 8004c0e:	d407      	bmi.n	8004c20 <__swsetup_r+0x30>
 8004c10:	2209      	movs	r2, #9
 8004c12:	602a      	str	r2, [r5, #0]
 8004c14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c18:	81a3      	strh	r3, [r4, #12]
 8004c1a:	f04f 30ff 	mov.w	r0, #4294967295
 8004c1e:	e033      	b.n	8004c88 <__swsetup_r+0x98>
 8004c20:	0758      	lsls	r0, r3, #29
 8004c22:	d512      	bpl.n	8004c4a <__swsetup_r+0x5a>
 8004c24:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004c26:	b141      	cbz	r1, 8004c3a <__swsetup_r+0x4a>
 8004c28:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004c2c:	4299      	cmp	r1, r3
 8004c2e:	d002      	beq.n	8004c36 <__swsetup_r+0x46>
 8004c30:	4628      	mov	r0, r5
 8004c32:	f000 f8af 	bl	8004d94 <_free_r>
 8004c36:	2300      	movs	r3, #0
 8004c38:	6363      	str	r3, [r4, #52]	@ 0x34
 8004c3a:	89a3      	ldrh	r3, [r4, #12]
 8004c3c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004c40:	81a3      	strh	r3, [r4, #12]
 8004c42:	2300      	movs	r3, #0
 8004c44:	6063      	str	r3, [r4, #4]
 8004c46:	6923      	ldr	r3, [r4, #16]
 8004c48:	6023      	str	r3, [r4, #0]
 8004c4a:	89a3      	ldrh	r3, [r4, #12]
 8004c4c:	f043 0308 	orr.w	r3, r3, #8
 8004c50:	81a3      	strh	r3, [r4, #12]
 8004c52:	6923      	ldr	r3, [r4, #16]
 8004c54:	b94b      	cbnz	r3, 8004c6a <__swsetup_r+0x7a>
 8004c56:	89a3      	ldrh	r3, [r4, #12]
 8004c58:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004c5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c60:	d003      	beq.n	8004c6a <__swsetup_r+0x7a>
 8004c62:	4621      	mov	r1, r4
 8004c64:	4628      	mov	r0, r5
 8004c66:	f000 fa5f 	bl	8005128 <__smakebuf_r>
 8004c6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c6e:	f013 0201 	ands.w	r2, r3, #1
 8004c72:	d00a      	beq.n	8004c8a <__swsetup_r+0x9a>
 8004c74:	2200      	movs	r2, #0
 8004c76:	60a2      	str	r2, [r4, #8]
 8004c78:	6962      	ldr	r2, [r4, #20]
 8004c7a:	4252      	negs	r2, r2
 8004c7c:	61a2      	str	r2, [r4, #24]
 8004c7e:	6922      	ldr	r2, [r4, #16]
 8004c80:	b942      	cbnz	r2, 8004c94 <__swsetup_r+0xa4>
 8004c82:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004c86:	d1c5      	bne.n	8004c14 <__swsetup_r+0x24>
 8004c88:	bd38      	pop	{r3, r4, r5, pc}
 8004c8a:	0799      	lsls	r1, r3, #30
 8004c8c:	bf58      	it	pl
 8004c8e:	6962      	ldrpl	r2, [r4, #20]
 8004c90:	60a2      	str	r2, [r4, #8]
 8004c92:	e7f4      	b.n	8004c7e <__swsetup_r+0x8e>
 8004c94:	2000      	movs	r0, #0
 8004c96:	e7f7      	b.n	8004c88 <__swsetup_r+0x98>
 8004c98:	20000018 	.word	0x20000018

08004c9c <memset>:
 8004c9c:	4402      	add	r2, r0
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d100      	bne.n	8004ca6 <memset+0xa>
 8004ca4:	4770      	bx	lr
 8004ca6:	f803 1b01 	strb.w	r1, [r3], #1
 8004caa:	e7f9      	b.n	8004ca0 <memset+0x4>

08004cac <_close_r>:
 8004cac:	b538      	push	{r3, r4, r5, lr}
 8004cae:	4d06      	ldr	r5, [pc, #24]	@ (8004cc8 <_close_r+0x1c>)
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	4604      	mov	r4, r0
 8004cb4:	4608      	mov	r0, r1
 8004cb6:	602b      	str	r3, [r5, #0]
 8004cb8:	f7fc f8ff 	bl	8000eba <_close>
 8004cbc:	1c43      	adds	r3, r0, #1
 8004cbe:	d102      	bne.n	8004cc6 <_close_r+0x1a>
 8004cc0:	682b      	ldr	r3, [r5, #0]
 8004cc2:	b103      	cbz	r3, 8004cc6 <_close_r+0x1a>
 8004cc4:	6023      	str	r3, [r4, #0]
 8004cc6:	bd38      	pop	{r3, r4, r5, pc}
 8004cc8:	200003e4 	.word	0x200003e4

08004ccc <_lseek_r>:
 8004ccc:	b538      	push	{r3, r4, r5, lr}
 8004cce:	4d07      	ldr	r5, [pc, #28]	@ (8004cec <_lseek_r+0x20>)
 8004cd0:	4604      	mov	r4, r0
 8004cd2:	4608      	mov	r0, r1
 8004cd4:	4611      	mov	r1, r2
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	602a      	str	r2, [r5, #0]
 8004cda:	461a      	mov	r2, r3
 8004cdc:	f7fc f914 	bl	8000f08 <_lseek>
 8004ce0:	1c43      	adds	r3, r0, #1
 8004ce2:	d102      	bne.n	8004cea <_lseek_r+0x1e>
 8004ce4:	682b      	ldr	r3, [r5, #0]
 8004ce6:	b103      	cbz	r3, 8004cea <_lseek_r+0x1e>
 8004ce8:	6023      	str	r3, [r4, #0]
 8004cea:	bd38      	pop	{r3, r4, r5, pc}
 8004cec:	200003e4 	.word	0x200003e4

08004cf0 <_read_r>:
 8004cf0:	b538      	push	{r3, r4, r5, lr}
 8004cf2:	4d07      	ldr	r5, [pc, #28]	@ (8004d10 <_read_r+0x20>)
 8004cf4:	4604      	mov	r4, r0
 8004cf6:	4608      	mov	r0, r1
 8004cf8:	4611      	mov	r1, r2
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	602a      	str	r2, [r5, #0]
 8004cfe:	461a      	mov	r2, r3
 8004d00:	f7fc f8be 	bl	8000e80 <_read>
 8004d04:	1c43      	adds	r3, r0, #1
 8004d06:	d102      	bne.n	8004d0e <_read_r+0x1e>
 8004d08:	682b      	ldr	r3, [r5, #0]
 8004d0a:	b103      	cbz	r3, 8004d0e <_read_r+0x1e>
 8004d0c:	6023      	str	r3, [r4, #0]
 8004d0e:	bd38      	pop	{r3, r4, r5, pc}
 8004d10:	200003e4 	.word	0x200003e4

08004d14 <_write_r>:
 8004d14:	b538      	push	{r3, r4, r5, lr}
 8004d16:	4d07      	ldr	r5, [pc, #28]	@ (8004d34 <_write_r+0x20>)
 8004d18:	4604      	mov	r4, r0
 8004d1a:	4608      	mov	r0, r1
 8004d1c:	4611      	mov	r1, r2
 8004d1e:	2200      	movs	r2, #0
 8004d20:	602a      	str	r2, [r5, #0]
 8004d22:	461a      	mov	r2, r3
 8004d24:	f7fb fc00 	bl	8000528 <_write>
 8004d28:	1c43      	adds	r3, r0, #1
 8004d2a:	d102      	bne.n	8004d32 <_write_r+0x1e>
 8004d2c:	682b      	ldr	r3, [r5, #0]
 8004d2e:	b103      	cbz	r3, 8004d32 <_write_r+0x1e>
 8004d30:	6023      	str	r3, [r4, #0]
 8004d32:	bd38      	pop	{r3, r4, r5, pc}
 8004d34:	200003e4 	.word	0x200003e4

08004d38 <__errno>:
 8004d38:	4b01      	ldr	r3, [pc, #4]	@ (8004d40 <__errno+0x8>)
 8004d3a:	6818      	ldr	r0, [r3, #0]
 8004d3c:	4770      	bx	lr
 8004d3e:	bf00      	nop
 8004d40:	20000018 	.word	0x20000018

08004d44 <__libc_init_array>:
 8004d44:	b570      	push	{r4, r5, r6, lr}
 8004d46:	4d0d      	ldr	r5, [pc, #52]	@ (8004d7c <__libc_init_array+0x38>)
 8004d48:	4c0d      	ldr	r4, [pc, #52]	@ (8004d80 <__libc_init_array+0x3c>)
 8004d4a:	1b64      	subs	r4, r4, r5
 8004d4c:	10a4      	asrs	r4, r4, #2
 8004d4e:	2600      	movs	r6, #0
 8004d50:	42a6      	cmp	r6, r4
 8004d52:	d109      	bne.n	8004d68 <__libc_init_array+0x24>
 8004d54:	4d0b      	ldr	r5, [pc, #44]	@ (8004d84 <__libc_init_array+0x40>)
 8004d56:	4c0c      	ldr	r4, [pc, #48]	@ (8004d88 <__libc_init_array+0x44>)
 8004d58:	f000 fa54 	bl	8005204 <_init>
 8004d5c:	1b64      	subs	r4, r4, r5
 8004d5e:	10a4      	asrs	r4, r4, #2
 8004d60:	2600      	movs	r6, #0
 8004d62:	42a6      	cmp	r6, r4
 8004d64:	d105      	bne.n	8004d72 <__libc_init_array+0x2e>
 8004d66:	bd70      	pop	{r4, r5, r6, pc}
 8004d68:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d6c:	4798      	blx	r3
 8004d6e:	3601      	adds	r6, #1
 8004d70:	e7ee      	b.n	8004d50 <__libc_init_array+0xc>
 8004d72:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d76:	4798      	blx	r3
 8004d78:	3601      	adds	r6, #1
 8004d7a:	e7f2      	b.n	8004d62 <__libc_init_array+0x1e>
 8004d7c:	08005260 	.word	0x08005260
 8004d80:	08005260 	.word	0x08005260
 8004d84:	08005260 	.word	0x08005260
 8004d88:	08005264 	.word	0x08005264

08004d8c <__retarget_lock_init_recursive>:
 8004d8c:	4770      	bx	lr

08004d8e <__retarget_lock_acquire_recursive>:
 8004d8e:	4770      	bx	lr

08004d90 <__retarget_lock_release_recursive>:
 8004d90:	4770      	bx	lr
	...

08004d94 <_free_r>:
 8004d94:	b538      	push	{r3, r4, r5, lr}
 8004d96:	4605      	mov	r5, r0
 8004d98:	2900      	cmp	r1, #0
 8004d9a:	d041      	beq.n	8004e20 <_free_r+0x8c>
 8004d9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004da0:	1f0c      	subs	r4, r1, #4
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	bfb8      	it	lt
 8004da6:	18e4      	addlt	r4, r4, r3
 8004da8:	f000 f8e0 	bl	8004f6c <__malloc_lock>
 8004dac:	4a1d      	ldr	r2, [pc, #116]	@ (8004e24 <_free_r+0x90>)
 8004dae:	6813      	ldr	r3, [r2, #0]
 8004db0:	b933      	cbnz	r3, 8004dc0 <_free_r+0x2c>
 8004db2:	6063      	str	r3, [r4, #4]
 8004db4:	6014      	str	r4, [r2, #0]
 8004db6:	4628      	mov	r0, r5
 8004db8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004dbc:	f000 b8dc 	b.w	8004f78 <__malloc_unlock>
 8004dc0:	42a3      	cmp	r3, r4
 8004dc2:	d908      	bls.n	8004dd6 <_free_r+0x42>
 8004dc4:	6820      	ldr	r0, [r4, #0]
 8004dc6:	1821      	adds	r1, r4, r0
 8004dc8:	428b      	cmp	r3, r1
 8004dca:	bf01      	itttt	eq
 8004dcc:	6819      	ldreq	r1, [r3, #0]
 8004dce:	685b      	ldreq	r3, [r3, #4]
 8004dd0:	1809      	addeq	r1, r1, r0
 8004dd2:	6021      	streq	r1, [r4, #0]
 8004dd4:	e7ed      	b.n	8004db2 <_free_r+0x1e>
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	b10b      	cbz	r3, 8004de0 <_free_r+0x4c>
 8004ddc:	42a3      	cmp	r3, r4
 8004dde:	d9fa      	bls.n	8004dd6 <_free_r+0x42>
 8004de0:	6811      	ldr	r1, [r2, #0]
 8004de2:	1850      	adds	r0, r2, r1
 8004de4:	42a0      	cmp	r0, r4
 8004de6:	d10b      	bne.n	8004e00 <_free_r+0x6c>
 8004de8:	6820      	ldr	r0, [r4, #0]
 8004dea:	4401      	add	r1, r0
 8004dec:	1850      	adds	r0, r2, r1
 8004dee:	4283      	cmp	r3, r0
 8004df0:	6011      	str	r1, [r2, #0]
 8004df2:	d1e0      	bne.n	8004db6 <_free_r+0x22>
 8004df4:	6818      	ldr	r0, [r3, #0]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	6053      	str	r3, [r2, #4]
 8004dfa:	4408      	add	r0, r1
 8004dfc:	6010      	str	r0, [r2, #0]
 8004dfe:	e7da      	b.n	8004db6 <_free_r+0x22>
 8004e00:	d902      	bls.n	8004e08 <_free_r+0x74>
 8004e02:	230c      	movs	r3, #12
 8004e04:	602b      	str	r3, [r5, #0]
 8004e06:	e7d6      	b.n	8004db6 <_free_r+0x22>
 8004e08:	6820      	ldr	r0, [r4, #0]
 8004e0a:	1821      	adds	r1, r4, r0
 8004e0c:	428b      	cmp	r3, r1
 8004e0e:	bf04      	itt	eq
 8004e10:	6819      	ldreq	r1, [r3, #0]
 8004e12:	685b      	ldreq	r3, [r3, #4]
 8004e14:	6063      	str	r3, [r4, #4]
 8004e16:	bf04      	itt	eq
 8004e18:	1809      	addeq	r1, r1, r0
 8004e1a:	6021      	streq	r1, [r4, #0]
 8004e1c:	6054      	str	r4, [r2, #4]
 8004e1e:	e7ca      	b.n	8004db6 <_free_r+0x22>
 8004e20:	bd38      	pop	{r3, r4, r5, pc}
 8004e22:	bf00      	nop
 8004e24:	200003f0 	.word	0x200003f0

08004e28 <sbrk_aligned>:
 8004e28:	b570      	push	{r4, r5, r6, lr}
 8004e2a:	4e0f      	ldr	r6, [pc, #60]	@ (8004e68 <sbrk_aligned+0x40>)
 8004e2c:	460c      	mov	r4, r1
 8004e2e:	6831      	ldr	r1, [r6, #0]
 8004e30:	4605      	mov	r5, r0
 8004e32:	b911      	cbnz	r1, 8004e3a <sbrk_aligned+0x12>
 8004e34:	f000 f9d6 	bl	80051e4 <_sbrk_r>
 8004e38:	6030      	str	r0, [r6, #0]
 8004e3a:	4621      	mov	r1, r4
 8004e3c:	4628      	mov	r0, r5
 8004e3e:	f000 f9d1 	bl	80051e4 <_sbrk_r>
 8004e42:	1c43      	adds	r3, r0, #1
 8004e44:	d103      	bne.n	8004e4e <sbrk_aligned+0x26>
 8004e46:	f04f 34ff 	mov.w	r4, #4294967295
 8004e4a:	4620      	mov	r0, r4
 8004e4c:	bd70      	pop	{r4, r5, r6, pc}
 8004e4e:	1cc4      	adds	r4, r0, #3
 8004e50:	f024 0403 	bic.w	r4, r4, #3
 8004e54:	42a0      	cmp	r0, r4
 8004e56:	d0f8      	beq.n	8004e4a <sbrk_aligned+0x22>
 8004e58:	1a21      	subs	r1, r4, r0
 8004e5a:	4628      	mov	r0, r5
 8004e5c:	f000 f9c2 	bl	80051e4 <_sbrk_r>
 8004e60:	3001      	adds	r0, #1
 8004e62:	d1f2      	bne.n	8004e4a <sbrk_aligned+0x22>
 8004e64:	e7ef      	b.n	8004e46 <sbrk_aligned+0x1e>
 8004e66:	bf00      	nop
 8004e68:	200003ec 	.word	0x200003ec

08004e6c <_malloc_r>:
 8004e6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e70:	1ccd      	adds	r5, r1, #3
 8004e72:	f025 0503 	bic.w	r5, r5, #3
 8004e76:	3508      	adds	r5, #8
 8004e78:	2d0c      	cmp	r5, #12
 8004e7a:	bf38      	it	cc
 8004e7c:	250c      	movcc	r5, #12
 8004e7e:	2d00      	cmp	r5, #0
 8004e80:	4606      	mov	r6, r0
 8004e82:	db01      	blt.n	8004e88 <_malloc_r+0x1c>
 8004e84:	42a9      	cmp	r1, r5
 8004e86:	d904      	bls.n	8004e92 <_malloc_r+0x26>
 8004e88:	230c      	movs	r3, #12
 8004e8a:	6033      	str	r3, [r6, #0]
 8004e8c:	2000      	movs	r0, #0
 8004e8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e92:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004f68 <_malloc_r+0xfc>
 8004e96:	f000 f869 	bl	8004f6c <__malloc_lock>
 8004e9a:	f8d8 3000 	ldr.w	r3, [r8]
 8004e9e:	461c      	mov	r4, r3
 8004ea0:	bb44      	cbnz	r4, 8004ef4 <_malloc_r+0x88>
 8004ea2:	4629      	mov	r1, r5
 8004ea4:	4630      	mov	r0, r6
 8004ea6:	f7ff ffbf 	bl	8004e28 <sbrk_aligned>
 8004eaa:	1c43      	adds	r3, r0, #1
 8004eac:	4604      	mov	r4, r0
 8004eae:	d158      	bne.n	8004f62 <_malloc_r+0xf6>
 8004eb0:	f8d8 4000 	ldr.w	r4, [r8]
 8004eb4:	4627      	mov	r7, r4
 8004eb6:	2f00      	cmp	r7, #0
 8004eb8:	d143      	bne.n	8004f42 <_malloc_r+0xd6>
 8004eba:	2c00      	cmp	r4, #0
 8004ebc:	d04b      	beq.n	8004f56 <_malloc_r+0xea>
 8004ebe:	6823      	ldr	r3, [r4, #0]
 8004ec0:	4639      	mov	r1, r7
 8004ec2:	4630      	mov	r0, r6
 8004ec4:	eb04 0903 	add.w	r9, r4, r3
 8004ec8:	f000 f98c 	bl	80051e4 <_sbrk_r>
 8004ecc:	4581      	cmp	r9, r0
 8004ece:	d142      	bne.n	8004f56 <_malloc_r+0xea>
 8004ed0:	6821      	ldr	r1, [r4, #0]
 8004ed2:	1a6d      	subs	r5, r5, r1
 8004ed4:	4629      	mov	r1, r5
 8004ed6:	4630      	mov	r0, r6
 8004ed8:	f7ff ffa6 	bl	8004e28 <sbrk_aligned>
 8004edc:	3001      	adds	r0, #1
 8004ede:	d03a      	beq.n	8004f56 <_malloc_r+0xea>
 8004ee0:	6823      	ldr	r3, [r4, #0]
 8004ee2:	442b      	add	r3, r5
 8004ee4:	6023      	str	r3, [r4, #0]
 8004ee6:	f8d8 3000 	ldr.w	r3, [r8]
 8004eea:	685a      	ldr	r2, [r3, #4]
 8004eec:	bb62      	cbnz	r2, 8004f48 <_malloc_r+0xdc>
 8004eee:	f8c8 7000 	str.w	r7, [r8]
 8004ef2:	e00f      	b.n	8004f14 <_malloc_r+0xa8>
 8004ef4:	6822      	ldr	r2, [r4, #0]
 8004ef6:	1b52      	subs	r2, r2, r5
 8004ef8:	d420      	bmi.n	8004f3c <_malloc_r+0xd0>
 8004efa:	2a0b      	cmp	r2, #11
 8004efc:	d917      	bls.n	8004f2e <_malloc_r+0xc2>
 8004efe:	1961      	adds	r1, r4, r5
 8004f00:	42a3      	cmp	r3, r4
 8004f02:	6025      	str	r5, [r4, #0]
 8004f04:	bf18      	it	ne
 8004f06:	6059      	strne	r1, [r3, #4]
 8004f08:	6863      	ldr	r3, [r4, #4]
 8004f0a:	bf08      	it	eq
 8004f0c:	f8c8 1000 	streq.w	r1, [r8]
 8004f10:	5162      	str	r2, [r4, r5]
 8004f12:	604b      	str	r3, [r1, #4]
 8004f14:	4630      	mov	r0, r6
 8004f16:	f000 f82f 	bl	8004f78 <__malloc_unlock>
 8004f1a:	f104 000b 	add.w	r0, r4, #11
 8004f1e:	1d23      	adds	r3, r4, #4
 8004f20:	f020 0007 	bic.w	r0, r0, #7
 8004f24:	1ac2      	subs	r2, r0, r3
 8004f26:	bf1c      	itt	ne
 8004f28:	1a1b      	subne	r3, r3, r0
 8004f2a:	50a3      	strne	r3, [r4, r2]
 8004f2c:	e7af      	b.n	8004e8e <_malloc_r+0x22>
 8004f2e:	6862      	ldr	r2, [r4, #4]
 8004f30:	42a3      	cmp	r3, r4
 8004f32:	bf0c      	ite	eq
 8004f34:	f8c8 2000 	streq.w	r2, [r8]
 8004f38:	605a      	strne	r2, [r3, #4]
 8004f3a:	e7eb      	b.n	8004f14 <_malloc_r+0xa8>
 8004f3c:	4623      	mov	r3, r4
 8004f3e:	6864      	ldr	r4, [r4, #4]
 8004f40:	e7ae      	b.n	8004ea0 <_malloc_r+0x34>
 8004f42:	463c      	mov	r4, r7
 8004f44:	687f      	ldr	r7, [r7, #4]
 8004f46:	e7b6      	b.n	8004eb6 <_malloc_r+0x4a>
 8004f48:	461a      	mov	r2, r3
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	42a3      	cmp	r3, r4
 8004f4e:	d1fb      	bne.n	8004f48 <_malloc_r+0xdc>
 8004f50:	2300      	movs	r3, #0
 8004f52:	6053      	str	r3, [r2, #4]
 8004f54:	e7de      	b.n	8004f14 <_malloc_r+0xa8>
 8004f56:	230c      	movs	r3, #12
 8004f58:	6033      	str	r3, [r6, #0]
 8004f5a:	4630      	mov	r0, r6
 8004f5c:	f000 f80c 	bl	8004f78 <__malloc_unlock>
 8004f60:	e794      	b.n	8004e8c <_malloc_r+0x20>
 8004f62:	6005      	str	r5, [r0, #0]
 8004f64:	e7d6      	b.n	8004f14 <_malloc_r+0xa8>
 8004f66:	bf00      	nop
 8004f68:	200003f0 	.word	0x200003f0

08004f6c <__malloc_lock>:
 8004f6c:	4801      	ldr	r0, [pc, #4]	@ (8004f74 <__malloc_lock+0x8>)
 8004f6e:	f7ff bf0e 	b.w	8004d8e <__retarget_lock_acquire_recursive>
 8004f72:	bf00      	nop
 8004f74:	200003e8 	.word	0x200003e8

08004f78 <__malloc_unlock>:
 8004f78:	4801      	ldr	r0, [pc, #4]	@ (8004f80 <__malloc_unlock+0x8>)
 8004f7a:	f7ff bf09 	b.w	8004d90 <__retarget_lock_release_recursive>
 8004f7e:	bf00      	nop
 8004f80:	200003e8 	.word	0x200003e8

08004f84 <__sflush_r>:
 8004f84:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004f88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f8c:	0716      	lsls	r6, r2, #28
 8004f8e:	4605      	mov	r5, r0
 8004f90:	460c      	mov	r4, r1
 8004f92:	d454      	bmi.n	800503e <__sflush_r+0xba>
 8004f94:	684b      	ldr	r3, [r1, #4]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	dc02      	bgt.n	8004fa0 <__sflush_r+0x1c>
 8004f9a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	dd48      	ble.n	8005032 <__sflush_r+0xae>
 8004fa0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004fa2:	2e00      	cmp	r6, #0
 8004fa4:	d045      	beq.n	8005032 <__sflush_r+0xae>
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004fac:	682f      	ldr	r7, [r5, #0]
 8004fae:	6a21      	ldr	r1, [r4, #32]
 8004fb0:	602b      	str	r3, [r5, #0]
 8004fb2:	d030      	beq.n	8005016 <__sflush_r+0x92>
 8004fb4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004fb6:	89a3      	ldrh	r3, [r4, #12]
 8004fb8:	0759      	lsls	r1, r3, #29
 8004fba:	d505      	bpl.n	8004fc8 <__sflush_r+0x44>
 8004fbc:	6863      	ldr	r3, [r4, #4]
 8004fbe:	1ad2      	subs	r2, r2, r3
 8004fc0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004fc2:	b10b      	cbz	r3, 8004fc8 <__sflush_r+0x44>
 8004fc4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004fc6:	1ad2      	subs	r2, r2, r3
 8004fc8:	2300      	movs	r3, #0
 8004fca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004fcc:	6a21      	ldr	r1, [r4, #32]
 8004fce:	4628      	mov	r0, r5
 8004fd0:	47b0      	blx	r6
 8004fd2:	1c43      	adds	r3, r0, #1
 8004fd4:	89a3      	ldrh	r3, [r4, #12]
 8004fd6:	d106      	bne.n	8004fe6 <__sflush_r+0x62>
 8004fd8:	6829      	ldr	r1, [r5, #0]
 8004fda:	291d      	cmp	r1, #29
 8004fdc:	d82b      	bhi.n	8005036 <__sflush_r+0xb2>
 8004fde:	4a2a      	ldr	r2, [pc, #168]	@ (8005088 <__sflush_r+0x104>)
 8004fe0:	410a      	asrs	r2, r1
 8004fe2:	07d6      	lsls	r6, r2, #31
 8004fe4:	d427      	bmi.n	8005036 <__sflush_r+0xb2>
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	6062      	str	r2, [r4, #4]
 8004fea:	04d9      	lsls	r1, r3, #19
 8004fec:	6922      	ldr	r2, [r4, #16]
 8004fee:	6022      	str	r2, [r4, #0]
 8004ff0:	d504      	bpl.n	8004ffc <__sflush_r+0x78>
 8004ff2:	1c42      	adds	r2, r0, #1
 8004ff4:	d101      	bne.n	8004ffa <__sflush_r+0x76>
 8004ff6:	682b      	ldr	r3, [r5, #0]
 8004ff8:	b903      	cbnz	r3, 8004ffc <__sflush_r+0x78>
 8004ffa:	6560      	str	r0, [r4, #84]	@ 0x54
 8004ffc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004ffe:	602f      	str	r7, [r5, #0]
 8005000:	b1b9      	cbz	r1, 8005032 <__sflush_r+0xae>
 8005002:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005006:	4299      	cmp	r1, r3
 8005008:	d002      	beq.n	8005010 <__sflush_r+0x8c>
 800500a:	4628      	mov	r0, r5
 800500c:	f7ff fec2 	bl	8004d94 <_free_r>
 8005010:	2300      	movs	r3, #0
 8005012:	6363      	str	r3, [r4, #52]	@ 0x34
 8005014:	e00d      	b.n	8005032 <__sflush_r+0xae>
 8005016:	2301      	movs	r3, #1
 8005018:	4628      	mov	r0, r5
 800501a:	47b0      	blx	r6
 800501c:	4602      	mov	r2, r0
 800501e:	1c50      	adds	r0, r2, #1
 8005020:	d1c9      	bne.n	8004fb6 <__sflush_r+0x32>
 8005022:	682b      	ldr	r3, [r5, #0]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d0c6      	beq.n	8004fb6 <__sflush_r+0x32>
 8005028:	2b1d      	cmp	r3, #29
 800502a:	d001      	beq.n	8005030 <__sflush_r+0xac>
 800502c:	2b16      	cmp	r3, #22
 800502e:	d11e      	bne.n	800506e <__sflush_r+0xea>
 8005030:	602f      	str	r7, [r5, #0]
 8005032:	2000      	movs	r0, #0
 8005034:	e022      	b.n	800507c <__sflush_r+0xf8>
 8005036:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800503a:	b21b      	sxth	r3, r3
 800503c:	e01b      	b.n	8005076 <__sflush_r+0xf2>
 800503e:	690f      	ldr	r7, [r1, #16]
 8005040:	2f00      	cmp	r7, #0
 8005042:	d0f6      	beq.n	8005032 <__sflush_r+0xae>
 8005044:	0793      	lsls	r3, r2, #30
 8005046:	680e      	ldr	r6, [r1, #0]
 8005048:	bf08      	it	eq
 800504a:	694b      	ldreq	r3, [r1, #20]
 800504c:	600f      	str	r7, [r1, #0]
 800504e:	bf18      	it	ne
 8005050:	2300      	movne	r3, #0
 8005052:	eba6 0807 	sub.w	r8, r6, r7
 8005056:	608b      	str	r3, [r1, #8]
 8005058:	f1b8 0f00 	cmp.w	r8, #0
 800505c:	dde9      	ble.n	8005032 <__sflush_r+0xae>
 800505e:	6a21      	ldr	r1, [r4, #32]
 8005060:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005062:	4643      	mov	r3, r8
 8005064:	463a      	mov	r2, r7
 8005066:	4628      	mov	r0, r5
 8005068:	47b0      	blx	r6
 800506a:	2800      	cmp	r0, #0
 800506c:	dc08      	bgt.n	8005080 <__sflush_r+0xfc>
 800506e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005072:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005076:	81a3      	strh	r3, [r4, #12]
 8005078:	f04f 30ff 	mov.w	r0, #4294967295
 800507c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005080:	4407      	add	r7, r0
 8005082:	eba8 0800 	sub.w	r8, r8, r0
 8005086:	e7e7      	b.n	8005058 <__sflush_r+0xd4>
 8005088:	dfbffffe 	.word	0xdfbffffe

0800508c <_fflush_r>:
 800508c:	b538      	push	{r3, r4, r5, lr}
 800508e:	690b      	ldr	r3, [r1, #16]
 8005090:	4605      	mov	r5, r0
 8005092:	460c      	mov	r4, r1
 8005094:	b913      	cbnz	r3, 800509c <_fflush_r+0x10>
 8005096:	2500      	movs	r5, #0
 8005098:	4628      	mov	r0, r5
 800509a:	bd38      	pop	{r3, r4, r5, pc}
 800509c:	b118      	cbz	r0, 80050a6 <_fflush_r+0x1a>
 800509e:	6a03      	ldr	r3, [r0, #32]
 80050a0:	b90b      	cbnz	r3, 80050a6 <_fflush_r+0x1a>
 80050a2:	f7ff fc8f 	bl	80049c4 <__sinit>
 80050a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d0f3      	beq.n	8005096 <_fflush_r+0xa>
 80050ae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80050b0:	07d0      	lsls	r0, r2, #31
 80050b2:	d404      	bmi.n	80050be <_fflush_r+0x32>
 80050b4:	0599      	lsls	r1, r3, #22
 80050b6:	d402      	bmi.n	80050be <_fflush_r+0x32>
 80050b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80050ba:	f7ff fe68 	bl	8004d8e <__retarget_lock_acquire_recursive>
 80050be:	4628      	mov	r0, r5
 80050c0:	4621      	mov	r1, r4
 80050c2:	f7ff ff5f 	bl	8004f84 <__sflush_r>
 80050c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80050c8:	07da      	lsls	r2, r3, #31
 80050ca:	4605      	mov	r5, r0
 80050cc:	d4e4      	bmi.n	8005098 <_fflush_r+0xc>
 80050ce:	89a3      	ldrh	r3, [r4, #12]
 80050d0:	059b      	lsls	r3, r3, #22
 80050d2:	d4e1      	bmi.n	8005098 <_fflush_r+0xc>
 80050d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80050d6:	f7ff fe5b 	bl	8004d90 <__retarget_lock_release_recursive>
 80050da:	e7dd      	b.n	8005098 <_fflush_r+0xc>

080050dc <__swhatbuf_r>:
 80050dc:	b570      	push	{r4, r5, r6, lr}
 80050de:	460c      	mov	r4, r1
 80050e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050e4:	2900      	cmp	r1, #0
 80050e6:	b096      	sub	sp, #88	@ 0x58
 80050e8:	4615      	mov	r5, r2
 80050ea:	461e      	mov	r6, r3
 80050ec:	da0d      	bge.n	800510a <__swhatbuf_r+0x2e>
 80050ee:	89a3      	ldrh	r3, [r4, #12]
 80050f0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80050f4:	f04f 0100 	mov.w	r1, #0
 80050f8:	bf14      	ite	ne
 80050fa:	2340      	movne	r3, #64	@ 0x40
 80050fc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005100:	2000      	movs	r0, #0
 8005102:	6031      	str	r1, [r6, #0]
 8005104:	602b      	str	r3, [r5, #0]
 8005106:	b016      	add	sp, #88	@ 0x58
 8005108:	bd70      	pop	{r4, r5, r6, pc}
 800510a:	466a      	mov	r2, sp
 800510c:	f000 f848 	bl	80051a0 <_fstat_r>
 8005110:	2800      	cmp	r0, #0
 8005112:	dbec      	blt.n	80050ee <__swhatbuf_r+0x12>
 8005114:	9901      	ldr	r1, [sp, #4]
 8005116:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800511a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800511e:	4259      	negs	r1, r3
 8005120:	4159      	adcs	r1, r3
 8005122:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005126:	e7eb      	b.n	8005100 <__swhatbuf_r+0x24>

08005128 <__smakebuf_r>:
 8005128:	898b      	ldrh	r3, [r1, #12]
 800512a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800512c:	079d      	lsls	r5, r3, #30
 800512e:	4606      	mov	r6, r0
 8005130:	460c      	mov	r4, r1
 8005132:	d507      	bpl.n	8005144 <__smakebuf_r+0x1c>
 8005134:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005138:	6023      	str	r3, [r4, #0]
 800513a:	6123      	str	r3, [r4, #16]
 800513c:	2301      	movs	r3, #1
 800513e:	6163      	str	r3, [r4, #20]
 8005140:	b003      	add	sp, #12
 8005142:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005144:	ab01      	add	r3, sp, #4
 8005146:	466a      	mov	r2, sp
 8005148:	f7ff ffc8 	bl	80050dc <__swhatbuf_r>
 800514c:	9f00      	ldr	r7, [sp, #0]
 800514e:	4605      	mov	r5, r0
 8005150:	4639      	mov	r1, r7
 8005152:	4630      	mov	r0, r6
 8005154:	f7ff fe8a 	bl	8004e6c <_malloc_r>
 8005158:	b948      	cbnz	r0, 800516e <__smakebuf_r+0x46>
 800515a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800515e:	059a      	lsls	r2, r3, #22
 8005160:	d4ee      	bmi.n	8005140 <__smakebuf_r+0x18>
 8005162:	f023 0303 	bic.w	r3, r3, #3
 8005166:	f043 0302 	orr.w	r3, r3, #2
 800516a:	81a3      	strh	r3, [r4, #12]
 800516c:	e7e2      	b.n	8005134 <__smakebuf_r+0xc>
 800516e:	89a3      	ldrh	r3, [r4, #12]
 8005170:	6020      	str	r0, [r4, #0]
 8005172:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005176:	81a3      	strh	r3, [r4, #12]
 8005178:	9b01      	ldr	r3, [sp, #4]
 800517a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800517e:	b15b      	cbz	r3, 8005198 <__smakebuf_r+0x70>
 8005180:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005184:	4630      	mov	r0, r6
 8005186:	f000 f81d 	bl	80051c4 <_isatty_r>
 800518a:	b128      	cbz	r0, 8005198 <__smakebuf_r+0x70>
 800518c:	89a3      	ldrh	r3, [r4, #12]
 800518e:	f023 0303 	bic.w	r3, r3, #3
 8005192:	f043 0301 	orr.w	r3, r3, #1
 8005196:	81a3      	strh	r3, [r4, #12]
 8005198:	89a3      	ldrh	r3, [r4, #12]
 800519a:	431d      	orrs	r5, r3
 800519c:	81a5      	strh	r5, [r4, #12]
 800519e:	e7cf      	b.n	8005140 <__smakebuf_r+0x18>

080051a0 <_fstat_r>:
 80051a0:	b538      	push	{r3, r4, r5, lr}
 80051a2:	4d07      	ldr	r5, [pc, #28]	@ (80051c0 <_fstat_r+0x20>)
 80051a4:	2300      	movs	r3, #0
 80051a6:	4604      	mov	r4, r0
 80051a8:	4608      	mov	r0, r1
 80051aa:	4611      	mov	r1, r2
 80051ac:	602b      	str	r3, [r5, #0]
 80051ae:	f7fb fe90 	bl	8000ed2 <_fstat>
 80051b2:	1c43      	adds	r3, r0, #1
 80051b4:	d102      	bne.n	80051bc <_fstat_r+0x1c>
 80051b6:	682b      	ldr	r3, [r5, #0]
 80051b8:	b103      	cbz	r3, 80051bc <_fstat_r+0x1c>
 80051ba:	6023      	str	r3, [r4, #0]
 80051bc:	bd38      	pop	{r3, r4, r5, pc}
 80051be:	bf00      	nop
 80051c0:	200003e4 	.word	0x200003e4

080051c4 <_isatty_r>:
 80051c4:	b538      	push	{r3, r4, r5, lr}
 80051c6:	4d06      	ldr	r5, [pc, #24]	@ (80051e0 <_isatty_r+0x1c>)
 80051c8:	2300      	movs	r3, #0
 80051ca:	4604      	mov	r4, r0
 80051cc:	4608      	mov	r0, r1
 80051ce:	602b      	str	r3, [r5, #0]
 80051d0:	f7fb fe8f 	bl	8000ef2 <_isatty>
 80051d4:	1c43      	adds	r3, r0, #1
 80051d6:	d102      	bne.n	80051de <_isatty_r+0x1a>
 80051d8:	682b      	ldr	r3, [r5, #0]
 80051da:	b103      	cbz	r3, 80051de <_isatty_r+0x1a>
 80051dc:	6023      	str	r3, [r4, #0]
 80051de:	bd38      	pop	{r3, r4, r5, pc}
 80051e0:	200003e4 	.word	0x200003e4

080051e4 <_sbrk_r>:
 80051e4:	b538      	push	{r3, r4, r5, lr}
 80051e6:	4d06      	ldr	r5, [pc, #24]	@ (8005200 <_sbrk_r+0x1c>)
 80051e8:	2300      	movs	r3, #0
 80051ea:	4604      	mov	r4, r0
 80051ec:	4608      	mov	r0, r1
 80051ee:	602b      	str	r3, [r5, #0]
 80051f0:	f7fb fe98 	bl	8000f24 <_sbrk>
 80051f4:	1c43      	adds	r3, r0, #1
 80051f6:	d102      	bne.n	80051fe <_sbrk_r+0x1a>
 80051f8:	682b      	ldr	r3, [r5, #0]
 80051fa:	b103      	cbz	r3, 80051fe <_sbrk_r+0x1a>
 80051fc:	6023      	str	r3, [r4, #0]
 80051fe:	bd38      	pop	{r3, r4, r5, pc}
 8005200:	200003e4 	.word	0x200003e4

08005204 <_init>:
 8005204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005206:	bf00      	nop
 8005208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800520a:	bc08      	pop	{r3}
 800520c:	469e      	mov	lr, r3
 800520e:	4770      	bx	lr

08005210 <_fini>:
 8005210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005212:	bf00      	nop
 8005214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005216:	bc08      	pop	{r3}
 8005218:	469e      	mov	lr, r3
 800521a:	4770      	bx	lr
