
Seminar2_drugi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064b8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08006640  08006640  00007640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800667c  0800667c  00008068  2**0
                  CONTENTS
  4 .ARM          00000008  0800667c  0800667c  0000767c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006684  08006684  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006684  08006684  00007684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006688  08006688  00007688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800668c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008068  2**0
                  CONTENTS
 10 .bss          00000424  20000068  20000068  00008068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000048c  2000048c  00008068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001120b  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000024df  00000000  00000000  000192a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010a8  00000000  00000000  0001b788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d02  00000000  00000000  0001c830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002276f  00000000  00000000  0001d532  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012319  00000000  00000000  0003fca1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1705  00000000  00000000  00051fba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001236bf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004d2c  00000000  00000000  00123704  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005c  00000000  00000000  00128430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000068 	.word	0x20000068
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006628 	.word	0x08006628

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000006c 	.word	0x2000006c
 80001c4:	08006628 	.word	0x08006628

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <napraviPoruku>:
extern CAN_HandleTypeDef hcan1;
extern CAN_TxHeaderTypeDef TxHeader;
extern uint8_t txData[8];
extern uint32_t TxMailbox[3];

void napraviPoruku(CAN_TxHeaderTypeDef *TxHeader,uint32_t broj) {
 80004b8:	b480      	push	{r7}
 80004ba:	b083      	sub	sp, #12
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
 80004c0:	6039      	str	r1, [r7, #0]

	 TxHeader -> StdId = broj;
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	683a      	ldr	r2, [r7, #0]
 80004c6:	601a      	str	r2, [r3, #0]
	 TxHeader -> ExtId = 0;
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	2200      	movs	r2, #0
 80004cc:	605a      	str	r2, [r3, #4]
	 TxHeader ->IDE = 0;
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	2200      	movs	r2, #0
 80004d2:	609a      	str	r2, [r3, #8]
	 TxHeader -> RTR = 0;
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	2200      	movs	r2, #0
 80004d8:	60da      	str	r2, [r3, #12]
	 TxHeader -> DLC = 8;
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	2208      	movs	r2, #8
 80004de:	611a      	str	r2, [r3, #16]


}
 80004e0:	bf00      	nop
 80004e2:	370c      	adds	r7, #12
 80004e4:	46bd      	mov	sp, r7
 80004e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ea:	4770      	bx	lr

080004ec <posaljiPoruku>:
void posaljiPoruku (CAN_TxHeaderTypeDef *TxHeader,uint8_t brojMailboxa) {
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
 80004f4:	460b      	mov	r3, r1
 80004f6:	70fb      	strb	r3, [r7, #3]

	if(HAL_CAN_AddTxMessage(&hcan1, TxHeader, txData, &TxMailbox[brojMailboxa]) != HAL_OK) {
 80004f8:	78fb      	ldrb	r3, [r7, #3]
 80004fa:	009b      	lsls	r3, r3, #2
 80004fc:	4a07      	ldr	r2, [pc, #28]	@ (800051c <posaljiPoruku+0x30>)
 80004fe:	4413      	add	r3, r2
 8000500:	4a07      	ldr	r2, [pc, #28]	@ (8000520 <posaljiPoruku+0x34>)
 8000502:	6879      	ldr	r1, [r7, #4]
 8000504:	4807      	ldr	r0, [pc, #28]	@ (8000524 <posaljiPoruku+0x38>)
 8000506:	f001 fad3 	bl	8001ab0 <HAL_CAN_AddTxMessage>
 800050a:	4603      	mov	r3, r0
 800050c:	2b00      	cmp	r3, #0
 800050e:	d001      	beq.n	8000514 <posaljiPoruku+0x28>
		Error_Handler();
 8000510:	f000 fd2c 	bl	8000f6c <Error_Handler>
	};

}
 8000514:	bf00      	nop
 8000516:	3708      	adds	r7, #8
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}
 800051c:	2000032c 	.word	0x2000032c
 8000520:	20000318 	.word	0x20000318
 8000524:	20000144 	.word	0x20000144

08000528 <MEMS_Write>:
#define LIS302DL_FF_WU_SRC1_REG_ADDR         0x31
#define LIS302DL_FF_WU_THS1_REG_ADDR         0x32
#define LIS302DL_FF_WU_DURATION1_REG_ADDR    0x33

//Funkcija za pisanje na senzor
void MEMS_Write(uint8_t address, uint8_t data){
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	4603      	mov	r3, r0
 8000530:	460a      	mov	r2, r1
 8000532:	71fb      	strb	r3, [r7, #7]
 8000534:	4613      	mov	r3, r2
 8000536:	71bb      	strb	r3, [r7, #6]
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000538:	2200      	movs	r2, #0
 800053a:	2108      	movs	r1, #8
 800053c:	480b      	ldr	r0, [pc, #44]	@ (800056c <MEMS_Write+0x44>)
 800053e:	f002 fccb 	bl	8002ed8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1,&address,1,10);
 8000542:	1df9      	adds	r1, r7, #7
 8000544:	230a      	movs	r3, #10
 8000546:	2201      	movs	r2, #1
 8000548:	4809      	ldr	r0, [pc, #36]	@ (8000570 <MEMS_Write+0x48>)
 800054a:	f003 fa3e 	bl	80039ca <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1,&data,1,10);
 800054e:	1db9      	adds	r1, r7, #6
 8000550:	230a      	movs	r3, #10
 8000552:	2201      	movs	r2, #1
 8000554:	4806      	ldr	r0, [pc, #24]	@ (8000570 <MEMS_Write+0x48>)
 8000556:	f003 fa38 	bl	80039ca <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 800055a:	2201      	movs	r2, #1
 800055c:	2108      	movs	r1, #8
 800055e:	4803      	ldr	r0, [pc, #12]	@ (800056c <MEMS_Write+0x44>)
 8000560:	f002 fcba 	bl	8002ed8 <HAL_GPIO_WritePin>
}
 8000564:	bf00      	nop
 8000566:	3708      	adds	r7, #8
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	40021000 	.word	0x40021000
 8000570:	2000016c 	.word	0x2000016c

08000574 <MEMS_Read>:

//Funkcija za čitanje sa senzora
void MEMS_Read(uint8_t address, uint8_t *data){
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	4603      	mov	r3, r0
 800057c:	6039      	str	r1, [r7, #0]
 800057e:	71fb      	strb	r3, [r7, #7]
    address |= 0x80;
 8000580:	79fb      	ldrb	r3, [r7, #7]
 8000582:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000586:	b2db      	uxtb	r3, r3
 8000588:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3, GPIO_PIN_RESET);
 800058a:	2200      	movs	r2, #0
 800058c:	2108      	movs	r1, #8
 800058e:	480c      	ldr	r0, [pc, #48]	@ (80005c0 <MEMS_Read+0x4c>)
 8000590:	f002 fca2 	bl	8002ed8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1,&address,1,10);
 8000594:	1df9      	adds	r1, r7, #7
 8000596:	230a      	movs	r3, #10
 8000598:	2201      	movs	r2, #1
 800059a:	480a      	ldr	r0, [pc, #40]	@ (80005c4 <MEMS_Read+0x50>)
 800059c:	f003 fa15 	bl	80039ca <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1,data,1,10);
 80005a0:	230a      	movs	r3, #10
 80005a2:	2201      	movs	r2, #1
 80005a4:	6839      	ldr	r1, [r7, #0]
 80005a6:	4807      	ldr	r0, [pc, #28]	@ (80005c4 <MEMS_Read+0x50>)
 80005a8:	f003 fb52 	bl	8003c50 <HAL_SPI_Receive>
    HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3, GPIO_PIN_SET);
 80005ac:	2201      	movs	r2, #1
 80005ae:	2108      	movs	r1, #8
 80005b0:	4803      	ldr	r0, [pc, #12]	@ (80005c0 <MEMS_Read+0x4c>)
 80005b2:	f002 fc91 	bl	8002ed8 <HAL_GPIO_WritePin>
}
 80005b6:	bf00      	nop
 80005b8:	3708      	adds	r7, #8
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	40021000 	.word	0x40021000
 80005c4:	2000016c 	.word	0x2000016c

080005c8 <_write>:
void MEMS_Read(uint8_t address, uint8_t *data);
void upaliLED1(void);
void upaliLED2(void);
void posaljiPodatkeSaSenzora(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b084      	sub	sp, #16
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	60f8      	str	r0, [r7, #12]
 80005d0:	60b9      	str	r1, [r7, #8]
 80005d2:	607a      	str	r2, [r7, #4]

	HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	b29a      	uxth	r2, r3
 80005d8:	f04f 33ff 	mov.w	r3, #4294967295
 80005dc:	68b9      	ldr	r1, [r7, #8]
 80005de:	4804      	ldr	r0, [pc, #16]	@ (80005f0 <_write+0x28>)
 80005e0:	f004 ffba 	bl	8005558 <HAL_UART_Transmit>
	return len;
 80005e4:	687b      	ldr	r3, [r7, #4]
}
 80005e6:	4618      	mov	r0, r3
 80005e8:	3710      	adds	r7, #16
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	200002b4 	.word	0x200002b4

080005f4 <HAL_CAN_RxFifo0MsgPendingCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]

	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, rxData);
 80005fc:	4b04      	ldr	r3, [pc, #16]	@ (8000610 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>)
 80005fe:	4a05      	ldr	r2, [pc, #20]	@ (8000614 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>)
 8000600:	2100      	movs	r1, #0
 8000602:	6878      	ldr	r0, [r7, #4]
 8000604:	f001 fb59 	bl	8001cba <HAL_CAN_GetRxMessage>
//	TIM1->CCR1 = 121;
//	printf("Desno\r\n");
//	HAL_Delay(500);

}
 8000608:	bf00      	nop
 800060a:	3708      	adds	r7, #8
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	20000320 	.word	0x20000320
 8000614:	200002fc 	.word	0x200002fc

08000618 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800061c:	f000 ffb6 	bl	800158c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000620:	f000 f9a2 	bl	8000968 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000624:	f000 fc02 	bl	8000e2c <MX_GPIO_Init>
	MX_DMA_Init();
 8000628:	f000 fbe0 	bl	8000dec <MX_DMA_Init>
	MX_TIM1_Init();
 800062c:	f000 fa9a 	bl	8000b64 <MX_TIM1_Init>
	MX_CAN1_Init();
 8000630:	f000 fa04 	bl	8000a3c <MX_CAN1_Init>
	MX_USART2_UART_Init();
 8000634:	f000 fbb0 	bl	8000d98 <MX_USART2_UART_Init>
	MX_SPI1_Init();
 8000638:	f000 fa5a 	bl	8000af0 <MX_SPI1_Init>
	MX_TIM2_Init();
 800063c:	f000 fb34 	bl	8000ca8 <MX_TIM2_Init>

	//  gotovo = HAL_NVIC_GetPriorityGrouping();
	//  HAL_NVIC_GetPriority(SysTick_IRQn, 3, &preemp, &subprio);
	//  HAL_NVIC_GetPriority(CAN1_RX0_IRQn, 3, &preemp, &subprio);

	konfigurirajPoruke();
 8000640:	f000 f956 	bl	80008f0 <konfigurirajPoruke>

	HAL_CAN_Start(&hcan1);
 8000644:	4820      	ldr	r0, [pc, #128]	@ (80006c8 <main+0xb0>)
 8000646:	f001 f9ef 	bl	8001a28 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 800064a:	2102      	movs	r1, #2
 800064c:	481e      	ldr	r0, [pc, #120]	@ (80006c8 <main+0xb0>)
 800064e:	f001 fc56 	bl	8001efe <HAL_CAN_ActivateNotification>

	TIM1->CCR1 = 88;
 8000652:	4b1e      	ldr	r3, [pc, #120]	@ (80006cc <main+0xb4>)
 8000654:	2258      	movs	r2, #88	@ 0x58
 8000656:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000658:	2100      	movs	r1, #0
 800065a:	481d      	ldr	r0, [pc, #116]	@ (80006d0 <main+0xb8>)
 800065c:	f004 f894 	bl	8004788 <HAL_TIM_PWM_Start>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000660:	b672      	cpsid	i
}
 8000662:	bf00      	nop
	//posaljiPoruku(&masterdrugaPoruka, 0);
	while (1) {

		do {
			__disable_irq();
			switch (RxHeader.StdId) {
 8000664:	4b1b      	ldr	r3, [pc, #108]	@ (80006d4 <main+0xbc>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f5a3 63e0 	sub.w	r3, r3, #1792	@ 0x700
 800066c:	2b03      	cmp	r3, #3
 800066e:	d823      	bhi.n	80006b8 <main+0xa0>
 8000670:	a201      	add	r2, pc, #4	@ (adr r2, 8000678 <main+0x60>)
 8000672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000676:	bf00      	nop
 8000678:	08000689 	.word	0x08000689
 800067c:	08000695 	.word	0x08000695
 8000680:	080006a1 	.word	0x080006a1
 8000684:	080006ad 	.word	0x080006ad

			case 0x700:
				vrtiServoMotor();
 8000688:	f000 f8a0 	bl	80007cc <vrtiServoMotor>
				posaljiPorukuUSlobodanMailbox(&prvaPoruka);
 800068c:	4812      	ldr	r0, [pc, #72]	@ (80006d8 <main+0xc0>)
 800068e:	f000 f84b 	bl	8000728 <posaljiPorukuUSlobodanMailbox>
				break;
 8000692:	e011      	b.n	80006b8 <main+0xa0>

			case 0x701:
				upaliLED1();
 8000694:	f000 f8c4 	bl	8000820 <upaliLED1>
				posaljiPorukuUSlobodanMailbox(&drugaPoruka);
 8000698:	4810      	ldr	r0, [pc, #64]	@ (80006dc <main+0xc4>)
 800069a:	f000 f845 	bl	8000728 <posaljiPorukuUSlobodanMailbox>
				break;
 800069e:	e00b      	b.n	80006b8 <main+0xa0>

			case 0x702:
				upaliLED2();
 80006a0:	f000 f8de 	bl	8000860 <upaliLED2>
				posaljiPorukuUSlobodanMailbox(&trecaPoruka);
 80006a4:	480e      	ldr	r0, [pc, #56]	@ (80006e0 <main+0xc8>)
 80006a6:	f000 f83f 	bl	8000728 <posaljiPorukuUSlobodanMailbox>
				break;
 80006aa:	e005      	b.n	80006b8 <main+0xa0>

			case 0x703:
				posaljiPodatkeSaSenzora();
 80006ac:	f000 f8f8 	bl	80008a0 <posaljiPodatkeSaSenzora>
				posaljiPorukuUSlobodanMailbox(&cetvrtaPoruka);
 80006b0:	480c      	ldr	r0, [pc, #48]	@ (80006e4 <main+0xcc>)
 80006b2:	f000 f839 	bl	8000728 <posaljiPorukuUSlobodanMailbox>
				break;
 80006b6:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 80006b8:	b662      	cpsie	i
}
 80006ba:	bf00      	nop
			}

			__enable_irq();

		} while (HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) > 0);
 80006bc:	4802      	ldr	r0, [pc, #8]	@ (80006c8 <main+0xb0>)
 80006be:	f001 fac7 	bl	8001c50 <HAL_CAN_GetTxMailboxesFreeLevel>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	e7cb      	b.n	8000660 <main+0x48>
 80006c8:	20000144 	.word	0x20000144
 80006cc:	40010000 	.word	0x40010000
 80006d0:	200001c4 	.word	0x200001c4
 80006d4:	200002fc 	.word	0x200002fc
 80006d8:	20000084 	.word	0x20000084
 80006dc:	2000009c 	.word	0x2000009c
 80006e0:	200000b4 	.word	0x200000b4
 80006e4:	200000cc 	.word	0x200000cc

080006e8 <myDelay>:

	}
}

void myDelay(uint32_t t) {
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]

	HAL_TIM_Base_Start(&htim2);
 80006f0:	480c      	ldr	r0, [pc, #48]	@ (8000724 <myDelay+0x3c>)
 80006f2:	f003 ff07 	bl	8004504 <HAL_TIM_Base_Start>
	while ((htim2.Instance->CNT) < (t * 100) - 1)
 80006f6:	bf00      	nop
 80006f8:	4b0a      	ldr	r3, [pc, #40]	@ (8000724 <myDelay+0x3c>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	2164      	movs	r1, #100	@ 0x64
 8000702:	fb01 f303 	mul.w	r3, r1, r3
 8000706:	3b01      	subs	r3, #1
 8000708:	429a      	cmp	r2, r3
 800070a:	d3f5      	bcc.n	80006f8 <myDelay+0x10>
		;
	HAL_TIM_Base_Stop(&htim2);
 800070c:	4805      	ldr	r0, [pc, #20]	@ (8000724 <myDelay+0x3c>)
 800070e:	f003 ff61 	bl	80045d4 <HAL_TIM_Base_Stop>
	htim2.Instance->CNT = 0;
 8000712:	4b04      	ldr	r3, [pc, #16]	@ (8000724 <myDelay+0x3c>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	2200      	movs	r2, #0
 8000718:	625a      	str	r2, [r3, #36]	@ 0x24

}
 800071a:	bf00      	nop
 800071c:	3708      	adds	r7, #8
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	2000020c 	.word	0x2000020c

08000728 <posaljiPorukuUSlobodanMailbox>:

void posaljiPorukuUSlobodanMailbox(CAN_TxHeaderTypeDef *poruka) {
 8000728:	b580      	push	{r7, lr}
 800072a:	b084      	sub	sp, #16
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
	uint32_t statusMailbox = hcan1.Instance->TSR;
 8000730:	4b25      	ldr	r3, [pc, #148]	@ (80007c8 <posaljiPorukuUSlobodanMailbox+0xa0>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	689b      	ldr	r3, [r3, #8]
 8000736:	60bb      	str	r3, [r7, #8]
	uint32_t stanje = ((statusMailbox & (7 << 26)) >> 26);
 8000738:	68bb      	ldr	r3, [r7, #8]
 800073a:	0e9b      	lsrs	r3, r3, #26
 800073c:	f003 0307 	and.w	r3, r3, #7
 8000740:	60fb      	str	r3, [r7, #12]

	do {

		switch (stanje) {
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	3b01      	subs	r3, #1
 8000746:	2b06      	cmp	r3, #6
 8000748:	d833      	bhi.n	80007b2 <posaljiPorukuUSlobodanMailbox+0x8a>
 800074a:	a201      	add	r2, pc, #4	@ (adr r2, 8000750 <posaljiPorukuUSlobodanMailbox+0x28>)
 800074c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000750:	0800076d 	.word	0x0800076d
 8000754:	08000777 	.word	0x08000777
 8000758:	08000781 	.word	0x08000781
 800075c:	0800078b 	.word	0x0800078b
 8000760:	08000795 	.word	0x08000795
 8000764:	0800079f 	.word	0x0800079f
 8000768:	080007a9 	.word	0x080007a9

		case 1:
			posaljiPoruku(poruka, 0);
 800076c:	2100      	movs	r1, #0
 800076e:	6878      	ldr	r0, [r7, #4]
 8000770:	f7ff febc 	bl	80004ec <posaljiPoruku>
			break;
 8000774:	e01d      	b.n	80007b2 <posaljiPorukuUSlobodanMailbox+0x8a>

		case 2:
			posaljiPoruku(poruka, 1);
 8000776:	2101      	movs	r1, #1
 8000778:	6878      	ldr	r0, [r7, #4]
 800077a:	f7ff feb7 	bl	80004ec <posaljiPoruku>
			break;
 800077e:	e018      	b.n	80007b2 <posaljiPorukuUSlobodanMailbox+0x8a>

		case 3:
			posaljiPoruku(poruka, 0);
 8000780:	2100      	movs	r1, #0
 8000782:	6878      	ldr	r0, [r7, #4]
 8000784:	f7ff feb2 	bl	80004ec <posaljiPoruku>
			break;
 8000788:	e013      	b.n	80007b2 <posaljiPorukuUSlobodanMailbox+0x8a>
		case 4:
			posaljiPoruku(poruka, 2);
 800078a:	2102      	movs	r1, #2
 800078c:	6878      	ldr	r0, [r7, #4]
 800078e:	f7ff fead 	bl	80004ec <posaljiPoruku>
			break;
 8000792:	e00e      	b.n	80007b2 <posaljiPorukuUSlobodanMailbox+0x8a>
		case 5:
			posaljiPoruku(poruka, 2);
 8000794:	2102      	movs	r1, #2
 8000796:	6878      	ldr	r0, [r7, #4]
 8000798:	f7ff fea8 	bl	80004ec <posaljiPoruku>
			break;
 800079c:	e009      	b.n	80007b2 <posaljiPorukuUSlobodanMailbox+0x8a>

		case 6:
			posaljiPoruku(poruka, 1);
 800079e:	2101      	movs	r1, #1
 80007a0:	6878      	ldr	r0, [r7, #4]
 80007a2:	f7ff fea3 	bl	80004ec <posaljiPoruku>
			break;
 80007a6:	e004      	b.n	80007b2 <posaljiPorukuUSlobodanMailbox+0x8a>
		case 7:
			posaljiPoruku(poruka, 0);
 80007a8:	2100      	movs	r1, #0
 80007aa:	6878      	ldr	r0, [r7, #4]
 80007ac:	f7ff fe9e 	bl	80004ec <posaljiPoruku>
			break;
 80007b0:	bf00      	nop
		}
		stanje -= stanje;
 80007b2:	2300      	movs	r3, #0
 80007b4:	60fb      	str	r3, [r7, #12]
	} while (stanje);
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d1c2      	bne.n	8000742 <posaljiPorukuUSlobodanMailbox+0x1a>

}
 80007bc:	bf00      	nop
 80007be:	bf00      	nop
 80007c0:	3710      	adds	r7, #16
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	20000144 	.word	0x20000144

080007cc <vrtiServoMotor>:

	void vrtiServoMotor(void) {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0

		TIM1->CCR1 = 88;
 80007d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000810 <vrtiServoMotor+0x44>)
 80007d2:	2258      	movs	r2, #88	@ 0x58
 80007d4:	635a      	str	r2, [r3, #52]	@ 0x34
		printf("Sredina\r\n");
 80007d6:	480f      	ldr	r0, [pc, #60]	@ (8000814 <vrtiServoMotor+0x48>)
 80007d8:	f005 fb92 	bl	8005f00 <puts>
		myDelay(500);
 80007dc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80007e0:	f7ff ff82 	bl	80006e8 <myDelay>
		TIM1->CCR1 = 55;
 80007e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000810 <vrtiServoMotor+0x44>)
 80007e6:	2237      	movs	r2, #55	@ 0x37
 80007e8:	635a      	str	r2, [r3, #52]	@ 0x34
		printf("Lijevo\r\n");
 80007ea:	480b      	ldr	r0, [pc, #44]	@ (8000818 <vrtiServoMotor+0x4c>)
 80007ec:	f005 fb88 	bl	8005f00 <puts>
		myDelay(500);
 80007f0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80007f4:	f7ff ff78 	bl	80006e8 <myDelay>
		TIM1->CCR1 = 121;
 80007f8:	4b05      	ldr	r3, [pc, #20]	@ (8000810 <vrtiServoMotor+0x44>)
 80007fa:	2279      	movs	r2, #121	@ 0x79
 80007fc:	635a      	str	r2, [r3, #52]	@ 0x34
		printf("Desno\r\n");
 80007fe:	4807      	ldr	r0, [pc, #28]	@ (800081c <vrtiServoMotor+0x50>)
 8000800:	f005 fb7e 	bl	8005f00 <puts>
		myDelay(500);
 8000804:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000808:	f7ff ff6e 	bl	80006e8 <myDelay>

	}
 800080c:	bf00      	nop
 800080e:	bd80      	pop	{r7, pc}
 8000810:	40010000 	.word	0x40010000
 8000814:	08006640 	.word	0x08006640
 8000818:	0800664c 	.word	0x0800664c
 800081c:	08006654 	.word	0x08006654

08000820 <upaliLED1>:

	void upaliLED1(void) {
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0

		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000824:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000828:	480a      	ldr	r0, [pc, #40]	@ (8000854 <upaliLED1+0x34>)
 800082a:	f002 fb6e 	bl	8002f0a <HAL_GPIO_TogglePin>
		myDelay((rxData[0] * 1000) / 255);
 800082e:	4b0a      	ldr	r3, [pc, #40]	@ (8000858 <upaliLED1+0x38>)
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	461a      	mov	r2, r3
 8000834:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000838:	fb02 f303 	mul.w	r3, r2, r3
 800083c:	4a07      	ldr	r2, [pc, #28]	@ (800085c <upaliLED1+0x3c>)
 800083e:	fb82 1203 	smull	r1, r2, r2, r3
 8000842:	441a      	add	r2, r3
 8000844:	11d2      	asrs	r2, r2, #7
 8000846:	17db      	asrs	r3, r3, #31
 8000848:	1ad3      	subs	r3, r2, r3
 800084a:	4618      	mov	r0, r3
 800084c:	f7ff ff4c 	bl	80006e8 <myDelay>

	}
 8000850:	bf00      	nop
 8000852:	bd80      	pop	{r7, pc}
 8000854:	40020c00 	.word	0x40020c00
 8000858:	20000320 	.word	0x20000320
 800085c:	80808081 	.word	0x80808081

08000860 <upaliLED2>:

	void upaliLED2(void) {
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0

		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000864:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000868:	480a      	ldr	r0, [pc, #40]	@ (8000894 <upaliLED2+0x34>)
 800086a:	f002 fb4e 	bl	8002f0a <HAL_GPIO_TogglePin>
		myDelay((rxData[0] * 1000) / 255);
 800086e:	4b0a      	ldr	r3, [pc, #40]	@ (8000898 <upaliLED2+0x38>)
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	461a      	mov	r2, r3
 8000874:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000878:	fb02 f303 	mul.w	r3, r2, r3
 800087c:	4a07      	ldr	r2, [pc, #28]	@ (800089c <upaliLED2+0x3c>)
 800087e:	fb82 1203 	smull	r1, r2, r2, r3
 8000882:	441a      	add	r2, r3
 8000884:	11d2      	asrs	r2, r2, #7
 8000886:	17db      	asrs	r3, r3, #31
 8000888:	1ad3      	subs	r3, r2, r3
 800088a:	4618      	mov	r0, r3
 800088c:	f7ff ff2c 	bl	80006e8 <myDelay>

	}
 8000890:	bf00      	nop
 8000892:	bd80      	pop	{r7, pc}
 8000894:	40020c00 	.word	0x40020c00
 8000898:	20000320 	.word	0x20000320
 800089c:	80808081 	.word	0x80808081

080008a0 <posaljiPodatkeSaSenzora>:

	void posaljiPodatkeSaSenzora(void) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0

		MEMS_Read(LIS302DL_OUT_X_ADDR, &xData);
 80008a4:	490e      	ldr	r1, [pc, #56]	@ (80008e0 <posaljiPodatkeSaSenzora+0x40>)
 80008a6:	2029      	movs	r0, #41	@ 0x29
 80008a8:	f7ff fe64 	bl	8000574 <MEMS_Read>
		MEMS_Read(LIS302DL_OUT_Y_ADDR, &yData);
 80008ac:	490d      	ldr	r1, [pc, #52]	@ (80008e4 <posaljiPodatkeSaSenzora+0x44>)
 80008ae:	202b      	movs	r0, #43	@ 0x2b
 80008b0:	f7ff fe60 	bl	8000574 <MEMS_Read>
		MEMS_Read(LIS302DL_OUT_Z_ADDR, &zData);
 80008b4:	490c      	ldr	r1, [pc, #48]	@ (80008e8 <posaljiPodatkeSaSenzora+0x48>)
 80008b6:	202d      	movs	r0, #45	@ 0x2d
 80008b8:	f7ff fe5c 	bl	8000574 <MEMS_Read>
		txData[0] = xData;
 80008bc:	4b08      	ldr	r3, [pc, #32]	@ (80008e0 <posaljiPodatkeSaSenzora+0x40>)
 80008be:	781a      	ldrb	r2, [r3, #0]
 80008c0:	4b0a      	ldr	r3, [pc, #40]	@ (80008ec <posaljiPodatkeSaSenzora+0x4c>)
 80008c2:	701a      	strb	r2, [r3, #0]
		txData[1] = yData;
 80008c4:	4b07      	ldr	r3, [pc, #28]	@ (80008e4 <posaljiPodatkeSaSenzora+0x44>)
 80008c6:	781a      	ldrb	r2, [r3, #0]
 80008c8:	4b08      	ldr	r3, [pc, #32]	@ (80008ec <posaljiPodatkeSaSenzora+0x4c>)
 80008ca:	705a      	strb	r2, [r3, #1]
		txData[2] = zData;
 80008cc:	4b06      	ldr	r3, [pc, #24]	@ (80008e8 <posaljiPodatkeSaSenzora+0x48>)
 80008ce:	781a      	ldrb	r2, [r3, #0]
 80008d0:	4b06      	ldr	r3, [pc, #24]	@ (80008ec <posaljiPodatkeSaSenzora+0x4c>)
 80008d2:	709a      	strb	r2, [r3, #2]
		myDelay(100);
 80008d4:	2064      	movs	r0, #100	@ 0x64
 80008d6:	f7ff ff07 	bl	80006e8 <myDelay>

	}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	20000328 	.word	0x20000328
 80008e4:	20000329 	.word	0x20000329
 80008e8:	2000032a 	.word	0x2000032a
 80008ec:	20000318 	.word	0x20000318

080008f0 <konfigurirajPoruke>:
//	if(HAL_CAN_AddTxMessage(&hcan1, TxHeader, txData, &TxMailbox[brojMailboxa]) != HAL_OK) {
//		Error_Handler();
//	};
//}

	void konfigurirajPoruke(void) {
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0

		napraviPoruku(&prvaPoruka, 0x600);
 80008f4:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80008f8:	4813      	ldr	r0, [pc, #76]	@ (8000948 <konfigurirajPoruke+0x58>)
 80008fa:	f7ff fddd 	bl	80004b8 <napraviPoruku>
		napraviPoruku(&drugaPoruka, 0x601);
 80008fe:	f240 6101 	movw	r1, #1537	@ 0x601
 8000902:	4812      	ldr	r0, [pc, #72]	@ (800094c <konfigurirajPoruke+0x5c>)
 8000904:	f7ff fdd8 	bl	80004b8 <napraviPoruku>
		napraviPoruku(&trecaPoruka, 0x602);
 8000908:	f240 6102 	movw	r1, #1538	@ 0x602
 800090c:	4810      	ldr	r0, [pc, #64]	@ (8000950 <konfigurirajPoruke+0x60>)
 800090e:	f7ff fdd3 	bl	80004b8 <napraviPoruku>
		napraviPoruku(&cetvrtaPoruka, 0x603);
 8000912:	f240 6103 	movw	r1, #1539	@ 0x603
 8000916:	480f      	ldr	r0, [pc, #60]	@ (8000954 <konfigurirajPoruke+0x64>)
 8000918:	f7ff fdce 	bl	80004b8 <napraviPoruku>
		napraviPoruku(&masterprvaPoruka, 0x700);
 800091c:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8000920:	480d      	ldr	r0, [pc, #52]	@ (8000958 <konfigurirajPoruke+0x68>)
 8000922:	f7ff fdc9 	bl	80004b8 <napraviPoruku>
		napraviPoruku(&masterdrugaPoruka, 0x701);
 8000926:	f240 7101 	movw	r1, #1793	@ 0x701
 800092a:	480c      	ldr	r0, [pc, #48]	@ (800095c <konfigurirajPoruke+0x6c>)
 800092c:	f7ff fdc4 	bl	80004b8 <napraviPoruku>
		napraviPoruku(&mastertrecaPoruka, 0x702);
 8000930:	f240 7102 	movw	r1, #1794	@ 0x702
 8000934:	480a      	ldr	r0, [pc, #40]	@ (8000960 <konfigurirajPoruke+0x70>)
 8000936:	f7ff fdbf 	bl	80004b8 <napraviPoruku>
		napraviPoruku(&mastercetvrtaPoruka, 0x703);
 800093a:	f240 7103 	movw	r1, #1795	@ 0x703
 800093e:	4809      	ldr	r0, [pc, #36]	@ (8000964 <konfigurirajPoruke+0x74>)
 8000940:	f7ff fdba 	bl	80004b8 <napraviPoruku>

	}
 8000944:	bf00      	nop
 8000946:	bd80      	pop	{r7, pc}
 8000948:	20000084 	.word	0x20000084
 800094c:	2000009c 	.word	0x2000009c
 8000950:	200000b4 	.word	0x200000b4
 8000954:	200000cc 	.word	0x200000cc
 8000958:	200000e4 	.word	0x200000e4
 800095c:	200000fc 	.word	0x200000fc
 8000960:	20000114 	.word	0x20000114
 8000964:	2000012c 	.word	0x2000012c

08000968 <SystemClock_Config>:

	void SystemClock_Config(void) {
 8000968:	b580      	push	{r7, lr}
 800096a:	b094      	sub	sp, #80	@ 0x50
 800096c:	af00      	add	r7, sp, #0
		RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800096e:	f107 0320 	add.w	r3, r7, #32
 8000972:	2230      	movs	r2, #48	@ 0x30
 8000974:	2100      	movs	r1, #0
 8000976:	4618      	mov	r0, r3
 8000978:	f005 fba2 	bl	80060c0 <memset>
		RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800097c:	f107 030c 	add.w	r3, r7, #12
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]
 8000986:	609a      	str	r2, [r3, #8]
 8000988:	60da      	str	r2, [r3, #12]
 800098a:	611a      	str	r2, [r3, #16]

		/** Configure the main internal regulator output voltage
		 */
		__HAL_RCC_PWR_CLK_ENABLE();
 800098c:	2300      	movs	r3, #0
 800098e:	60bb      	str	r3, [r7, #8]
 8000990:	4b28      	ldr	r3, [pc, #160]	@ (8000a34 <SystemClock_Config+0xcc>)
 8000992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000994:	4a27      	ldr	r2, [pc, #156]	@ (8000a34 <SystemClock_Config+0xcc>)
 8000996:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800099a:	6413      	str	r3, [r2, #64]	@ 0x40
 800099c:	4b25      	ldr	r3, [pc, #148]	@ (8000a34 <SystemClock_Config+0xcc>)
 800099e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009a4:	60bb      	str	r3, [r7, #8]
 80009a6:	68bb      	ldr	r3, [r7, #8]
		__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009a8:	2300      	movs	r3, #0
 80009aa:	607b      	str	r3, [r7, #4]
 80009ac:	4b22      	ldr	r3, [pc, #136]	@ (8000a38 <SystemClock_Config+0xd0>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a21      	ldr	r2, [pc, #132]	@ (8000a38 <SystemClock_Config+0xd0>)
 80009b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009b6:	6013      	str	r3, [r2, #0]
 80009b8:	4b1f      	ldr	r3, [pc, #124]	@ (8000a38 <SystemClock_Config+0xd0>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009c0:	607b      	str	r3, [r7, #4]
 80009c2:	687b      	ldr	r3, [r7, #4]

		/** Initializes the RCC Oscillators according to the specified parameters
		 * in the RCC_OscInitTypeDef structure.
		 */
		RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009c4:	2301      	movs	r3, #1
 80009c6:	623b      	str	r3, [r7, #32]
		RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009c8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80009cc:	627b      	str	r3, [r7, #36]	@ 0x24
		RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ce:	2302      	movs	r3, #2
 80009d0:	63bb      	str	r3, [r7, #56]	@ 0x38
		RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009d2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80009d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		RCC_OscInitStruct.PLL.PLLM = 4;
 80009d8:	2304      	movs	r3, #4
 80009da:	643b      	str	r3, [r7, #64]	@ 0x40
		RCC_OscInitStruct.PLL.PLLN = 64;
 80009dc:	2340      	movs	r3, #64	@ 0x40
 80009de:	647b      	str	r3, [r7, #68]	@ 0x44
		RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009e0:	2302      	movs	r3, #2
 80009e2:	64bb      	str	r3, [r7, #72]	@ 0x48
		RCC_OscInitStruct.PLL.PLLQ = 7;
 80009e4:	2307      	movs	r3, #7
 80009e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80009e8:	f107 0320 	add.w	r3, r7, #32
 80009ec:	4618      	mov	r0, r3
 80009ee:	f002 facb 	bl	8002f88 <HAL_RCC_OscConfig>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <SystemClock_Config+0x94>
			Error_Handler();
 80009f8:	f000 fab8 	bl	8000f6c <Error_Handler>
		}

		/** Initializes the CPU, AHB and APB buses clocks
		 */
		RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80009fc:	230f      	movs	r3, #15
 80009fe:	60fb      	str	r3, [r7, #12]
				| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
		RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a00:	2302      	movs	r3, #2
 8000a02:	613b      	str	r3, [r7, #16]
		RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a04:	2300      	movs	r3, #0
 8000a06:	617b      	str	r3, [r7, #20]
		RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a08:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a0c:	61bb      	str	r3, [r7, #24]
		RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000a0e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000a12:	61fb      	str	r3, [r7, #28]

		if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2)
 8000a14:	f107 030c 	add.w	r3, r7, #12
 8000a18:	2102      	movs	r1, #2
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f002 fd2c 	bl	8003478 <HAL_RCC_ClockConfig>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <SystemClock_Config+0xc2>
				!= HAL_OK) {
			Error_Handler();
 8000a26:	f000 faa1 	bl	8000f6c <Error_Handler>
		}
	}
 8000a2a:	bf00      	nop
 8000a2c:	3750      	adds	r7, #80	@ 0x50
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40023800 	.word	0x40023800
 8000a38:	40007000 	.word	0x40007000

08000a3c <MX_CAN1_Init>:
	/**
	 * @brief CAN1 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_CAN1_Init(void) {
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b08a      	sub	sp, #40	@ 0x28
 8000a40:	af00      	add	r7, sp, #0
		/* USER CODE END CAN1_Init 0 */

		/* USER CODE BEGIN CAN1_Init 1 */

		/* USER CODE END CAN1_Init 1 */
		hcan1.Instance = CAN1;
 8000a42:	4b29      	ldr	r3, [pc, #164]	@ (8000ae8 <MX_CAN1_Init+0xac>)
 8000a44:	4a29      	ldr	r2, [pc, #164]	@ (8000aec <MX_CAN1_Init+0xb0>)
 8000a46:	601a      	str	r2, [r3, #0]
		hcan1.Init.Prescaler = 4;
 8000a48:	4b27      	ldr	r3, [pc, #156]	@ (8000ae8 <MX_CAN1_Init+0xac>)
 8000a4a:	2204      	movs	r2, #4
 8000a4c:	605a      	str	r2, [r3, #4]
		hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000a4e:	4b26      	ldr	r3, [pc, #152]	@ (8000ae8 <MX_CAN1_Init+0xac>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	609a      	str	r2, [r3, #8]
		hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a54:	4b24      	ldr	r3, [pc, #144]	@ (8000ae8 <MX_CAN1_Init+0xac>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	60da      	str	r2, [r3, #12]
		hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000a5a:	4b23      	ldr	r3, [pc, #140]	@ (8000ae8 <MX_CAN1_Init+0xac>)
 8000a5c:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 8000a60:	611a      	str	r2, [r3, #16]
		hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000a62:	4b21      	ldr	r3, [pc, #132]	@ (8000ae8 <MX_CAN1_Init+0xac>)
 8000a64:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000a68:	615a      	str	r2, [r3, #20]
		hcan1.Init.TimeTriggeredMode = DISABLE;
 8000a6a:	4b1f      	ldr	r3, [pc, #124]	@ (8000ae8 <MX_CAN1_Init+0xac>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	761a      	strb	r2, [r3, #24]
		hcan1.Init.AutoBusOff = DISABLE;
 8000a70:	4b1d      	ldr	r3, [pc, #116]	@ (8000ae8 <MX_CAN1_Init+0xac>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	765a      	strb	r2, [r3, #25]
		hcan1.Init.AutoWakeUp = DISABLE;
 8000a76:	4b1c      	ldr	r3, [pc, #112]	@ (8000ae8 <MX_CAN1_Init+0xac>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	769a      	strb	r2, [r3, #26]
		hcan1.Init.AutoRetransmission = ENABLE;
 8000a7c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ae8 <MX_CAN1_Init+0xac>)
 8000a7e:	2201      	movs	r2, #1
 8000a80:	76da      	strb	r2, [r3, #27]
		hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000a82:	4b19      	ldr	r3, [pc, #100]	@ (8000ae8 <MX_CAN1_Init+0xac>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	771a      	strb	r2, [r3, #28]
		hcan1.Init.TransmitFifoPriority = DISABLE;
 8000a88:	4b17      	ldr	r3, [pc, #92]	@ (8000ae8 <MX_CAN1_Init+0xac>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	775a      	strb	r2, [r3, #29]
		if (HAL_CAN_Init(&hcan1) != HAL_OK) {
 8000a8e:	4816      	ldr	r0, [pc, #88]	@ (8000ae8 <MX_CAN1_Init+0xac>)
 8000a90:	f000 fdee 	bl	8001670 <HAL_CAN_Init>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_CAN1_Init+0x62>
			Error_Handler();
 8000a9a:	f000 fa67 	bl	8000f6c <Error_Handler>
		}
		/* USER CODE BEGIN CAN1_Init 2 */
		CAN_FilterTypeDef filter;
		filter.FilterIdHigh = (0x600 << 5);
 8000a9e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000aa2:	603b      	str	r3, [r7, #0]
		filter.FilterIdLow = 0x0;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	607b      	str	r3, [r7, #4]
		filter.FilterMaskIdHigh = (0x600 << 5);
 8000aa8:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000aac:	60bb      	str	r3, [r7, #8]
		filter.FilterMaskIdLow = 0x0;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	60fb      	str	r3, [r7, #12]
		filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	613b      	str	r3, [r7, #16]
		filter.FilterBank = 5;
 8000ab6:	2305      	movs	r3, #5
 8000ab8:	617b      	str	r3, [r7, #20]
		filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8000aba:	2300      	movs	r3, #0
 8000abc:	61bb      	str	r3, [r7, #24]
		filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	61fb      	str	r3, [r7, #28]
		filter.FilterActivation = CAN_FILTER_ENABLE;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	623b      	str	r3, [r7, #32]
		filter.SlaveStartFilterBank = 0;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	627b      	str	r3, [r7, #36]	@ 0x24
		if (HAL_CAN_ConfigFilter(&hcan1, &filter) != HAL_OK) {
 8000aca:	463b      	mov	r3, r7
 8000acc:	4619      	mov	r1, r3
 8000ace:	4806      	ldr	r0, [pc, #24]	@ (8000ae8 <MX_CAN1_Init+0xac>)
 8000ad0:	f000 feca 	bl	8001868 <HAL_CAN_ConfigFilter>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_CAN1_Init+0xa2>

			Error_Handler();
 8000ada:	f000 fa47 	bl	8000f6c <Error_Handler>

		}
		/* USER CODE END CAN1_Init 2 */

	}
 8000ade:	bf00      	nop
 8000ae0:	3728      	adds	r7, #40	@ 0x28
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	20000144 	.word	0x20000144
 8000aec:	40006400 	.word	0x40006400

08000af0 <MX_SPI1_Init>:
	/**
	 * @brief SPI1 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_SPI1_Init(void) {
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0

		/* USER CODE BEGIN SPI1_Init 1 */

		/* USER CODE END SPI1_Init 1 */
		/* SPI1 parameter configuration*/
		hspi1.Instance = SPI1;
 8000af4:	4b19      	ldr	r3, [pc, #100]	@ (8000b5c <MX_SPI1_Init+0x6c>)
 8000af6:	4a1a      	ldr	r2, [pc, #104]	@ (8000b60 <MX_SPI1_Init+0x70>)
 8000af8:	601a      	str	r2, [r3, #0]
		hspi1.Init.Mode = SPI_MODE_MASTER;
 8000afa:	4b18      	ldr	r3, [pc, #96]	@ (8000b5c <MX_SPI1_Init+0x6c>)
 8000afc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000b00:	605a      	str	r2, [r3, #4]
		hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b02:	4b16      	ldr	r3, [pc, #88]	@ (8000b5c <MX_SPI1_Init+0x6c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	609a      	str	r2, [r3, #8]
		hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b08:	4b14      	ldr	r3, [pc, #80]	@ (8000b5c <MX_SPI1_Init+0x6c>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	60da      	str	r2, [r3, #12]
		hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b0e:	4b13      	ldr	r3, [pc, #76]	@ (8000b5c <MX_SPI1_Init+0x6c>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	611a      	str	r2, [r3, #16]
		hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b14:	4b11      	ldr	r3, [pc, #68]	@ (8000b5c <MX_SPI1_Init+0x6c>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	615a      	str	r2, [r3, #20]
		hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b1a:	4b10      	ldr	r3, [pc, #64]	@ (8000b5c <MX_SPI1_Init+0x6c>)
 8000b1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b20:	619a      	str	r2, [r3, #24]
		hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b22:	4b0e      	ldr	r3, [pc, #56]	@ (8000b5c <MX_SPI1_Init+0x6c>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	61da      	str	r2, [r3, #28]
		hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b28:	4b0c      	ldr	r3, [pc, #48]	@ (8000b5c <MX_SPI1_Init+0x6c>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	621a      	str	r2, [r3, #32]
		hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b2e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b5c <MX_SPI1_Init+0x6c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	625a      	str	r2, [r3, #36]	@ 0x24
		hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b34:	4b09      	ldr	r3, [pc, #36]	@ (8000b5c <MX_SPI1_Init+0x6c>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	629a      	str	r2, [r3, #40]	@ 0x28
		hspi1.Init.CRCPolynomial = 10;
 8000b3a:	4b08      	ldr	r3, [pc, #32]	@ (8000b5c <MX_SPI1_Init+0x6c>)
 8000b3c:	220a      	movs	r2, #10
 8000b3e:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8000b40:	4806      	ldr	r0, [pc, #24]	@ (8000b5c <MX_SPI1_Init+0x6c>)
 8000b42:	f002 feb9 	bl	80038b8 <HAL_SPI_Init>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_SPI1_Init+0x60>
			Error_Handler();
 8000b4c:	f000 fa0e 	bl	8000f6c <Error_Handler>
		}
		/* USER CODE BEGIN SPI1_Init 2 */
		//Konfiguriraj akcelerometar za čitanje podataka sa senzora
		MEMS_Write(LIS302DL_CTRL_REG1_ADDR, 0x47);
 8000b50:	2147      	movs	r1, #71	@ 0x47
 8000b52:	2020      	movs	r0, #32
 8000b54:	f7ff fce8 	bl	8000528 <MEMS_Write>

		/* USER CODE END SPI1_Init 2 */

	}
 8000b58:	bf00      	nop
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	2000016c 	.word	0x2000016c
 8000b60:	40013000 	.word	0x40013000

08000b64 <MX_TIM1_Init>:
	/**
	 * @brief TIM1 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_TIM1_Init(void) {
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b096      	sub	sp, #88	@ 0x58
 8000b68:	af00      	add	r7, sp, #0

		/* USER CODE BEGIN TIM1_Init 0 */

		/* USER CODE END TIM1_Init 0 */

		TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000b6a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000b6e:	2200      	movs	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]
 8000b72:	605a      	str	r2, [r3, #4]
 8000b74:	609a      	str	r2, [r3, #8]
 8000b76:	60da      	str	r2, [r3, #12]
		TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000b78:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]
 8000b80:	605a      	str	r2, [r3, #4]
		TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000b82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
 8000b8a:	605a      	str	r2, [r3, #4]
 8000b8c:	609a      	str	r2, [r3, #8]
 8000b8e:	60da      	str	r2, [r3, #12]
 8000b90:	611a      	str	r2, [r3, #16]
 8000b92:	615a      	str	r2, [r3, #20]
 8000b94:	619a      	str	r2, [r3, #24]
		TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8000b96:	1d3b      	adds	r3, r7, #4
 8000b98:	2220      	movs	r2, #32
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f005 fa8f 	bl	80060c0 <memset>

		/* USER CODE BEGIN TIM1_Init 1 */

		/* USER CODE END TIM1_Init 1 */
		htim1.Instance = TIM1;
 8000ba2:	4b3f      	ldr	r3, [pc, #252]	@ (8000ca0 <MX_TIM1_Init+0x13c>)
 8000ba4:	4a3f      	ldr	r2, [pc, #252]	@ (8000ca4 <MX_TIM1_Init+0x140>)
 8000ba6:	601a      	str	r2, [r3, #0]
		htim1.Init.Prescaler = 640 - 1;
 8000ba8:	4b3d      	ldr	r3, [pc, #244]	@ (8000ca0 <MX_TIM1_Init+0x13c>)
 8000baa:	f240 227f 	movw	r2, #639	@ 0x27f
 8000bae:	605a      	str	r2, [r3, #4]
		htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bb0:	4b3b      	ldr	r3, [pc, #236]	@ (8000ca0 <MX_TIM1_Init+0x13c>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	609a      	str	r2, [r3, #8]
		htim1.Init.Period = 1000 - 1;
 8000bb6:	4b3a      	ldr	r3, [pc, #232]	@ (8000ca0 <MX_TIM1_Init+0x13c>)
 8000bb8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000bbc:	60da      	str	r2, [r3, #12]
		htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bbe:	4b38      	ldr	r3, [pc, #224]	@ (8000ca0 <MX_TIM1_Init+0x13c>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	611a      	str	r2, [r3, #16]
		htim1.Init.RepetitionCounter = 0;
 8000bc4:	4b36      	ldr	r3, [pc, #216]	@ (8000ca0 <MX_TIM1_Init+0x13c>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	615a      	str	r2, [r3, #20]
		htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bca:	4b35      	ldr	r3, [pc, #212]	@ (8000ca0 <MX_TIM1_Init+0x13c>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	619a      	str	r2, [r3, #24]
		if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8000bd0:	4833      	ldr	r0, [pc, #204]	@ (8000ca0 <MX_TIM1_Init+0x13c>)
 8000bd2:	f003 fc47 	bl	8004464 <HAL_TIM_Base_Init>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_TIM1_Init+0x7c>
			Error_Handler();
 8000bdc:	f000 f9c6 	bl	8000f6c <Error_Handler>
		}
		sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000be0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000be4:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8000be6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000bea:	4619      	mov	r1, r3
 8000bec:	482c      	ldr	r0, [pc, #176]	@ (8000ca0 <MX_TIM1_Init+0x13c>)
 8000bee:	f003 ffb1 	bl	8004b54 <HAL_TIM_ConfigClockSource>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_TIM1_Init+0x98>
			Error_Handler();
 8000bf8:	f000 f9b8 	bl	8000f6c <Error_Handler>
		}
		if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8000bfc:	4828      	ldr	r0, [pc, #160]	@ (8000ca0 <MX_TIM1_Init+0x13c>)
 8000bfe:	f003 fd69 	bl	80046d4 <HAL_TIM_PWM_Init>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_TIM1_Init+0xa8>
			Error_Handler();
 8000c08:	f000 f9b0 	bl	8000f6c <Error_Handler>
		}
		sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	643b      	str	r3, [r7, #64]	@ 0x40
		sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c10:	2300      	movs	r3, #0
 8000c12:	647b      	str	r3, [r7, #68]	@ 0x44
		if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8000c14:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4821      	ldr	r0, [pc, #132]	@ (8000ca0 <MX_TIM1_Init+0x13c>)
 8000c1c:	f004 fb7e 	bl	800531c <HAL_TIMEx_MasterConfigSynchronization>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_TIM1_Init+0xc6>
				!= HAL_OK) {
			Error_Handler();
 8000c26:	f000 f9a1 	bl	8000f6c <Error_Handler>
		}
		sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c2a:	2360      	movs	r3, #96	@ 0x60
 8000c2c:	627b      	str	r3, [r7, #36]	@ 0x24
		sConfigOC.Pulse = 0;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	62bb      	str	r3, [r7, #40]	@ 0x28
		sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c32:	2300      	movs	r3, #0
 8000c34:	62fb      	str	r3, [r7, #44]	@ 0x2c
		sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c36:	2300      	movs	r3, #0
 8000c38:	633b      	str	r3, [r7, #48]	@ 0x30
		sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	637b      	str	r3, [r7, #52]	@ 0x34
		sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	63bb      	str	r3, [r7, #56]	@ 0x38
		sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c42:	2300      	movs	r3, #0
 8000c44:	63fb      	str	r3, [r7, #60]	@ 0x3c
		if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 8000c46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4814      	ldr	r0, [pc, #80]	@ (8000ca0 <MX_TIM1_Init+0x13c>)
 8000c50:	f003 febe 	bl	80049d0 <HAL_TIM_PWM_ConfigChannel>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_TIM1_Init+0xfa>
				!= HAL_OK) {
			Error_Handler();
 8000c5a:	f000 f987 	bl	8000f6c <Error_Handler>
		}
		sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	607b      	str	r3, [r7, #4]
		sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c62:	2300      	movs	r3, #0
 8000c64:	60bb      	str	r3, [r7, #8]
		sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c66:	2300      	movs	r3, #0
 8000c68:	60fb      	str	r3, [r7, #12]
		sBreakDeadTimeConfig.DeadTime = 0;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	613b      	str	r3, [r7, #16]
		sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	617b      	str	r3, [r7, #20]
		sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c72:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c76:	61bb      	str	r3, [r7, #24]
		sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	623b      	str	r3, [r7, #32]
		if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8000c7c:	1d3b      	adds	r3, r7, #4
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4807      	ldr	r0, [pc, #28]	@ (8000ca0 <MX_TIM1_Init+0x13c>)
 8000c82:	f004 fbc7 	bl	8005414 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_TIM1_Init+0x12c>
				!= HAL_OK) {
			Error_Handler();
 8000c8c:	f000 f96e 	bl	8000f6c <Error_Handler>
		}
		/* USER CODE BEGIN TIM1_Init 2 */

		/* USER CODE END TIM1_Init 2 */
		HAL_TIM_MspPostInit(&htim1);
 8000c90:	4803      	ldr	r0, [pc, #12]	@ (8000ca0 <MX_TIM1_Init+0x13c>)
 8000c92:	f000 faa9 	bl	80011e8 <HAL_TIM_MspPostInit>

	}
 8000c96:	bf00      	nop
 8000c98:	3758      	adds	r7, #88	@ 0x58
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	200001c4 	.word	0x200001c4
 8000ca4:	40010000 	.word	0x40010000

08000ca8 <MX_TIM2_Init>:
	/**
	 * @brief TIM2 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_TIM2_Init(void) {
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b08e      	sub	sp, #56	@ 0x38
 8000cac:	af00      	add	r7, sp, #0

		/* USER CODE BEGIN TIM2_Init 0 */

		/* USER CODE END TIM2_Init 0 */

		TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000cae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
 8000cb6:	605a      	str	r2, [r3, #4]
 8000cb8:	609a      	str	r2, [r3, #8]
 8000cba:	60da      	str	r2, [r3, #12]
		TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000cbc:	f107 0320 	add.w	r3, r7, #32
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
		TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000cc6:	1d3b      	adds	r3, r7, #4
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
 8000cce:	609a      	str	r2, [r3, #8]
 8000cd0:	60da      	str	r2, [r3, #12]
 8000cd2:	611a      	str	r2, [r3, #16]
 8000cd4:	615a      	str	r2, [r3, #20]
 8000cd6:	619a      	str	r2, [r3, #24]

		/* USER CODE BEGIN TIM2_Init 1 */

		/* USER CODE END TIM2_Init 1 */
		htim2.Instance = TIM2;
 8000cd8:	4b2d      	ldr	r3, [pc, #180]	@ (8000d90 <MX_TIM2_Init+0xe8>)
 8000cda:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000cde:	601a      	str	r2, [r3, #0]
		htim2.Init.Prescaler = 640 - 1;
 8000ce0:	4b2b      	ldr	r3, [pc, #172]	@ (8000d90 <MX_TIM2_Init+0xe8>)
 8000ce2:	f240 227f 	movw	r2, #639	@ 0x27f
 8000ce6:	605a      	str	r2, [r3, #4]
		htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ce8:	4b29      	ldr	r3, [pc, #164]	@ (8000d90 <MX_TIM2_Init+0xe8>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	609a      	str	r2, [r3, #8]
		htim2.Init.Period = 100000 - 1;
 8000cee:	4b28      	ldr	r3, [pc, #160]	@ (8000d90 <MX_TIM2_Init+0xe8>)
 8000cf0:	4a28      	ldr	r2, [pc, #160]	@ (8000d94 <MX_TIM2_Init+0xec>)
 8000cf2:	60da      	str	r2, [r3, #12]
		htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cf4:	4b26      	ldr	r3, [pc, #152]	@ (8000d90 <MX_TIM2_Init+0xe8>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	611a      	str	r2, [r3, #16]
		htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cfa:	4b25      	ldr	r3, [pc, #148]	@ (8000d90 <MX_TIM2_Init+0xe8>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	619a      	str	r2, [r3, #24]
		if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8000d00:	4823      	ldr	r0, [pc, #140]	@ (8000d90 <MX_TIM2_Init+0xe8>)
 8000d02:	f003 fbaf 	bl	8004464 <HAL_TIM_Base_Init>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_TIM2_Init+0x68>
			Error_Handler();
 8000d0c:	f000 f92e 	bl	8000f6c <Error_Handler>
		}
		sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d10:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d14:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8000d16:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	481c      	ldr	r0, [pc, #112]	@ (8000d90 <MX_TIM2_Init+0xe8>)
 8000d1e:	f003 ff19 	bl	8004b54 <HAL_TIM_ConfigClockSource>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <MX_TIM2_Init+0x84>
			Error_Handler();
 8000d28:	f000 f920 	bl	8000f6c <Error_Handler>
		}
		if (HAL_TIM_OC_Init(&htim2) != HAL_OK) {
 8000d2c:	4818      	ldr	r0, [pc, #96]	@ (8000d90 <MX_TIM2_Init+0xe8>)
 8000d2e:	f003 fc78 	bl	8004622 <HAL_TIM_OC_Init>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_TIM2_Init+0x94>
			Error_Handler();
 8000d38:	f000 f918 	bl	8000f6c <Error_Handler>
		}
		sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	623b      	str	r3, [r7, #32]
		sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d40:	2300      	movs	r3, #0
 8000d42:	627b      	str	r3, [r7, #36]	@ 0x24
		if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8000d44:	f107 0320 	add.w	r3, r7, #32
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4811      	ldr	r0, [pc, #68]	@ (8000d90 <MX_TIM2_Init+0xe8>)
 8000d4c:	f004 fae6 	bl	800531c <HAL_TIMEx_MasterConfigSynchronization>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_TIM2_Init+0xb2>
				!= HAL_OK) {
			Error_Handler();
 8000d56:	f000 f909 	bl	8000f6c <Error_Handler>
		}
		sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	607b      	str	r3, [r7, #4]
		sConfigOC.Pulse = 0;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	60bb      	str	r3, [r7, #8]
		sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d62:	2300      	movs	r3, #0
 8000d64:	60fb      	str	r3, [r7, #12]
		sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d66:	2300      	movs	r3, #0
 8000d68:	617b      	str	r3, [r7, #20]
		if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2)
 8000d6a:	1d3b      	adds	r3, r7, #4
 8000d6c:	2204      	movs	r2, #4
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4807      	ldr	r0, [pc, #28]	@ (8000d90 <MX_TIM2_Init+0xe8>)
 8000d72:	f003 fdd1 	bl	8004918 <HAL_TIM_OC_ConfigChannel>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_TIM2_Init+0xd8>
				!= HAL_OK) {
			Error_Handler();
 8000d7c:	f000 f8f6 	bl	8000f6c <Error_Handler>
		}
		/* USER CODE BEGIN TIM2_Init 2 */

		/* USER CODE END TIM2_Init 2 */
		HAL_TIM_MspPostInit(&htim2);
 8000d80:	4803      	ldr	r0, [pc, #12]	@ (8000d90 <MX_TIM2_Init+0xe8>)
 8000d82:	f000 fa31 	bl	80011e8 <HAL_TIM_MspPostInit>

	}
 8000d86:	bf00      	nop
 8000d88:	3738      	adds	r7, #56	@ 0x38
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	2000020c 	.word	0x2000020c
 8000d94:	0001869f 	.word	0x0001869f

08000d98 <MX_USART2_UART_Init>:
	/**
	 * @brief USART2 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_USART2_UART_Init(void) {
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
		/* USER CODE END USART2_Init 0 */

		/* USER CODE BEGIN USART2_Init 1 */

		/* USER CODE END USART2_Init 1 */
		huart2.Instance = USART2;
 8000d9c:	4b11      	ldr	r3, [pc, #68]	@ (8000de4 <MX_USART2_UART_Init+0x4c>)
 8000d9e:	4a12      	ldr	r2, [pc, #72]	@ (8000de8 <MX_USART2_UART_Init+0x50>)
 8000da0:	601a      	str	r2, [r3, #0]
		huart2.Init.BaudRate = 115200;
 8000da2:	4b10      	ldr	r3, [pc, #64]	@ (8000de4 <MX_USART2_UART_Init+0x4c>)
 8000da4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000da8:	605a      	str	r2, [r3, #4]
		huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000daa:	4b0e      	ldr	r3, [pc, #56]	@ (8000de4 <MX_USART2_UART_Init+0x4c>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	609a      	str	r2, [r3, #8]
		huart2.Init.StopBits = UART_STOPBITS_1;
 8000db0:	4b0c      	ldr	r3, [pc, #48]	@ (8000de4 <MX_USART2_UART_Init+0x4c>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	60da      	str	r2, [r3, #12]
		huart2.Init.Parity = UART_PARITY_NONE;
 8000db6:	4b0b      	ldr	r3, [pc, #44]	@ (8000de4 <MX_USART2_UART_Init+0x4c>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	611a      	str	r2, [r3, #16]
		huart2.Init.Mode = UART_MODE_TX_RX;
 8000dbc:	4b09      	ldr	r3, [pc, #36]	@ (8000de4 <MX_USART2_UART_Init+0x4c>)
 8000dbe:	220c      	movs	r2, #12
 8000dc0:	615a      	str	r2, [r3, #20]
		huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dc2:	4b08      	ldr	r3, [pc, #32]	@ (8000de4 <MX_USART2_UART_Init+0x4c>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	619a      	str	r2, [r3, #24]
		huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dc8:	4b06      	ldr	r3, [pc, #24]	@ (8000de4 <MX_USART2_UART_Init+0x4c>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	61da      	str	r2, [r3, #28]
		if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000dce:	4805      	ldr	r0, [pc, #20]	@ (8000de4 <MX_USART2_UART_Init+0x4c>)
 8000dd0:	f004 fb72 	bl	80054b8 <HAL_UART_Init>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_USART2_UART_Init+0x46>
			Error_Handler();
 8000dda:	f000 f8c7 	bl	8000f6c <Error_Handler>
		}
		/* USER CODE BEGIN USART2_Init 2 */

		/* USER CODE END USART2_Init 2 */

	}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	200002b4 	.word	0x200002b4
 8000de8:	40004400 	.word	0x40004400

08000dec <MX_DMA_Init>:

	/**
	 * Enable DMA controller clock
	 */
	static void MX_DMA_Init(void) {
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0

		/* DMA controller clock enable */
		__HAL_RCC_DMA2_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	607b      	str	r3, [r7, #4]
 8000df6:	4b0c      	ldr	r3, [pc, #48]	@ (8000e28 <MX_DMA_Init+0x3c>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dfa:	4a0b      	ldr	r2, [pc, #44]	@ (8000e28 <MX_DMA_Init+0x3c>)
 8000dfc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000e00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e02:	4b09      	ldr	r3, [pc, #36]	@ (8000e28 <MX_DMA_Init+0x3c>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000e0a:	607b      	str	r3, [r7, #4]
 8000e0c:	687b      	ldr	r3, [r7, #4]

		/* DMA interrupt init */
		/* DMA2_Stream1_IRQn interrupt configuration */
		HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000e0e:	2200      	movs	r2, #0
 8000e10:	2100      	movs	r1, #0
 8000e12:	2039      	movs	r0, #57	@ 0x39
 8000e14:	f001 fba3 	bl	800255e <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000e18:	2039      	movs	r0, #57	@ 0x39
 8000e1a:	f001 fbbc 	bl	8002596 <HAL_NVIC_EnableIRQ>

	}
 8000e1e:	bf00      	nop
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40023800 	.word	0x40023800

08000e2c <MX_GPIO_Init>:
	/**
	 * @brief GPIO Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_GPIO_Init(void) {
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b08a      	sub	sp, #40	@ 0x28
 8000e30:	af00      	add	r7, sp, #0
		GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000e32:	f107 0314 	add.w	r3, r7, #20
 8000e36:	2200      	movs	r2, #0
 8000e38:	601a      	str	r2, [r3, #0]
 8000e3a:	605a      	str	r2, [r3, #4]
 8000e3c:	609a      	str	r2, [r3, #8]
 8000e3e:	60da      	str	r2, [r3, #12]
 8000e40:	611a      	str	r2, [r3, #16]
		/* USER CODE BEGIN MX_GPIO_Init_1 */
		/* USER CODE END MX_GPIO_Init_1 */

		/* GPIO Ports Clock Enable */
		__HAL_RCC_GPIOE_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	613b      	str	r3, [r7, #16]
 8000e46:	4b46      	ldr	r3, [pc, #280]	@ (8000f60 <MX_GPIO_Init+0x134>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4a:	4a45      	ldr	r2, [pc, #276]	@ (8000f60 <MX_GPIO_Init+0x134>)
 8000e4c:	f043 0310 	orr.w	r3, r3, #16
 8000e50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e52:	4b43      	ldr	r3, [pc, #268]	@ (8000f60 <MX_GPIO_Init+0x134>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e56:	f003 0310 	and.w	r3, r3, #16
 8000e5a:	613b      	str	r3, [r7, #16]
 8000e5c:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOH_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	60fb      	str	r3, [r7, #12]
 8000e62:	4b3f      	ldr	r3, [pc, #252]	@ (8000f60 <MX_GPIO_Init+0x134>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e66:	4a3e      	ldr	r2, [pc, #248]	@ (8000f60 <MX_GPIO_Init+0x134>)
 8000e68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e6e:	4b3c      	ldr	r3, [pc, #240]	@ (8000f60 <MX_GPIO_Init+0x134>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	60bb      	str	r3, [r7, #8]
 8000e7e:	4b38      	ldr	r3, [pc, #224]	@ (8000f60 <MX_GPIO_Init+0x134>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e82:	4a37      	ldr	r2, [pc, #220]	@ (8000f60 <MX_GPIO_Init+0x134>)
 8000e84:	f043 0301 	orr.w	r3, r3, #1
 8000e88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e8a:	4b35      	ldr	r3, [pc, #212]	@ (8000f60 <MX_GPIO_Init+0x134>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8e:	f003 0301 	and.w	r3, r3, #1
 8000e92:	60bb      	str	r3, [r7, #8]
 8000e94:	68bb      	ldr	r3, [r7, #8]
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	607b      	str	r3, [r7, #4]
 8000e9a:	4b31      	ldr	r3, [pc, #196]	@ (8000f60 <MX_GPIO_Init+0x134>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e9e:	4a30      	ldr	r2, [pc, #192]	@ (8000f60 <MX_GPIO_Init+0x134>)
 8000ea0:	f043 0308 	orr.w	r3, r3, #8
 8000ea4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ea6:	4b2e      	ldr	r3, [pc, #184]	@ (8000f60 <MX_GPIO_Init+0x134>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eaa:	f003 0308 	and.w	r3, r3, #8
 8000eae:	607b      	str	r3, [r7, #4]
 8000eb0:	687b      	ldr	r3, [r7, #4]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	603b      	str	r3, [r7, #0]
 8000eb6:	4b2a      	ldr	r3, [pc, #168]	@ (8000f60 <MX_GPIO_Init+0x134>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eba:	4a29      	ldr	r2, [pc, #164]	@ (8000f60 <MX_GPIO_Init+0x134>)
 8000ebc:	f043 0302 	orr.w	r3, r3, #2
 8000ec0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ec2:	4b27      	ldr	r3, [pc, #156]	@ (8000f60 <MX_GPIO_Init+0x134>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec6:	f003 0302 	and.w	r3, r3, #2
 8000eca:	603b      	str	r3, [r7, #0]
 8000ecc:	683b      	ldr	r3, [r7, #0]

		/*Configure GPIO pin Output Level */
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8000ece:	2201      	movs	r2, #1
 8000ed0:	2108      	movs	r1, #8
 8000ed2:	4824      	ldr	r0, [pc, #144]	@ (8000f64 <MX_GPIO_Init+0x138>)
 8000ed4:	f002 f800 	bl	8002ed8 <HAL_GPIO_WritePin>

		/*Configure GPIO pin Output Level */
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_15, GPIO_PIN_RESET);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	f44f 4110 	mov.w	r1, #36864	@ 0x9000
 8000ede:	4822      	ldr	r0, [pc, #136]	@ (8000f68 <MX_GPIO_Init+0x13c>)
 8000ee0:	f001 fffa 	bl	8002ed8 <HAL_GPIO_WritePin>

		/*Configure GPIO pin : PE3 */
		GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ee4:	2308      	movs	r3, #8
 8000ee6:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	2300      	movs	r3, #0
 8000eee:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	623b      	str	r3, [r7, #32]
		HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ef4:	f107 0314 	add.w	r3, r7, #20
 8000ef8:	4619      	mov	r1, r3
 8000efa:	481a      	ldr	r0, [pc, #104]	@ (8000f64 <MX_GPIO_Init+0x138>)
 8000efc:	f001 fe50 	bl	8002ba0 <HAL_GPIO_Init>

		/*Configure GPIO pins : PD12 PD15 */
		GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_15;
 8000f00:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 8000f04:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f06:	2301      	movs	r3, #1
 8000f08:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	623b      	str	r3, [r7, #32]
		HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f12:	f107 0314 	add.w	r3, r7, #20
 8000f16:	4619      	mov	r1, r3
 8000f18:	4813      	ldr	r0, [pc, #76]	@ (8000f68 <MX_GPIO_Init+0x13c>)
 8000f1a:	f001 fe41 	bl	8002ba0 <HAL_GPIO_Init>

		/*Configure GPIO pins : PE0 PE1 */
		GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8000f1e:	2303      	movs	r3, #3
 8000f20:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f22:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f26:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f2c:	f107 0314 	add.w	r3, r7, #20
 8000f30:	4619      	mov	r1, r3
 8000f32:	480c      	ldr	r0, [pc, #48]	@ (8000f64 <MX_GPIO_Init+0x138>)
 8000f34:	f001 fe34 	bl	8002ba0 <HAL_GPIO_Init>

		/* EXTI interrupt init*/
		HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000f38:	2200      	movs	r2, #0
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	2006      	movs	r0, #6
 8000f3e:	f001 fb0e 	bl	800255e <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000f42:	2006      	movs	r0, #6
 8000f44:	f001 fb27 	bl	8002596 <HAL_NVIC_EnableIRQ>

		HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000f48:	2200      	movs	r2, #0
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	2007      	movs	r0, #7
 8000f4e:	f001 fb06 	bl	800255e <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000f52:	2007      	movs	r0, #7
 8000f54:	f001 fb1f 	bl	8002596 <HAL_NVIC_EnableIRQ>

		/* USER CODE BEGIN MX_GPIO_Init_2 */
		/* USER CODE END MX_GPIO_Init_2 */
	}
 8000f58:	bf00      	nop
 8000f5a:	3728      	adds	r7, #40	@ 0x28
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	40023800 	.word	0x40023800
 8000f64:	40021000 	.word	0x40021000
 8000f68:	40020c00 	.word	0x40020c00

08000f6c <Error_Handler>:

	/**
	 * @brief  This function is executed in case of error occurrence.
	 * @retval None
	 */
	void Error_Handler(void) {
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000f70:	b672      	cpsid	i
}
 8000f72:	bf00      	nop
		/* USER CODE BEGIN Error_Handler_Debug */
		/* User can add his own implementation to report the HAL error return state */
		__disable_irq();
		while (1) {
 8000f74:	bf00      	nop
 8000f76:	e7fd      	b.n	8000f74 <Error_Handler+0x8>

08000f78 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	607b      	str	r3, [r7, #4]
 8000f82:	4b10      	ldr	r3, [pc, #64]	@ (8000fc4 <HAL_MspInit+0x4c>)
 8000f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f86:	4a0f      	ldr	r2, [pc, #60]	@ (8000fc4 <HAL_MspInit+0x4c>)
 8000f88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f8e:	4b0d      	ldr	r3, [pc, #52]	@ (8000fc4 <HAL_MspInit+0x4c>)
 8000f90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f96:	607b      	str	r3, [r7, #4]
 8000f98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	603b      	str	r3, [r7, #0]
 8000f9e:	4b09      	ldr	r3, [pc, #36]	@ (8000fc4 <HAL_MspInit+0x4c>)
 8000fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa2:	4a08      	ldr	r2, [pc, #32]	@ (8000fc4 <HAL_MspInit+0x4c>)
 8000fa4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fa8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000faa:	4b06      	ldr	r3, [pc, #24]	@ (8000fc4 <HAL_MspInit+0x4c>)
 8000fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fb2:	603b      	str	r3, [r7, #0]
 8000fb4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000fb6:	2007      	movs	r0, #7
 8000fb8:	f001 fac6 	bl	8002548 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fbc:	bf00      	nop
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	40023800 	.word	0x40023800

08000fc8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b08a      	sub	sp, #40	@ 0x28
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd0:	f107 0314 	add.w	r3, r7, #20
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	609a      	str	r2, [r3, #8]
 8000fdc:	60da      	str	r2, [r3, #12]
 8000fde:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a25      	ldr	r2, [pc, #148]	@ (800107c <HAL_CAN_MspInit+0xb4>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d144      	bne.n	8001074 <HAL_CAN_MspInit+0xac>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	613b      	str	r3, [r7, #16]
 8000fee:	4b24      	ldr	r3, [pc, #144]	@ (8001080 <HAL_CAN_MspInit+0xb8>)
 8000ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff2:	4a23      	ldr	r2, [pc, #140]	@ (8001080 <HAL_CAN_MspInit+0xb8>)
 8000ff4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000ff8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ffa:	4b21      	ldr	r3, [pc, #132]	@ (8001080 <HAL_CAN_MspInit+0xb8>)
 8000ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ffe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001002:	613b      	str	r3, [r7, #16]
 8001004:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	60fb      	str	r3, [r7, #12]
 800100a:	4b1d      	ldr	r3, [pc, #116]	@ (8001080 <HAL_CAN_MspInit+0xb8>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800100e:	4a1c      	ldr	r2, [pc, #112]	@ (8001080 <HAL_CAN_MspInit+0xb8>)
 8001010:	f043 0302 	orr.w	r3, r3, #2
 8001014:	6313      	str	r3, [r2, #48]	@ 0x30
 8001016:	4b1a      	ldr	r3, [pc, #104]	@ (8001080 <HAL_CAN_MspInit+0xb8>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800101a:	f003 0302 	and.w	r3, r3, #2
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001022:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001026:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001028:	2302      	movs	r3, #2
 800102a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102c:	2300      	movs	r3, #0
 800102e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001030:	2303      	movs	r3, #3
 8001032:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001034:	2309      	movs	r3, #9
 8001036:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001038:	f107 0314 	add.w	r3, r7, #20
 800103c:	4619      	mov	r1, r3
 800103e:	4811      	ldr	r0, [pc, #68]	@ (8001084 <HAL_CAN_MspInit+0xbc>)
 8001040:	f001 fdae 	bl	8002ba0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8001044:	2200      	movs	r2, #0
 8001046:	2100      	movs	r1, #0
 8001048:	2013      	movs	r0, #19
 800104a:	f001 fa88 	bl	800255e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 800104e:	2013      	movs	r0, #19
 8001050:	f001 faa1 	bl	8002596 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001054:	2200      	movs	r2, #0
 8001056:	2100      	movs	r1, #0
 8001058:	2014      	movs	r0, #20
 800105a:	f001 fa80 	bl	800255e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800105e:	2014      	movs	r0, #20
 8001060:	f001 fa99 	bl	8002596 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8001064:	2200      	movs	r2, #0
 8001066:	2100      	movs	r1, #0
 8001068:	2015      	movs	r0, #21
 800106a:	f001 fa78 	bl	800255e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800106e:	2015      	movs	r0, #21
 8001070:	f001 fa91 	bl	8002596 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001074:	bf00      	nop
 8001076:	3728      	adds	r7, #40	@ 0x28
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	40006400 	.word	0x40006400
 8001080:	40023800 	.word	0x40023800
 8001084:	40020400 	.word	0x40020400

08001088 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b08a      	sub	sp, #40	@ 0x28
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001090:	f107 0314 	add.w	r3, r7, #20
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
 800109a:	609a      	str	r2, [r3, #8]
 800109c:	60da      	str	r2, [r3, #12]
 800109e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a19      	ldr	r2, [pc, #100]	@ (800110c <HAL_SPI_MspInit+0x84>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d12b      	bne.n	8001102 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010aa:	2300      	movs	r3, #0
 80010ac:	613b      	str	r3, [r7, #16]
 80010ae:	4b18      	ldr	r3, [pc, #96]	@ (8001110 <HAL_SPI_MspInit+0x88>)
 80010b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010b2:	4a17      	ldr	r2, [pc, #92]	@ (8001110 <HAL_SPI_MspInit+0x88>)
 80010b4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80010b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80010ba:	4b15      	ldr	r3, [pc, #84]	@ (8001110 <HAL_SPI_MspInit+0x88>)
 80010bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010be:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80010c2:	613b      	str	r3, [r7, #16]
 80010c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	60fb      	str	r3, [r7, #12]
 80010ca:	4b11      	ldr	r3, [pc, #68]	@ (8001110 <HAL_SPI_MspInit+0x88>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ce:	4a10      	ldr	r2, [pc, #64]	@ (8001110 <HAL_SPI_MspInit+0x88>)
 80010d0:	f043 0301 	orr.w	r3, r3, #1
 80010d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001110 <HAL_SPI_MspInit+0x88>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010da:	f003 0301 	and.w	r3, r3, #1
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80010e2:	23e0      	movs	r3, #224	@ 0xe0
 80010e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e6:	2302      	movs	r3, #2
 80010e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	2300      	movs	r3, #0
 80010ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ee:	2303      	movs	r3, #3
 80010f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010f2:	2305      	movs	r3, #5
 80010f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f6:	f107 0314 	add.w	r3, r7, #20
 80010fa:	4619      	mov	r1, r3
 80010fc:	4805      	ldr	r0, [pc, #20]	@ (8001114 <HAL_SPI_MspInit+0x8c>)
 80010fe:	f001 fd4f 	bl	8002ba0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001102:	bf00      	nop
 8001104:	3728      	adds	r7, #40	@ 0x28
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40013000 	.word	0x40013000
 8001110:	40023800 	.word	0x40023800
 8001114:	40020000 	.word	0x40020000

08001118 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a2c      	ldr	r2, [pc, #176]	@ (80011d8 <HAL_TIM_Base_MspInit+0xc0>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d13e      	bne.n	80011a8 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	60fb      	str	r3, [r7, #12]
 800112e:	4b2b      	ldr	r3, [pc, #172]	@ (80011dc <HAL_TIM_Base_MspInit+0xc4>)
 8001130:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001132:	4a2a      	ldr	r2, [pc, #168]	@ (80011dc <HAL_TIM_Base_MspInit+0xc4>)
 8001134:	f043 0301 	orr.w	r3, r3, #1
 8001138:	6453      	str	r3, [r2, #68]	@ 0x44
 800113a:	4b28      	ldr	r3, [pc, #160]	@ (80011dc <HAL_TIM_Base_MspInit+0xc4>)
 800113c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8001146:	4b26      	ldr	r3, [pc, #152]	@ (80011e0 <HAL_TIM_Base_MspInit+0xc8>)
 8001148:	4a26      	ldr	r2, [pc, #152]	@ (80011e4 <HAL_TIM_Base_MspInit+0xcc>)
 800114a:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 800114c:	4b24      	ldr	r3, [pc, #144]	@ (80011e0 <HAL_TIM_Base_MspInit+0xc8>)
 800114e:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8001152:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001154:	4b22      	ldr	r3, [pc, #136]	@ (80011e0 <HAL_TIM_Base_MspInit+0xc8>)
 8001156:	2240      	movs	r2, #64	@ 0x40
 8001158:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800115a:	4b21      	ldr	r3, [pc, #132]	@ (80011e0 <HAL_TIM_Base_MspInit+0xc8>)
 800115c:	2200      	movs	r2, #0
 800115e:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001160:	4b1f      	ldr	r3, [pc, #124]	@ (80011e0 <HAL_TIM_Base_MspInit+0xc8>)
 8001162:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001166:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001168:	4b1d      	ldr	r3, [pc, #116]	@ (80011e0 <HAL_TIM_Base_MspInit+0xc8>)
 800116a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800116e:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001170:	4b1b      	ldr	r3, [pc, #108]	@ (80011e0 <HAL_TIM_Base_MspInit+0xc8>)
 8001172:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001176:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8001178:	4b19      	ldr	r3, [pc, #100]	@ (80011e0 <HAL_TIM_Base_MspInit+0xc8>)
 800117a:	2200      	movs	r2, #0
 800117c:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800117e:	4b18      	ldr	r3, [pc, #96]	@ (80011e0 <HAL_TIM_Base_MspInit+0xc8>)
 8001180:	2200      	movs	r2, #0
 8001182:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001184:	4b16      	ldr	r3, [pc, #88]	@ (80011e0 <HAL_TIM_Base_MspInit+0xc8>)
 8001186:	2200      	movs	r2, #0
 8001188:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 800118a:	4815      	ldr	r0, [pc, #84]	@ (80011e0 <HAL_TIM_Base_MspInit+0xc8>)
 800118c:	f001 fa1e 	bl	80025cc <HAL_DMA_Init>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8001196:	f7ff fee9 	bl	8000f6c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a10      	ldr	r2, [pc, #64]	@ (80011e0 <HAL_TIM_Base_MspInit+0xc8>)
 800119e:	625a      	str	r2, [r3, #36]	@ 0x24
 80011a0:	4a0f      	ldr	r2, [pc, #60]	@ (80011e0 <HAL_TIM_Base_MspInit+0xc8>)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80011a6:	e012      	b.n	80011ce <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM2)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80011b0:	d10d      	bne.n	80011ce <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	60bb      	str	r3, [r7, #8]
 80011b6:	4b09      	ldr	r3, [pc, #36]	@ (80011dc <HAL_TIM_Base_MspInit+0xc4>)
 80011b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ba:	4a08      	ldr	r2, [pc, #32]	@ (80011dc <HAL_TIM_Base_MspInit+0xc4>)
 80011bc:	f043 0301 	orr.w	r3, r3, #1
 80011c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80011c2:	4b06      	ldr	r3, [pc, #24]	@ (80011dc <HAL_TIM_Base_MspInit+0xc4>)
 80011c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	60bb      	str	r3, [r7, #8]
 80011cc:	68bb      	ldr	r3, [r7, #8]
}
 80011ce:	bf00      	nop
 80011d0:	3710      	adds	r7, #16
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	40010000 	.word	0x40010000
 80011dc:	40023800 	.word	0x40023800
 80011e0:	20000254 	.word	0x20000254
 80011e4:	40026428 	.word	0x40026428

080011e8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b08a      	sub	sp, #40	@ 0x28
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f0:	f107 0314 	add.w	r3, r7, #20
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	605a      	str	r2, [r3, #4]
 80011fa:	609a      	str	r2, [r3, #8]
 80011fc:	60da      	str	r2, [r3, #12]
 80011fe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a24      	ldr	r2, [pc, #144]	@ (8001298 <HAL_TIM_MspPostInit+0xb0>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d11f      	bne.n	800124a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	613b      	str	r3, [r7, #16]
 800120e:	4b23      	ldr	r3, [pc, #140]	@ (800129c <HAL_TIM_MspPostInit+0xb4>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001212:	4a22      	ldr	r2, [pc, #136]	@ (800129c <HAL_TIM_MspPostInit+0xb4>)
 8001214:	f043 0310 	orr.w	r3, r3, #16
 8001218:	6313      	str	r3, [r2, #48]	@ 0x30
 800121a:	4b20      	ldr	r3, [pc, #128]	@ (800129c <HAL_TIM_MspPostInit+0xb4>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121e:	f003 0310 	and.w	r3, r3, #16
 8001222:	613b      	str	r3, [r7, #16]
 8001224:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001226:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800122a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122c:	2302      	movs	r3, #2
 800122e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001230:	2300      	movs	r3, #0
 8001232:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001234:	2300      	movs	r3, #0
 8001236:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001238:	2301      	movs	r3, #1
 800123a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800123c:	f107 0314 	add.w	r3, r7, #20
 8001240:	4619      	mov	r1, r3
 8001242:	4817      	ldr	r0, [pc, #92]	@ (80012a0 <HAL_TIM_MspPostInit+0xb8>)
 8001244:	f001 fcac 	bl	8002ba0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001248:	e022      	b.n	8001290 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM2)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001252:	d11d      	bne.n	8001290 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001254:	2300      	movs	r3, #0
 8001256:	60fb      	str	r3, [r7, #12]
 8001258:	4b10      	ldr	r3, [pc, #64]	@ (800129c <HAL_TIM_MspPostInit+0xb4>)
 800125a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125c:	4a0f      	ldr	r2, [pc, #60]	@ (800129c <HAL_TIM_MspPostInit+0xb4>)
 800125e:	f043 0301 	orr.w	r3, r3, #1
 8001262:	6313      	str	r3, [r2, #48]	@ 0x30
 8001264:	4b0d      	ldr	r3, [pc, #52]	@ (800129c <HAL_TIM_MspPostInit+0xb4>)
 8001266:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001268:	f003 0301 	and.w	r3, r3, #1
 800126c:	60fb      	str	r3, [r7, #12]
 800126e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001270:	2302      	movs	r3, #2
 8001272:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001274:	2302      	movs	r3, #2
 8001276:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001278:	2300      	movs	r3, #0
 800127a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127c:	2300      	movs	r3, #0
 800127e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001280:	2301      	movs	r3, #1
 8001282:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001284:	f107 0314 	add.w	r3, r7, #20
 8001288:	4619      	mov	r1, r3
 800128a:	4806      	ldr	r0, [pc, #24]	@ (80012a4 <HAL_TIM_MspPostInit+0xbc>)
 800128c:	f001 fc88 	bl	8002ba0 <HAL_GPIO_Init>
}
 8001290:	bf00      	nop
 8001292:	3728      	adds	r7, #40	@ 0x28
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	40010000 	.word	0x40010000
 800129c:	40023800 	.word	0x40023800
 80012a0:	40021000 	.word	0x40021000
 80012a4:	40020000 	.word	0x40020000

080012a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b08a      	sub	sp, #40	@ 0x28
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b0:	f107 0314 	add.w	r3, r7, #20
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	60da      	str	r2, [r3, #12]
 80012be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a19      	ldr	r2, [pc, #100]	@ (800132c <HAL_UART_MspInit+0x84>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d12b      	bne.n	8001322 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	613b      	str	r3, [r7, #16]
 80012ce:	4b18      	ldr	r3, [pc, #96]	@ (8001330 <HAL_UART_MspInit+0x88>)
 80012d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d2:	4a17      	ldr	r2, [pc, #92]	@ (8001330 <HAL_UART_MspInit+0x88>)
 80012d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80012da:	4b15      	ldr	r3, [pc, #84]	@ (8001330 <HAL_UART_MspInit+0x88>)
 80012dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012e2:	613b      	str	r3, [r7, #16]
 80012e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	60fb      	str	r3, [r7, #12]
 80012ea:	4b11      	ldr	r3, [pc, #68]	@ (8001330 <HAL_UART_MspInit+0x88>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ee:	4a10      	ldr	r2, [pc, #64]	@ (8001330 <HAL_UART_MspInit+0x88>)
 80012f0:	f043 0301 	orr.w	r3, r3, #1
 80012f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001330 <HAL_UART_MspInit+0x88>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fa:	f003 0301 	and.w	r3, r3, #1
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001302:	230c      	movs	r3, #12
 8001304:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001306:	2302      	movs	r3, #2
 8001308:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130a:	2300      	movs	r3, #0
 800130c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800130e:	2303      	movs	r3, #3
 8001310:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001312:	2307      	movs	r3, #7
 8001314:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001316:	f107 0314 	add.w	r3, r7, #20
 800131a:	4619      	mov	r1, r3
 800131c:	4805      	ldr	r0, [pc, #20]	@ (8001334 <HAL_UART_MspInit+0x8c>)
 800131e:	f001 fc3f 	bl	8002ba0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001322:	bf00      	nop
 8001324:	3728      	adds	r7, #40	@ 0x28
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	40004400 	.word	0x40004400
 8001330:	40023800 	.word	0x40023800
 8001334:	40020000 	.word	0x40020000

08001338 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800133c:	bf00      	nop
 800133e:	e7fd      	b.n	800133c <NMI_Handler+0x4>

08001340 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001344:	bf00      	nop
 8001346:	e7fd      	b.n	8001344 <HardFault_Handler+0x4>

08001348 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800134c:	bf00      	nop
 800134e:	e7fd      	b.n	800134c <MemManage_Handler+0x4>

08001350 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001354:	bf00      	nop
 8001356:	e7fd      	b.n	8001354 <BusFault_Handler+0x4>

08001358 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800135c:	bf00      	nop
 800135e:	e7fd      	b.n	800135c <UsageFault_Handler+0x4>

08001360 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001364:	bf00      	nop
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr

0800136e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800136e:	b480      	push	{r7}
 8001370:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001372:	bf00      	nop
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001380:	bf00      	nop
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr

0800138a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800138a:	b580      	push	{r7, lr}
 800138c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800138e:	f000 f94f 	bl	8001630 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001392:	bf00      	nop
 8001394:	bd80      	pop	{r7, pc}

08001396 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001396:	b580      	push	{r7, lr}
 8001398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800139a:	2001      	movs	r0, #1
 800139c:	f001 fdd0 	bl	8002f40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80013a0:	bf00      	nop
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80013a8:	2002      	movs	r0, #2
 80013aa:	f001 fdc9 	bl	8002f40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80013ae:	bf00      	nop
 80013b0:	bd80      	pop	{r7, pc}
	...

080013b4 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80013b8:	4802      	ldr	r0, [pc, #8]	@ (80013c4 <CAN1_TX_IRQHandler+0x10>)
 80013ba:	f000 fdc6 	bl	8001f4a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20000144 	.word	0x20000144

080013c8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80013cc:	4802      	ldr	r0, [pc, #8]	@ (80013d8 <CAN1_RX0_IRQHandler+0x10>)
 80013ce:	f000 fdbc 	bl	8001f4a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	20000144 	.word	0x20000144

080013dc <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80013e0:	4802      	ldr	r0, [pc, #8]	@ (80013ec <CAN1_RX1_IRQHandler+0x10>)
 80013e2:	f000 fdb2 	bl	8001f4a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80013e6:	bf00      	nop
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	20000144 	.word	0x20000144

080013f0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 80013f4:	4802      	ldr	r0, [pc, #8]	@ (8001400 <DMA2_Stream1_IRQHandler+0x10>)
 80013f6:	f001 f997 	bl	8002728 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80013fa:	bf00      	nop
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	20000254 	.word	0x20000254

08001404 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b086      	sub	sp, #24
 8001408:	af00      	add	r7, sp, #0
 800140a:	60f8      	str	r0, [r7, #12]
 800140c:	60b9      	str	r1, [r7, #8]
 800140e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001410:	2300      	movs	r3, #0
 8001412:	617b      	str	r3, [r7, #20]
 8001414:	e00a      	b.n	800142c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001416:	f3af 8000 	nop.w
 800141a:	4601      	mov	r1, r0
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	1c5a      	adds	r2, r3, #1
 8001420:	60ba      	str	r2, [r7, #8]
 8001422:	b2ca      	uxtb	r2, r1
 8001424:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	3301      	adds	r3, #1
 800142a:	617b      	str	r3, [r7, #20]
 800142c:	697a      	ldr	r2, [r7, #20]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	429a      	cmp	r2, r3
 8001432:	dbf0      	blt.n	8001416 <_read+0x12>
  }

  return len;
 8001434:	687b      	ldr	r3, [r7, #4]
}
 8001436:	4618      	mov	r0, r3
 8001438:	3718      	adds	r7, #24
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <_close>:
  }
  return len;
}

int _close(int file)
{
 800143e:	b480      	push	{r7}
 8001440:	b083      	sub	sp, #12
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001446:	f04f 33ff 	mov.w	r3, #4294967295
}
 800144a:	4618      	mov	r0, r3
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr

08001456 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001456:	b480      	push	{r7}
 8001458:	b083      	sub	sp, #12
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
 800145e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001466:	605a      	str	r2, [r3, #4]
  return 0;
 8001468:	2300      	movs	r3, #0
}
 800146a:	4618      	mov	r0, r3
 800146c:	370c      	adds	r7, #12
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr

08001476 <_isatty>:

int _isatty(int file)
{
 8001476:	b480      	push	{r7}
 8001478:	b083      	sub	sp, #12
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800147e:	2301      	movs	r3, #1
}
 8001480:	4618      	mov	r0, r3
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr

0800148c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800148c:	b480      	push	{r7}
 800148e:	b085      	sub	sp, #20
 8001490:	af00      	add	r7, sp, #0
 8001492:	60f8      	str	r0, [r7, #12]
 8001494:	60b9      	str	r1, [r7, #8]
 8001496:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001498:	2300      	movs	r3, #0
}
 800149a:	4618      	mov	r0, r3
 800149c:	3714      	adds	r7, #20
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
	...

080014a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b086      	sub	sp, #24
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014b0:	4a14      	ldr	r2, [pc, #80]	@ (8001504 <_sbrk+0x5c>)
 80014b2:	4b15      	ldr	r3, [pc, #84]	@ (8001508 <_sbrk+0x60>)
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014bc:	4b13      	ldr	r3, [pc, #76]	@ (800150c <_sbrk+0x64>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d102      	bne.n	80014ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014c4:	4b11      	ldr	r3, [pc, #68]	@ (800150c <_sbrk+0x64>)
 80014c6:	4a12      	ldr	r2, [pc, #72]	@ (8001510 <_sbrk+0x68>)
 80014c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014ca:	4b10      	ldr	r3, [pc, #64]	@ (800150c <_sbrk+0x64>)
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4413      	add	r3, r2
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d207      	bcs.n	80014e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014d8:	f004 fe40 	bl	800615c <__errno>
 80014dc:	4603      	mov	r3, r0
 80014de:	220c      	movs	r2, #12
 80014e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014e2:	f04f 33ff 	mov.w	r3, #4294967295
 80014e6:	e009      	b.n	80014fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014e8:	4b08      	ldr	r3, [pc, #32]	@ (800150c <_sbrk+0x64>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014ee:	4b07      	ldr	r3, [pc, #28]	@ (800150c <_sbrk+0x64>)
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4413      	add	r3, r2
 80014f6:	4a05      	ldr	r2, [pc, #20]	@ (800150c <_sbrk+0x64>)
 80014f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014fa:	68fb      	ldr	r3, [r7, #12]
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3718      	adds	r7, #24
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	20020000 	.word	0x20020000
 8001508:	00000400 	.word	0x00000400
 800150c:	20000338 	.word	0x20000338
 8001510:	20000490 	.word	0x20000490

08001514 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001518:	4b06      	ldr	r3, [pc, #24]	@ (8001534 <SystemInit+0x20>)
 800151a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800151e:	4a05      	ldr	r2, [pc, #20]	@ (8001534 <SystemInit+0x20>)
 8001520:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001524:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001528:	bf00      	nop
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	e000ed00 	.word	0xe000ed00

08001538 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001538:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001570 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800153c:	f7ff ffea 	bl	8001514 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001540:	480c      	ldr	r0, [pc, #48]	@ (8001574 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001542:	490d      	ldr	r1, [pc, #52]	@ (8001578 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001544:	4a0d      	ldr	r2, [pc, #52]	@ (800157c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001546:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001548:	e002      	b.n	8001550 <LoopCopyDataInit>

0800154a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800154a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800154c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800154e:	3304      	adds	r3, #4

08001550 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001550:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001552:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001554:	d3f9      	bcc.n	800154a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001556:	4a0a      	ldr	r2, [pc, #40]	@ (8001580 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001558:	4c0a      	ldr	r4, [pc, #40]	@ (8001584 <LoopFillZerobss+0x22>)
  movs r3, #0
 800155a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800155c:	e001      	b.n	8001562 <LoopFillZerobss>

0800155e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800155e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001560:	3204      	adds	r2, #4

08001562 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001562:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001564:	d3fb      	bcc.n	800155e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001566:	f004 fdff 	bl	8006168 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800156a:	f7ff f855 	bl	8000618 <main>
  bx  lr    
 800156e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001570:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001574:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001578:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800157c:	0800668c 	.word	0x0800668c
  ldr r2, =_sbss
 8001580:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001584:	2000048c 	.word	0x2000048c

08001588 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001588:	e7fe      	b.n	8001588 <ADC_IRQHandler>
	...

0800158c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001590:	4b0e      	ldr	r3, [pc, #56]	@ (80015cc <HAL_Init+0x40>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a0d      	ldr	r2, [pc, #52]	@ (80015cc <HAL_Init+0x40>)
 8001596:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800159a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800159c:	4b0b      	ldr	r3, [pc, #44]	@ (80015cc <HAL_Init+0x40>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a0a      	ldr	r2, [pc, #40]	@ (80015cc <HAL_Init+0x40>)
 80015a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015a8:	4b08      	ldr	r3, [pc, #32]	@ (80015cc <HAL_Init+0x40>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a07      	ldr	r2, [pc, #28]	@ (80015cc <HAL_Init+0x40>)
 80015ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015b4:	2003      	movs	r0, #3
 80015b6:	f000 ffc7 	bl	8002548 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015ba:	2000      	movs	r0, #0
 80015bc:	f000 f808 	bl	80015d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015c0:	f7ff fcda 	bl	8000f78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015c4:	2300      	movs	r3, #0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	40023c00 	.word	0x40023c00

080015d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015d8:	4b12      	ldr	r3, [pc, #72]	@ (8001624 <HAL_InitTick+0x54>)
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	4b12      	ldr	r3, [pc, #72]	@ (8001628 <HAL_InitTick+0x58>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	4619      	mov	r1, r3
 80015e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80015ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ee:	4618      	mov	r0, r3
 80015f0:	f000 ffdf 	bl	80025b2 <HAL_SYSTICK_Config>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e00e      	b.n	800161c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2b0f      	cmp	r3, #15
 8001602:	d80a      	bhi.n	800161a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001604:	2200      	movs	r2, #0
 8001606:	6879      	ldr	r1, [r7, #4]
 8001608:	f04f 30ff 	mov.w	r0, #4294967295
 800160c:	f000 ffa7 	bl	800255e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001610:	4a06      	ldr	r2, [pc, #24]	@ (800162c <HAL_InitTick+0x5c>)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001616:	2300      	movs	r3, #0
 8001618:	e000      	b.n	800161c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
}
 800161c:	4618      	mov	r0, r3
 800161e:	3708      	adds	r7, #8
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	20000000 	.word	0x20000000
 8001628:	20000008 	.word	0x20000008
 800162c:	20000004 	.word	0x20000004

08001630 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001634:	4b06      	ldr	r3, [pc, #24]	@ (8001650 <HAL_IncTick+0x20>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	461a      	mov	r2, r3
 800163a:	4b06      	ldr	r3, [pc, #24]	@ (8001654 <HAL_IncTick+0x24>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4413      	add	r3, r2
 8001640:	4a04      	ldr	r2, [pc, #16]	@ (8001654 <HAL_IncTick+0x24>)
 8001642:	6013      	str	r3, [r2, #0]
}
 8001644:	bf00      	nop
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	20000008 	.word	0x20000008
 8001654:	2000033c 	.word	0x2000033c

08001658 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  return uwTick;
 800165c:	4b03      	ldr	r3, [pc, #12]	@ (800166c <HAL_GetTick+0x14>)
 800165e:	681b      	ldr	r3, [r3, #0]
}
 8001660:	4618      	mov	r0, r3
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	2000033c 	.word	0x2000033c

08001670 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d101      	bne.n	8001682 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e0ed      	b.n	800185e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001688:	b2db      	uxtb	r3, r3
 800168a:	2b00      	cmp	r3, #0
 800168c:	d102      	bne.n	8001694 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f7ff fc9a 	bl	8000fc8 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f042 0201 	orr.w	r2, r2, #1
 80016a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016a4:	f7ff ffd8 	bl	8001658 <HAL_GetTick>
 80016a8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80016aa:	e012      	b.n	80016d2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80016ac:	f7ff ffd4 	bl	8001658 <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	2b0a      	cmp	r3, #10
 80016b8:	d90b      	bls.n	80016d2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016be:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2205      	movs	r2, #5
 80016ca:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e0c5      	b.n	800185e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f003 0301 	and.w	r3, r3, #1
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d0e5      	beq.n	80016ac <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f022 0202 	bic.w	r2, r2, #2
 80016ee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016f0:	f7ff ffb2 	bl	8001658 <HAL_GetTick>
 80016f4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80016f6:	e012      	b.n	800171e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80016f8:	f7ff ffae 	bl	8001658 <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	2b0a      	cmp	r3, #10
 8001704:	d90b      	bls.n	800171e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800170a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2205      	movs	r2, #5
 8001716:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e09f      	b.n	800185e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f003 0302 	and.w	r3, r3, #2
 8001728:	2b00      	cmp	r3, #0
 800172a:	d1e5      	bne.n	80016f8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	7e1b      	ldrb	r3, [r3, #24]
 8001730:	2b01      	cmp	r3, #1
 8001732:	d108      	bne.n	8001746 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	e007      	b.n	8001756 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001754:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	7e5b      	ldrb	r3, [r3, #25]
 800175a:	2b01      	cmp	r3, #1
 800175c:	d108      	bne.n	8001770 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800176c:	601a      	str	r2, [r3, #0]
 800176e:	e007      	b.n	8001780 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800177e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	7e9b      	ldrb	r3, [r3, #26]
 8001784:	2b01      	cmp	r3, #1
 8001786:	d108      	bne.n	800179a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f042 0220 	orr.w	r2, r2, #32
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	e007      	b.n	80017aa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f022 0220 	bic.w	r2, r2, #32
 80017a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	7edb      	ldrb	r3, [r3, #27]
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d108      	bne.n	80017c4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f022 0210 	bic.w	r2, r2, #16
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	e007      	b.n	80017d4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f042 0210 	orr.w	r2, r2, #16
 80017d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	7f1b      	ldrb	r3, [r3, #28]
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d108      	bne.n	80017ee <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f042 0208 	orr.w	r2, r2, #8
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	e007      	b.n	80017fe <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f022 0208 	bic.w	r2, r2, #8
 80017fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	7f5b      	ldrb	r3, [r3, #29]
 8001802:	2b01      	cmp	r3, #1
 8001804:	d108      	bne.n	8001818 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f042 0204 	orr.w	r2, r2, #4
 8001814:	601a      	str	r2, [r3, #0]
 8001816:	e007      	b.n	8001828 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f022 0204 	bic.w	r2, r2, #4
 8001826:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	689a      	ldr	r2, [r3, #8]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	431a      	orrs	r2, r3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	691b      	ldr	r3, [r3, #16]
 8001836:	431a      	orrs	r2, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	695b      	ldr	r3, [r3, #20]
 800183c:	ea42 0103 	orr.w	r1, r2, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	1e5a      	subs	r2, r3, #1
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	430a      	orrs	r2, r1
 800184c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2200      	movs	r2, #0
 8001852:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2201      	movs	r2, #1
 8001858:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800185c:	2300      	movs	r3, #0
}
 800185e:	4618      	mov	r0, r3
 8001860:	3710      	adds	r7, #16
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
	...

08001868 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001868:	b480      	push	{r7}
 800186a:	b087      	sub	sp, #28
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800187e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001880:	7cfb      	ldrb	r3, [r7, #19]
 8001882:	2b01      	cmp	r3, #1
 8001884:	d003      	beq.n	800188e <HAL_CAN_ConfigFilter+0x26>
 8001886:	7cfb      	ldrb	r3, [r7, #19]
 8001888:	2b02      	cmp	r3, #2
 800188a:	f040 80be 	bne.w	8001a0a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800188e:	4b65      	ldr	r3, [pc, #404]	@ (8001a24 <HAL_CAN_ConfigFilter+0x1bc>)
 8001890:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001898:	f043 0201 	orr.w	r2, r3, #1
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80018a8:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018bc:	021b      	lsls	r3, r3, #8
 80018be:	431a      	orrs	r2, r3
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	695b      	ldr	r3, [r3, #20]
 80018ca:	f003 031f 	and.w	r3, r3, #31
 80018ce:	2201      	movs	r2, #1
 80018d0:	fa02 f303 	lsl.w	r3, r2, r3
 80018d4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	43db      	mvns	r3, r3
 80018e0:	401a      	ands	r2, r3
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	69db      	ldr	r3, [r3, #28]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d123      	bne.n	8001938 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	43db      	mvns	r3, r3
 80018fa:	401a      	ands	r2, r3
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	68db      	ldr	r3, [r3, #12]
 8001906:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800190e:	683a      	ldr	r2, [r7, #0]
 8001910:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001912:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	3248      	adds	r2, #72	@ 0x48
 8001918:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800192c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800192e:	6979      	ldr	r1, [r7, #20]
 8001930:	3348      	adds	r3, #72	@ 0x48
 8001932:	00db      	lsls	r3, r3, #3
 8001934:	440b      	add	r3, r1
 8001936:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	69db      	ldr	r3, [r3, #28]
 800193c:	2b01      	cmp	r3, #1
 800193e:	d122      	bne.n	8001986 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	431a      	orrs	r2, r3
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800195c:	683a      	ldr	r2, [r7, #0]
 800195e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001960:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	3248      	adds	r2, #72	@ 0x48
 8001966:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800197a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800197c:	6979      	ldr	r1, [r7, #20]
 800197e:	3348      	adds	r3, #72	@ 0x48
 8001980:	00db      	lsls	r3, r3, #3
 8001982:	440b      	add	r3, r1
 8001984:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	699b      	ldr	r3, [r3, #24]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d109      	bne.n	80019a2 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	43db      	mvns	r3, r3
 8001998:	401a      	ands	r2, r3
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80019a0:	e007      	b.n	80019b2 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	431a      	orrs	r2, r3
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	691b      	ldr	r3, [r3, #16]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d109      	bne.n	80019ce <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	43db      	mvns	r3, r3
 80019c4:	401a      	ands	r2, r3
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80019cc:	e007      	b.n	80019de <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	431a      	orrs	r2, r3
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	6a1b      	ldr	r3, [r3, #32]
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d107      	bne.n	80019f6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	431a      	orrs	r2, r3
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80019fc:	f023 0201 	bic.w	r2, r3, #1
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001a06:	2300      	movs	r3, #0
 8001a08:	e006      	b.n	8001a18 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a0e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
  }
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	371c      	adds	r7, #28
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr
 8001a24:	40006400 	.word	0x40006400

08001a28 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d12e      	bne.n	8001a9a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2202      	movs	r2, #2
 8001a40:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f022 0201 	bic.w	r2, r2, #1
 8001a52:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001a54:	f7ff fe00 	bl	8001658 <HAL_GetTick>
 8001a58:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001a5a:	e012      	b.n	8001a82 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a5c:	f7ff fdfc 	bl	8001658 <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	2b0a      	cmp	r3, #10
 8001a68:	d90b      	bls.n	8001a82 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a6e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2205      	movs	r2, #5
 8001a7a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e012      	b.n	8001aa8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f003 0301 	and.w	r3, r3, #1
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d1e5      	bne.n	8001a5c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2200      	movs	r2, #0
 8001a94:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001a96:	2300      	movs	r3, #0
 8001a98:	e006      	b.n	8001aa8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a9e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
  }
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3710      	adds	r7, #16
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b089      	sub	sp, #36	@ 0x24
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	60f8      	str	r0, [r7, #12]
 8001ab8:	60b9      	str	r1, [r7, #8]
 8001aba:	607a      	str	r2, [r7, #4]
 8001abc:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ac4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001ace:	7ffb      	ldrb	r3, [r7, #31]
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d003      	beq.n	8001adc <HAL_CAN_AddTxMessage+0x2c>
 8001ad4:	7ffb      	ldrb	r3, [r7, #31]
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	f040 80ad 	bne.w	8001c36 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d10a      	bne.n	8001afc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d105      	bne.n	8001afc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	f000 8095 	beq.w	8001c26 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	0e1b      	lsrs	r3, r3, #24
 8001b00:	f003 0303 	and.w	r3, r3, #3
 8001b04:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001b06:	2201      	movs	r2, #1
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	409a      	lsls	r2, r3
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d10d      	bne.n	8001b34 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001b22:	68f9      	ldr	r1, [r7, #12]
 8001b24:	6809      	ldr	r1, [r1, #0]
 8001b26:	431a      	orrs	r2, r3
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	3318      	adds	r3, #24
 8001b2c:	011b      	lsls	r3, r3, #4
 8001b2e:	440b      	add	r3, r1
 8001b30:	601a      	str	r2, [r3, #0]
 8001b32:	e00f      	b.n	8001b54 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001b3e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001b44:	68f9      	ldr	r1, [r7, #12]
 8001b46:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001b48:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	3318      	adds	r3, #24
 8001b4e:	011b      	lsls	r3, r3, #4
 8001b50:	440b      	add	r3, r1
 8001b52:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	6819      	ldr	r1, [r3, #0]
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	691a      	ldr	r2, [r3, #16]
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	3318      	adds	r3, #24
 8001b60:	011b      	lsls	r3, r3, #4
 8001b62:	440b      	add	r3, r1
 8001b64:	3304      	adds	r3, #4
 8001b66:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	7d1b      	ldrb	r3, [r3, #20]
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d111      	bne.n	8001b94 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	3318      	adds	r3, #24
 8001b78:	011b      	lsls	r3, r3, #4
 8001b7a:	4413      	add	r3, r2
 8001b7c:	3304      	adds	r3, #4
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	68fa      	ldr	r2, [r7, #12]
 8001b82:	6811      	ldr	r1, [r2, #0]
 8001b84:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	3318      	adds	r3, #24
 8001b8c:	011b      	lsls	r3, r3, #4
 8001b8e:	440b      	add	r3, r1
 8001b90:	3304      	adds	r3, #4
 8001b92:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	3307      	adds	r3, #7
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	061a      	lsls	r2, r3, #24
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	3306      	adds	r3, #6
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	041b      	lsls	r3, r3, #16
 8001ba4:	431a      	orrs	r2, r3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	3305      	adds	r3, #5
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	021b      	lsls	r3, r3, #8
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	3204      	adds	r2, #4
 8001bb4:	7812      	ldrb	r2, [r2, #0]
 8001bb6:	4610      	mov	r0, r2
 8001bb8:	68fa      	ldr	r2, [r7, #12]
 8001bba:	6811      	ldr	r1, [r2, #0]
 8001bbc:	ea43 0200 	orr.w	r2, r3, r0
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	011b      	lsls	r3, r3, #4
 8001bc4:	440b      	add	r3, r1
 8001bc6:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001bca:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	3303      	adds	r3, #3
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	061a      	lsls	r2, r3, #24
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	3302      	adds	r3, #2
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	041b      	lsls	r3, r3, #16
 8001bdc:	431a      	orrs	r2, r3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	3301      	adds	r3, #1
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	021b      	lsls	r3, r3, #8
 8001be6:	4313      	orrs	r3, r2
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	7812      	ldrb	r2, [r2, #0]
 8001bec:	4610      	mov	r0, r2
 8001bee:	68fa      	ldr	r2, [r7, #12]
 8001bf0:	6811      	ldr	r1, [r2, #0]
 8001bf2:	ea43 0200 	orr.w	r2, r3, r0
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	011b      	lsls	r3, r3, #4
 8001bfa:	440b      	add	r3, r1
 8001bfc:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001c00:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	3318      	adds	r3, #24
 8001c0a:	011b      	lsls	r3, r3, #4
 8001c0c:	4413      	add	r3, r2
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	68fa      	ldr	r2, [r7, #12]
 8001c12:	6811      	ldr	r1, [r2, #0]
 8001c14:	f043 0201 	orr.w	r2, r3, #1
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	3318      	adds	r3, #24
 8001c1c:	011b      	lsls	r3, r3, #4
 8001c1e:	440b      	add	r3, r1
 8001c20:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001c22:	2300      	movs	r3, #0
 8001c24:	e00e      	b.n	8001c44 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c2a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e006      	b.n	8001c44 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c3a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
  }
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3724      	adds	r7, #36	@ 0x24
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b085      	sub	sp, #20
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c62:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8001c64:	7afb      	ldrb	r3, [r7, #11]
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d002      	beq.n	8001c70 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8001c6a:	7afb      	ldrb	r3, [r7, #11]
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d11d      	bne.n	8001cac <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d002      	beq.n	8001c84 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	3301      	adds	r3, #1
 8001c82:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d002      	beq.n	8001c98 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	3301      	adds	r3, #1
 8001c96:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d002      	beq.n	8001cac <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	3301      	adds	r3, #1
 8001caa:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8001cac:	68fb      	ldr	r3, [r7, #12]
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3714      	adds	r7, #20
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr

08001cba <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001cba:	b480      	push	{r7}
 8001cbc:	b087      	sub	sp, #28
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	60f8      	str	r0, [r7, #12]
 8001cc2:	60b9      	str	r1, [r7, #8]
 8001cc4:	607a      	str	r2, [r7, #4]
 8001cc6:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cce:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001cd0:	7dfb      	ldrb	r3, [r7, #23]
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d003      	beq.n	8001cde <HAL_CAN_GetRxMessage+0x24>
 8001cd6:	7dfb      	ldrb	r3, [r7, #23]
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	f040 8103 	bne.w	8001ee4 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d10e      	bne.n	8001d02 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	f003 0303 	and.w	r3, r3, #3
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d116      	bne.n	8001d20 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cf6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e0f7      	b.n	8001ef2 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	691b      	ldr	r3, [r3, #16]
 8001d08:	f003 0303 	and.w	r3, r3, #3
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d107      	bne.n	8001d20 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d14:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e0e8      	b.n	8001ef2 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	331b      	adds	r3, #27
 8001d28:	011b      	lsls	r3, r3, #4
 8001d2a:	4413      	add	r3, r2
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0204 	and.w	r2, r3, #4
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d10c      	bne.n	8001d58 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	331b      	adds	r3, #27
 8001d46:	011b      	lsls	r3, r3, #4
 8001d48:	4413      	add	r3, r2
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	0d5b      	lsrs	r3, r3, #21
 8001d4e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	601a      	str	r2, [r3, #0]
 8001d56:	e00b      	b.n	8001d70 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	331b      	adds	r3, #27
 8001d60:	011b      	lsls	r3, r3, #4
 8001d62:	4413      	add	r3, r2
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	08db      	lsrs	r3, r3, #3
 8001d68:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	331b      	adds	r3, #27
 8001d78:	011b      	lsls	r3, r3, #4
 8001d7a:	4413      	add	r3, r2
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0202 	and.w	r2, r3, #2
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	331b      	adds	r3, #27
 8001d8e:	011b      	lsls	r3, r3, #4
 8001d90:	4413      	add	r3, r2
 8001d92:	3304      	adds	r3, #4
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0308 	and.w	r3, r3, #8
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d003      	beq.n	8001da6 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2208      	movs	r2, #8
 8001da2:	611a      	str	r2, [r3, #16]
 8001da4:	e00b      	b.n	8001dbe <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	331b      	adds	r3, #27
 8001dae:	011b      	lsls	r3, r3, #4
 8001db0:	4413      	add	r3, r2
 8001db2:	3304      	adds	r3, #4
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 020f 	and.w	r2, r3, #15
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	331b      	adds	r3, #27
 8001dc6:	011b      	lsls	r3, r3, #4
 8001dc8:	4413      	add	r3, r2
 8001dca:	3304      	adds	r3, #4
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	0a1b      	lsrs	r3, r3, #8
 8001dd0:	b2da      	uxtb	r2, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	331b      	adds	r3, #27
 8001dde:	011b      	lsls	r3, r3, #4
 8001de0:	4413      	add	r3, r2
 8001de2:	3304      	adds	r3, #4
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	0c1b      	lsrs	r3, r3, #16
 8001de8:	b29a      	uxth	r2, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	011b      	lsls	r3, r3, #4
 8001df6:	4413      	add	r3, r2
 8001df8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	b2da      	uxtb	r2, r3
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	011b      	lsls	r3, r3, #4
 8001e0c:	4413      	add	r3, r2
 8001e0e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	0a1a      	lsrs	r2, r3, #8
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	3301      	adds	r3, #1
 8001e1a:	b2d2      	uxtb	r2, r2
 8001e1c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	011b      	lsls	r3, r3, #4
 8001e26:	4413      	add	r3, r2
 8001e28:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	0c1a      	lsrs	r2, r3, #16
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	3302      	adds	r3, #2
 8001e34:	b2d2      	uxtb	r2, r2
 8001e36:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	011b      	lsls	r3, r3, #4
 8001e40:	4413      	add	r3, r2
 8001e42:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	0e1a      	lsrs	r2, r3, #24
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	3303      	adds	r3, #3
 8001e4e:	b2d2      	uxtb	r2, r2
 8001e50:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	011b      	lsls	r3, r3, #4
 8001e5a:	4413      	add	r3, r2
 8001e5c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	3304      	adds	r3, #4
 8001e66:	b2d2      	uxtb	r2, r2
 8001e68:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	011b      	lsls	r3, r3, #4
 8001e72:	4413      	add	r3, r2
 8001e74:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	0a1a      	lsrs	r2, r3, #8
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	3305      	adds	r3, #5
 8001e80:	b2d2      	uxtb	r2, r2
 8001e82:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	011b      	lsls	r3, r3, #4
 8001e8c:	4413      	add	r3, r2
 8001e8e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	0c1a      	lsrs	r2, r3, #16
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	3306      	adds	r3, #6
 8001e9a:	b2d2      	uxtb	r2, r2
 8001e9c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	011b      	lsls	r3, r3, #4
 8001ea6:	4413      	add	r3, r2
 8001ea8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	0e1a      	lsrs	r2, r3, #24
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	3307      	adds	r3, #7
 8001eb4:	b2d2      	uxtb	r2, r2
 8001eb6:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d108      	bne.n	8001ed0 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	68da      	ldr	r2, [r3, #12]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f042 0220 	orr.w	r2, r2, #32
 8001ecc:	60da      	str	r2, [r3, #12]
 8001ece:	e007      	b.n	8001ee0 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	691a      	ldr	r2, [r3, #16]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f042 0220 	orr.w	r2, r2, #32
 8001ede:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	e006      	b.n	8001ef2 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ee8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
  }
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	371c      	adds	r7, #28
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr

08001efe <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001efe:	b480      	push	{r7}
 8001f00:	b085      	sub	sp, #20
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
 8001f06:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f0e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001f10:	7bfb      	ldrb	r3, [r7, #15]
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d002      	beq.n	8001f1c <HAL_CAN_ActivateNotification+0x1e>
 8001f16:	7bfb      	ldrb	r3, [r7, #15]
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d109      	bne.n	8001f30 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	6959      	ldr	r1, [r3, #20]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	683a      	ldr	r2, [r7, #0]
 8001f28:	430a      	orrs	r2, r1
 8001f2a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	e006      	b.n	8001f3e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f34:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
  }
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3714      	adds	r7, #20
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr

08001f4a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b08a      	sub	sp, #40	@ 0x28
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001f52:	2300      	movs	r3, #0
 8001f54:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	695b      	ldr	r3, [r3, #20]
 8001f5c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	691b      	ldr	r3, [r3, #16]
 8001f7c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	699b      	ldr	r3, [r3, #24]
 8001f84:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001f86:	6a3b      	ldr	r3, [r7, #32]
 8001f88:	f003 0301 	and.w	r3, r3, #1
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d07c      	beq.n	800208a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001f90:	69bb      	ldr	r3, [r7, #24]
 8001f92:	f003 0301 	and.w	r3, r3, #1
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d023      	beq.n	8001fe2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	f003 0302 	and.w	r3, r3, #2
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d003      	beq.n	8001fb4 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f000 f983 	bl	80022b8 <HAL_CAN_TxMailbox0CompleteCallback>
 8001fb2:	e016      	b.n	8001fe2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001fb4:	69bb      	ldr	r3, [r7, #24]
 8001fb6:	f003 0304 	and.w	r3, r3, #4
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d004      	beq.n	8001fc8 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fc0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001fc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fc6:	e00c      	b.n	8001fe2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	f003 0308 	and.w	r3, r3, #8
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d004      	beq.n	8001fdc <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fd4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001fd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fda:	e002      	b.n	8001fe2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f000 f989 	bl	80022f4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d024      	beq.n	8002036 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ff4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d003      	beq.n	8002008 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f000 f963 	bl	80022cc <HAL_CAN_TxMailbox1CompleteCallback>
 8002006:	e016      	b.n	8002036 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800200e:	2b00      	cmp	r3, #0
 8002010:	d004      	beq.n	800201c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002014:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002018:	627b      	str	r3, [r7, #36]	@ 0x24
 800201a:	e00c      	b.n	8002036 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002022:	2b00      	cmp	r3, #0
 8002024:	d004      	beq.n	8002030 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002028:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800202c:	627b      	str	r3, [r7, #36]	@ 0x24
 800202e:	e002      	b.n	8002036 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f000 f969 	bl	8002308 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d024      	beq.n	800208a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002048:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d003      	beq.n	800205c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f000 f943 	bl	80022e0 <HAL_CAN_TxMailbox2CompleteCallback>
 800205a:	e016      	b.n	800208a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d004      	beq.n	8002070 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002068:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800206c:	627b      	str	r3, [r7, #36]	@ 0x24
 800206e:	e00c      	b.n	800208a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d004      	beq.n	8002084 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800207a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800207c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002080:	627b      	str	r3, [r7, #36]	@ 0x24
 8002082:	e002      	b.n	800208a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f000 f949 	bl	800231c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800208a:	6a3b      	ldr	r3, [r7, #32]
 800208c:	f003 0308 	and.w	r3, r3, #8
 8002090:	2b00      	cmp	r3, #0
 8002092:	d00c      	beq.n	80020ae <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	f003 0310 	and.w	r3, r3, #16
 800209a:	2b00      	cmp	r3, #0
 800209c:	d007      	beq.n	80020ae <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800209e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020a4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	2210      	movs	r2, #16
 80020ac:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80020ae:	6a3b      	ldr	r3, [r7, #32]
 80020b0:	f003 0304 	and.w	r3, r3, #4
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d00b      	beq.n	80020d0 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	f003 0308 	and.w	r3, r3, #8
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d006      	beq.n	80020d0 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	2208      	movs	r2, #8
 80020c8:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f000 f930 	bl	8002330 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80020d0:	6a3b      	ldr	r3, [r7, #32]
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d009      	beq.n	80020ee <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	f003 0303 	and.w	r3, r3, #3
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d002      	beq.n	80020ee <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f7fe fa83 	bl	80005f4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80020ee:	6a3b      	ldr	r3, [r7, #32]
 80020f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d00c      	beq.n	8002112 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	f003 0310 	and.w	r3, r3, #16
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d007      	beq.n	8002112 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002104:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002108:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	2210      	movs	r2, #16
 8002110:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002112:	6a3b      	ldr	r3, [r7, #32]
 8002114:	f003 0320 	and.w	r3, r3, #32
 8002118:	2b00      	cmp	r3, #0
 800211a:	d00b      	beq.n	8002134 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	f003 0308 	and.w	r3, r3, #8
 8002122:	2b00      	cmp	r3, #0
 8002124:	d006      	beq.n	8002134 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2208      	movs	r2, #8
 800212c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f000 f912 	bl	8002358 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002134:	6a3b      	ldr	r3, [r7, #32]
 8002136:	f003 0310 	and.w	r3, r3, #16
 800213a:	2b00      	cmp	r3, #0
 800213c:	d009      	beq.n	8002152 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	691b      	ldr	r3, [r3, #16]
 8002144:	f003 0303 	and.w	r3, r3, #3
 8002148:	2b00      	cmp	r3, #0
 800214a:	d002      	beq.n	8002152 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f000 f8f9 	bl	8002344 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002152:	6a3b      	ldr	r3, [r7, #32]
 8002154:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d00b      	beq.n	8002174 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	f003 0310 	and.w	r3, r3, #16
 8002162:	2b00      	cmp	r3, #0
 8002164:	d006      	beq.n	8002174 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2210      	movs	r2, #16
 800216c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f000 f8fc 	bl	800236c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002174:	6a3b      	ldr	r3, [r7, #32]
 8002176:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d00b      	beq.n	8002196 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	f003 0308 	and.w	r3, r3, #8
 8002184:	2b00      	cmp	r3, #0
 8002186:	d006      	beq.n	8002196 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2208      	movs	r2, #8
 800218e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f000 f8f5 	bl	8002380 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002196:	6a3b      	ldr	r3, [r7, #32]
 8002198:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d07b      	beq.n	8002298 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	f003 0304 	and.w	r3, r3, #4
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d072      	beq.n	8002290 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80021aa:	6a3b      	ldr	r3, [r7, #32]
 80021ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d008      	beq.n	80021c6 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d003      	beq.n	80021c6 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80021be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c0:	f043 0301 	orr.w	r3, r3, #1
 80021c4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80021c6:	6a3b      	ldr	r3, [r7, #32]
 80021c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d008      	beq.n	80021e2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d003      	beq.n	80021e2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80021da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021dc:	f043 0302 	orr.w	r3, r3, #2
 80021e0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80021e2:	6a3b      	ldr	r3, [r7, #32]
 80021e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d008      	beq.n	80021fe <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d003      	beq.n	80021fe <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80021f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021f8:	f043 0304 	orr.w	r3, r3, #4
 80021fc:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80021fe:	6a3b      	ldr	r3, [r7, #32]
 8002200:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002204:	2b00      	cmp	r3, #0
 8002206:	d043      	beq.n	8002290 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800220e:	2b00      	cmp	r3, #0
 8002210:	d03e      	beq.n	8002290 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002218:	2b60      	cmp	r3, #96	@ 0x60
 800221a:	d02b      	beq.n	8002274 <HAL_CAN_IRQHandler+0x32a>
 800221c:	2b60      	cmp	r3, #96	@ 0x60
 800221e:	d82e      	bhi.n	800227e <HAL_CAN_IRQHandler+0x334>
 8002220:	2b50      	cmp	r3, #80	@ 0x50
 8002222:	d022      	beq.n	800226a <HAL_CAN_IRQHandler+0x320>
 8002224:	2b50      	cmp	r3, #80	@ 0x50
 8002226:	d82a      	bhi.n	800227e <HAL_CAN_IRQHandler+0x334>
 8002228:	2b40      	cmp	r3, #64	@ 0x40
 800222a:	d019      	beq.n	8002260 <HAL_CAN_IRQHandler+0x316>
 800222c:	2b40      	cmp	r3, #64	@ 0x40
 800222e:	d826      	bhi.n	800227e <HAL_CAN_IRQHandler+0x334>
 8002230:	2b30      	cmp	r3, #48	@ 0x30
 8002232:	d010      	beq.n	8002256 <HAL_CAN_IRQHandler+0x30c>
 8002234:	2b30      	cmp	r3, #48	@ 0x30
 8002236:	d822      	bhi.n	800227e <HAL_CAN_IRQHandler+0x334>
 8002238:	2b10      	cmp	r3, #16
 800223a:	d002      	beq.n	8002242 <HAL_CAN_IRQHandler+0x2f8>
 800223c:	2b20      	cmp	r3, #32
 800223e:	d005      	beq.n	800224c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002240:	e01d      	b.n	800227e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002244:	f043 0308 	orr.w	r3, r3, #8
 8002248:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800224a:	e019      	b.n	8002280 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800224c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800224e:	f043 0310 	orr.w	r3, r3, #16
 8002252:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002254:	e014      	b.n	8002280 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002258:	f043 0320 	orr.w	r3, r3, #32
 800225c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800225e:	e00f      	b.n	8002280 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002262:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002266:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002268:	e00a      	b.n	8002280 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800226a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800226c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002270:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002272:	e005      	b.n	8002280 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002276:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800227a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800227c:	e000      	b.n	8002280 <HAL_CAN_IRQHandler+0x336>
            break;
 800227e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	699a      	ldr	r2, [r3, #24]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800228e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2204      	movs	r2, #4
 8002296:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800229a:	2b00      	cmp	r3, #0
 800229c:	d008      	beq.n	80022b0 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80022a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022a4:	431a      	orrs	r2, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f000 f872 	bl	8002394 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80022b0:	bf00      	nop
 80022b2:	3728      	adds	r7, #40	@ 0x28
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80022c0:	bf00      	nop
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80022d4:	bf00      	nop
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80022e8:	bf00      	nop
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80022fc:	bf00      	nop
 80022fe:	370c      	adds	r7, #12
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr

08002308 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002310:	bf00      	nop
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002324:	bf00      	nop
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002338:	bf00      	nop
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr

08002344 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800234c:	bf00      	nop
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002360:	bf00      	nop
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002374:	bf00      	nop
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002388:	bf00      	nop
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800239c:	bf00      	nop
 800239e:	370c      	adds	r7, #12
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr

080023a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b085      	sub	sp, #20
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f003 0307 	and.w	r3, r3, #7
 80023b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023b8:	4b0c      	ldr	r3, [pc, #48]	@ (80023ec <__NVIC_SetPriorityGrouping+0x44>)
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023be:	68ba      	ldr	r2, [r7, #8]
 80023c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80023c4:	4013      	ands	r3, r2
 80023c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80023d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023da:	4a04      	ldr	r2, [pc, #16]	@ (80023ec <__NVIC_SetPriorityGrouping+0x44>)
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	60d3      	str	r3, [r2, #12]
}
 80023e0:	bf00      	nop
 80023e2:	3714      	adds	r7, #20
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr
 80023ec:	e000ed00 	.word	0xe000ed00

080023f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023f4:	4b04      	ldr	r3, [pc, #16]	@ (8002408 <__NVIC_GetPriorityGrouping+0x18>)
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	0a1b      	lsrs	r3, r3, #8
 80023fa:	f003 0307 	and.w	r3, r3, #7
}
 80023fe:	4618      	mov	r0, r3
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr
 8002408:	e000ed00 	.word	0xe000ed00

0800240c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	4603      	mov	r3, r0
 8002414:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800241a:	2b00      	cmp	r3, #0
 800241c:	db0b      	blt.n	8002436 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800241e:	79fb      	ldrb	r3, [r7, #7]
 8002420:	f003 021f 	and.w	r2, r3, #31
 8002424:	4907      	ldr	r1, [pc, #28]	@ (8002444 <__NVIC_EnableIRQ+0x38>)
 8002426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242a:	095b      	lsrs	r3, r3, #5
 800242c:	2001      	movs	r0, #1
 800242e:	fa00 f202 	lsl.w	r2, r0, r2
 8002432:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002436:	bf00      	nop
 8002438:	370c      	adds	r7, #12
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	e000e100 	.word	0xe000e100

08002448 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	4603      	mov	r3, r0
 8002450:	6039      	str	r1, [r7, #0]
 8002452:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002454:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002458:	2b00      	cmp	r3, #0
 800245a:	db0a      	blt.n	8002472 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	b2da      	uxtb	r2, r3
 8002460:	490c      	ldr	r1, [pc, #48]	@ (8002494 <__NVIC_SetPriority+0x4c>)
 8002462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002466:	0112      	lsls	r2, r2, #4
 8002468:	b2d2      	uxtb	r2, r2
 800246a:	440b      	add	r3, r1
 800246c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002470:	e00a      	b.n	8002488 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	b2da      	uxtb	r2, r3
 8002476:	4908      	ldr	r1, [pc, #32]	@ (8002498 <__NVIC_SetPriority+0x50>)
 8002478:	79fb      	ldrb	r3, [r7, #7]
 800247a:	f003 030f 	and.w	r3, r3, #15
 800247e:	3b04      	subs	r3, #4
 8002480:	0112      	lsls	r2, r2, #4
 8002482:	b2d2      	uxtb	r2, r2
 8002484:	440b      	add	r3, r1
 8002486:	761a      	strb	r2, [r3, #24]
}
 8002488:	bf00      	nop
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr
 8002494:	e000e100 	.word	0xe000e100
 8002498:	e000ed00 	.word	0xe000ed00

0800249c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800249c:	b480      	push	{r7}
 800249e:	b089      	sub	sp, #36	@ 0x24
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	60b9      	str	r1, [r7, #8]
 80024a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f003 0307 	and.w	r3, r3, #7
 80024ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	f1c3 0307 	rsb	r3, r3, #7
 80024b6:	2b04      	cmp	r3, #4
 80024b8:	bf28      	it	cs
 80024ba:	2304      	movcs	r3, #4
 80024bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	3304      	adds	r3, #4
 80024c2:	2b06      	cmp	r3, #6
 80024c4:	d902      	bls.n	80024cc <NVIC_EncodePriority+0x30>
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	3b03      	subs	r3, #3
 80024ca:	e000      	b.n	80024ce <NVIC_EncodePriority+0x32>
 80024cc:	2300      	movs	r3, #0
 80024ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024d0:	f04f 32ff 	mov.w	r2, #4294967295
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	fa02 f303 	lsl.w	r3, r2, r3
 80024da:	43da      	mvns	r2, r3
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	401a      	ands	r2, r3
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024e4:	f04f 31ff 	mov.w	r1, #4294967295
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	fa01 f303 	lsl.w	r3, r1, r3
 80024ee:	43d9      	mvns	r1, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024f4:	4313      	orrs	r3, r2
         );
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3724      	adds	r7, #36	@ 0x24
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
	...

08002504 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	3b01      	subs	r3, #1
 8002510:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002514:	d301      	bcc.n	800251a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002516:	2301      	movs	r3, #1
 8002518:	e00f      	b.n	800253a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800251a:	4a0a      	ldr	r2, [pc, #40]	@ (8002544 <SysTick_Config+0x40>)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	3b01      	subs	r3, #1
 8002520:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002522:	210f      	movs	r1, #15
 8002524:	f04f 30ff 	mov.w	r0, #4294967295
 8002528:	f7ff ff8e 	bl	8002448 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800252c:	4b05      	ldr	r3, [pc, #20]	@ (8002544 <SysTick_Config+0x40>)
 800252e:	2200      	movs	r2, #0
 8002530:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002532:	4b04      	ldr	r3, [pc, #16]	@ (8002544 <SysTick_Config+0x40>)
 8002534:	2207      	movs	r2, #7
 8002536:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	3708      	adds	r7, #8
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	e000e010 	.word	0xe000e010

08002548 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f7ff ff29 	bl	80023a8 <__NVIC_SetPriorityGrouping>
}
 8002556:	bf00      	nop
 8002558:	3708      	adds	r7, #8
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}

0800255e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800255e:	b580      	push	{r7, lr}
 8002560:	b086      	sub	sp, #24
 8002562:	af00      	add	r7, sp, #0
 8002564:	4603      	mov	r3, r0
 8002566:	60b9      	str	r1, [r7, #8]
 8002568:	607a      	str	r2, [r7, #4]
 800256a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800256c:	2300      	movs	r3, #0
 800256e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002570:	f7ff ff3e 	bl	80023f0 <__NVIC_GetPriorityGrouping>
 8002574:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	68b9      	ldr	r1, [r7, #8]
 800257a:	6978      	ldr	r0, [r7, #20]
 800257c:	f7ff ff8e 	bl	800249c <NVIC_EncodePriority>
 8002580:	4602      	mov	r2, r0
 8002582:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002586:	4611      	mov	r1, r2
 8002588:	4618      	mov	r0, r3
 800258a:	f7ff ff5d 	bl	8002448 <__NVIC_SetPriority>
}
 800258e:	bf00      	nop
 8002590:	3718      	adds	r7, #24
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}

08002596 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002596:	b580      	push	{r7, lr}
 8002598:	b082      	sub	sp, #8
 800259a:	af00      	add	r7, sp, #0
 800259c:	4603      	mov	r3, r0
 800259e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7ff ff31 	bl	800240c <__NVIC_EnableIRQ>
}
 80025aa:	bf00      	nop
 80025ac:	3708      	adds	r7, #8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b082      	sub	sp, #8
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f7ff ffa2 	bl	8002504 <SysTick_Config>
 80025c0:	4603      	mov	r3, r0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3708      	adds	r7, #8
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
	...

080025cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b086      	sub	sp, #24
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80025d4:	2300      	movs	r3, #0
 80025d6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80025d8:	f7ff f83e 	bl	8001658 <HAL_GetTick>
 80025dc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d101      	bne.n	80025e8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e099      	b.n	800271c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2202      	movs	r2, #2
 80025ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2200      	movs	r2, #0
 80025f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f022 0201 	bic.w	r2, r2, #1
 8002606:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002608:	e00f      	b.n	800262a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800260a:	f7ff f825 	bl	8001658 <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	2b05      	cmp	r3, #5
 8002616:	d908      	bls.n	800262a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2220      	movs	r2, #32
 800261c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2203      	movs	r2, #3
 8002622:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e078      	b.n	800271c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0301 	and.w	r3, r3, #1
 8002634:	2b00      	cmp	r3, #0
 8002636:	d1e8      	bne.n	800260a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002640:	697a      	ldr	r2, [r7, #20]
 8002642:	4b38      	ldr	r3, [pc, #224]	@ (8002724 <HAL_DMA_Init+0x158>)
 8002644:	4013      	ands	r3, r2
 8002646:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	685a      	ldr	r2, [r3, #4]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002656:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	691b      	ldr	r3, [r3, #16]
 800265c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002662:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	699b      	ldr	r3, [r3, #24]
 8002668:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800266e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6a1b      	ldr	r3, [r3, #32]
 8002674:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002676:	697a      	ldr	r2, [r7, #20]
 8002678:	4313      	orrs	r3, r2
 800267a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002680:	2b04      	cmp	r3, #4
 8002682:	d107      	bne.n	8002694 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800268c:	4313      	orrs	r3, r2
 800268e:	697a      	ldr	r2, [r7, #20]
 8002690:	4313      	orrs	r3, r2
 8002692:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	697a      	ldr	r2, [r7, #20]
 800269a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	695b      	ldr	r3, [r3, #20]
 80026a2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	f023 0307 	bic.w	r3, r3, #7
 80026aa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026b0:	697a      	ldr	r2, [r7, #20]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ba:	2b04      	cmp	r3, #4
 80026bc:	d117      	bne.n	80026ee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026c2:	697a      	ldr	r2, [r7, #20]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d00e      	beq.n	80026ee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f000 f9e9 	bl	8002aa8 <DMA_CheckFifoParam>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d008      	beq.n	80026ee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2240      	movs	r2, #64	@ 0x40
 80026e0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2201      	movs	r2, #1
 80026e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80026ea:	2301      	movs	r3, #1
 80026ec:	e016      	b.n	800271c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	697a      	ldr	r2, [r7, #20]
 80026f4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f000 f9a0 	bl	8002a3c <DMA_CalcBaseAndBitshift>
 80026fc:	4603      	mov	r3, r0
 80026fe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002704:	223f      	movs	r2, #63	@ 0x3f
 8002706:	409a      	lsls	r2, r3
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2200      	movs	r2, #0
 8002710:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2201      	movs	r2, #1
 8002716:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800271a:	2300      	movs	r3, #0
}
 800271c:	4618      	mov	r0, r3
 800271e:	3718      	adds	r7, #24
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	f010803f 	.word	0xf010803f

08002728 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b086      	sub	sp, #24
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002730:	2300      	movs	r3, #0
 8002732:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002734:	4b8e      	ldr	r3, [pc, #568]	@ (8002970 <HAL_DMA_IRQHandler+0x248>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a8e      	ldr	r2, [pc, #568]	@ (8002974 <HAL_DMA_IRQHandler+0x24c>)
 800273a:	fba2 2303 	umull	r2, r3, r2, r3
 800273e:	0a9b      	lsrs	r3, r3, #10
 8002740:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002746:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002752:	2208      	movs	r2, #8
 8002754:	409a      	lsls	r2, r3
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	4013      	ands	r3, r2
 800275a:	2b00      	cmp	r3, #0
 800275c:	d01a      	beq.n	8002794 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0304 	and.w	r3, r3, #4
 8002768:	2b00      	cmp	r3, #0
 800276a:	d013      	beq.n	8002794 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f022 0204 	bic.w	r2, r2, #4
 800277a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002780:	2208      	movs	r2, #8
 8002782:	409a      	lsls	r2, r3
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800278c:	f043 0201 	orr.w	r2, r3, #1
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002798:	2201      	movs	r2, #1
 800279a:	409a      	lsls	r2, r3
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	4013      	ands	r3, r2
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d012      	beq.n	80027ca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	695b      	ldr	r3, [r3, #20]
 80027aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d00b      	beq.n	80027ca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027b6:	2201      	movs	r2, #1
 80027b8:	409a      	lsls	r2, r3
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027c2:	f043 0202 	orr.w	r2, r3, #2
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027ce:	2204      	movs	r2, #4
 80027d0:	409a      	lsls	r2, r3
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	4013      	ands	r3, r2
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d012      	beq.n	8002800 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0302 	and.w	r3, r3, #2
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d00b      	beq.n	8002800 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027ec:	2204      	movs	r2, #4
 80027ee:	409a      	lsls	r2, r3
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027f8:	f043 0204 	orr.w	r2, r3, #4
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002804:	2210      	movs	r2, #16
 8002806:	409a      	lsls	r2, r3
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	4013      	ands	r3, r2
 800280c:	2b00      	cmp	r3, #0
 800280e:	d043      	beq.n	8002898 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0308 	and.w	r3, r3, #8
 800281a:	2b00      	cmp	r3, #0
 800281c:	d03c      	beq.n	8002898 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002822:	2210      	movs	r2, #16
 8002824:	409a      	lsls	r2, r3
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d018      	beq.n	800286a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d108      	bne.n	8002858 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800284a:	2b00      	cmp	r3, #0
 800284c:	d024      	beq.n	8002898 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	4798      	blx	r3
 8002856:	e01f      	b.n	8002898 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800285c:	2b00      	cmp	r3, #0
 800285e:	d01b      	beq.n	8002898 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	4798      	blx	r3
 8002868:	e016      	b.n	8002898 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002874:	2b00      	cmp	r3, #0
 8002876:	d107      	bne.n	8002888 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f022 0208 	bic.w	r2, r2, #8
 8002886:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800288c:	2b00      	cmp	r3, #0
 800288e:	d003      	beq.n	8002898 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800289c:	2220      	movs	r2, #32
 800289e:	409a      	lsls	r2, r3
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	4013      	ands	r3, r2
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	f000 808f 	beq.w	80029c8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0310 	and.w	r3, r3, #16
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	f000 8087 	beq.w	80029c8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028be:	2220      	movs	r2, #32
 80028c0:	409a      	lsls	r2, r3
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	2b05      	cmp	r3, #5
 80028d0:	d136      	bne.n	8002940 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f022 0216 	bic.w	r2, r2, #22
 80028e0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	695a      	ldr	r2, [r3, #20]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80028f0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d103      	bne.n	8002902 <HAL_DMA_IRQHandler+0x1da>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d007      	beq.n	8002912 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f022 0208 	bic.w	r2, r2, #8
 8002910:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002916:	223f      	movs	r2, #63	@ 0x3f
 8002918:	409a      	lsls	r2, r3
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2201      	movs	r2, #1
 8002922:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002932:	2b00      	cmp	r3, #0
 8002934:	d07e      	beq.n	8002a34 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	4798      	blx	r3
        }
        return;
 800293e:	e079      	b.n	8002a34 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d01d      	beq.n	800298a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d10d      	bne.n	8002978 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002960:	2b00      	cmp	r3, #0
 8002962:	d031      	beq.n	80029c8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	4798      	blx	r3
 800296c:	e02c      	b.n	80029c8 <HAL_DMA_IRQHandler+0x2a0>
 800296e:	bf00      	nop
 8002970:	20000000 	.word	0x20000000
 8002974:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800297c:	2b00      	cmp	r3, #0
 800297e:	d023      	beq.n	80029c8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	4798      	blx	r3
 8002988:	e01e      	b.n	80029c8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002994:	2b00      	cmp	r3, #0
 8002996:	d10f      	bne.n	80029b8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f022 0210 	bic.w	r2, r2, #16
 80029a6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d003      	beq.n	80029c8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d032      	beq.n	8002a36 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029d4:	f003 0301 	and.w	r3, r3, #1
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d022      	beq.n	8002a22 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2205      	movs	r2, #5
 80029e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f022 0201 	bic.w	r2, r2, #1
 80029f2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	3301      	adds	r3, #1
 80029f8:	60bb      	str	r3, [r7, #8]
 80029fa:	697a      	ldr	r2, [r7, #20]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d307      	bcc.n	8002a10 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0301 	and.w	r3, r3, #1
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d1f2      	bne.n	80029f4 <HAL_DMA_IRQHandler+0x2cc>
 8002a0e:	e000      	b.n	8002a12 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002a10:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2201      	movs	r2, #1
 8002a16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d005      	beq.n	8002a36 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	4798      	blx	r3
 8002a32:	e000      	b.n	8002a36 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002a34:	bf00      	nop
    }
  }
}
 8002a36:	3718      	adds	r7, #24
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b085      	sub	sp, #20
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	3b10      	subs	r3, #16
 8002a4c:	4a14      	ldr	r2, [pc, #80]	@ (8002aa0 <DMA_CalcBaseAndBitshift+0x64>)
 8002a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a52:	091b      	lsrs	r3, r3, #4
 8002a54:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002a56:	4a13      	ldr	r2, [pc, #76]	@ (8002aa4 <DMA_CalcBaseAndBitshift+0x68>)
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	461a      	mov	r2, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2b03      	cmp	r3, #3
 8002a68:	d909      	bls.n	8002a7e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002a72:	f023 0303 	bic.w	r3, r3, #3
 8002a76:	1d1a      	adds	r2, r3, #4
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	659a      	str	r2, [r3, #88]	@ 0x58
 8002a7c:	e007      	b.n	8002a8e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002a86:	f023 0303 	bic.w	r3, r3, #3
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3714      	adds	r7, #20
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	aaaaaaab 	.word	0xaaaaaaab
 8002aa4:	08006674 	.word	0x08006674

08002aa8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b085      	sub	sp, #20
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ab8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	699b      	ldr	r3, [r3, #24]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d11f      	bne.n	8002b02 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	2b03      	cmp	r3, #3
 8002ac6:	d856      	bhi.n	8002b76 <DMA_CheckFifoParam+0xce>
 8002ac8:	a201      	add	r2, pc, #4	@ (adr r2, 8002ad0 <DMA_CheckFifoParam+0x28>)
 8002aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ace:	bf00      	nop
 8002ad0:	08002ae1 	.word	0x08002ae1
 8002ad4:	08002af3 	.word	0x08002af3
 8002ad8:	08002ae1 	.word	0x08002ae1
 8002adc:	08002b77 	.word	0x08002b77
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ae4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d046      	beq.n	8002b7a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002af0:	e043      	b.n	8002b7a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002af6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002afa:	d140      	bne.n	8002b7e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b00:	e03d      	b.n	8002b7e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	699b      	ldr	r3, [r3, #24]
 8002b06:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b0a:	d121      	bne.n	8002b50 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	2b03      	cmp	r3, #3
 8002b10:	d837      	bhi.n	8002b82 <DMA_CheckFifoParam+0xda>
 8002b12:	a201      	add	r2, pc, #4	@ (adr r2, 8002b18 <DMA_CheckFifoParam+0x70>)
 8002b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b18:	08002b29 	.word	0x08002b29
 8002b1c:	08002b2f 	.word	0x08002b2f
 8002b20:	08002b29 	.word	0x08002b29
 8002b24:	08002b41 	.word	0x08002b41
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	73fb      	strb	r3, [r7, #15]
      break;
 8002b2c:	e030      	b.n	8002b90 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b32:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d025      	beq.n	8002b86 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b3e:	e022      	b.n	8002b86 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b44:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002b48:	d11f      	bne.n	8002b8a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002b4e:	e01c      	b.n	8002b8a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d903      	bls.n	8002b5e <DMA_CheckFifoParam+0xb6>
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	2b03      	cmp	r3, #3
 8002b5a:	d003      	beq.n	8002b64 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002b5c:	e018      	b.n	8002b90 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	73fb      	strb	r3, [r7, #15]
      break;
 8002b62:	e015      	b.n	8002b90 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b68:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d00e      	beq.n	8002b8e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	73fb      	strb	r3, [r7, #15]
      break;
 8002b74:	e00b      	b.n	8002b8e <DMA_CheckFifoParam+0xe6>
      break;
 8002b76:	bf00      	nop
 8002b78:	e00a      	b.n	8002b90 <DMA_CheckFifoParam+0xe8>
      break;
 8002b7a:	bf00      	nop
 8002b7c:	e008      	b.n	8002b90 <DMA_CheckFifoParam+0xe8>
      break;
 8002b7e:	bf00      	nop
 8002b80:	e006      	b.n	8002b90 <DMA_CheckFifoParam+0xe8>
      break;
 8002b82:	bf00      	nop
 8002b84:	e004      	b.n	8002b90 <DMA_CheckFifoParam+0xe8>
      break;
 8002b86:	bf00      	nop
 8002b88:	e002      	b.n	8002b90 <DMA_CheckFifoParam+0xe8>
      break;   
 8002b8a:	bf00      	nop
 8002b8c:	e000      	b.n	8002b90 <DMA_CheckFifoParam+0xe8>
      break;
 8002b8e:	bf00      	nop
    }
  } 
  
  return status; 
 8002b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3714      	adds	r7, #20
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop

08002ba0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b089      	sub	sp, #36	@ 0x24
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002baa:	2300      	movs	r3, #0
 8002bac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	61fb      	str	r3, [r7, #28]
 8002bba:	e16b      	b.n	8002e94 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	697a      	ldr	r2, [r7, #20]
 8002bcc:	4013      	ands	r3, r2
 8002bce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002bd0:	693a      	ldr	r2, [r7, #16]
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	f040 815a 	bne.w	8002e8e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f003 0303 	and.w	r3, r3, #3
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d005      	beq.n	8002bf2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d130      	bne.n	8002c54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	005b      	lsls	r3, r3, #1
 8002bfc:	2203      	movs	r2, #3
 8002bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002c02:	43db      	mvns	r3, r3
 8002c04:	69ba      	ldr	r2, [r7, #24]
 8002c06:	4013      	ands	r3, r2
 8002c08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	68da      	ldr	r2, [r3, #12]
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	005b      	lsls	r3, r3, #1
 8002c12:	fa02 f303 	lsl.w	r3, r2, r3
 8002c16:	69ba      	ldr	r2, [r7, #24]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	69ba      	ldr	r2, [r7, #24]
 8002c20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c28:	2201      	movs	r2, #1
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c30:	43db      	mvns	r3, r3
 8002c32:	69ba      	ldr	r2, [r7, #24]
 8002c34:	4013      	ands	r3, r2
 8002c36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	091b      	lsrs	r3, r3, #4
 8002c3e:	f003 0201 	and.w	r2, r3, #1
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	fa02 f303 	lsl.w	r3, r2, r3
 8002c48:	69ba      	ldr	r2, [r7, #24]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	69ba      	ldr	r2, [r7, #24]
 8002c52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f003 0303 	and.w	r3, r3, #3
 8002c5c:	2b03      	cmp	r3, #3
 8002c5e:	d017      	beq.n	8002c90 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	005b      	lsls	r3, r3, #1
 8002c6a:	2203      	movs	r2, #3
 8002c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c70:	43db      	mvns	r3, r3
 8002c72:	69ba      	ldr	r2, [r7, #24]
 8002c74:	4013      	ands	r3, r2
 8002c76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	689a      	ldr	r2, [r3, #8]
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	005b      	lsls	r3, r3, #1
 8002c80:	fa02 f303 	lsl.w	r3, r2, r3
 8002c84:	69ba      	ldr	r2, [r7, #24]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f003 0303 	and.w	r3, r3, #3
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	d123      	bne.n	8002ce4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	08da      	lsrs	r2, r3, #3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	3208      	adds	r2, #8
 8002ca4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ca8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	f003 0307 	and.w	r3, r3, #7
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	220f      	movs	r2, #15
 8002cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb8:	43db      	mvns	r3, r3
 8002cba:	69ba      	ldr	r2, [r7, #24]
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	691a      	ldr	r2, [r3, #16]
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	f003 0307 	and.w	r3, r3, #7
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd0:	69ba      	ldr	r2, [r7, #24]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	08da      	lsrs	r2, r3, #3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	3208      	adds	r2, #8
 8002cde:	69b9      	ldr	r1, [r7, #24]
 8002ce0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	005b      	lsls	r3, r3, #1
 8002cee:	2203      	movs	r2, #3
 8002cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf4:	43db      	mvns	r3, r3
 8002cf6:	69ba      	ldr	r2, [r7, #24]
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f003 0203 	and.w	r2, r3, #3
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	005b      	lsls	r3, r3, #1
 8002d08:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	69ba      	ldr	r2, [r7, #24]
 8002d16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	f000 80b4 	beq.w	8002e8e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d26:	2300      	movs	r3, #0
 8002d28:	60fb      	str	r3, [r7, #12]
 8002d2a:	4b60      	ldr	r3, [pc, #384]	@ (8002eac <HAL_GPIO_Init+0x30c>)
 8002d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d2e:	4a5f      	ldr	r2, [pc, #380]	@ (8002eac <HAL_GPIO_Init+0x30c>)
 8002d30:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d34:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d36:	4b5d      	ldr	r3, [pc, #372]	@ (8002eac <HAL_GPIO_Init+0x30c>)
 8002d38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d3e:	60fb      	str	r3, [r7, #12]
 8002d40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d42:	4a5b      	ldr	r2, [pc, #364]	@ (8002eb0 <HAL_GPIO_Init+0x310>)
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	089b      	lsrs	r3, r3, #2
 8002d48:	3302      	adds	r3, #2
 8002d4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	f003 0303 	and.w	r3, r3, #3
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	220f      	movs	r2, #15
 8002d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5e:	43db      	mvns	r3, r3
 8002d60:	69ba      	ldr	r2, [r7, #24]
 8002d62:	4013      	ands	r3, r2
 8002d64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a52      	ldr	r2, [pc, #328]	@ (8002eb4 <HAL_GPIO_Init+0x314>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d02b      	beq.n	8002dc6 <HAL_GPIO_Init+0x226>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a51      	ldr	r2, [pc, #324]	@ (8002eb8 <HAL_GPIO_Init+0x318>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d025      	beq.n	8002dc2 <HAL_GPIO_Init+0x222>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a50      	ldr	r2, [pc, #320]	@ (8002ebc <HAL_GPIO_Init+0x31c>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d01f      	beq.n	8002dbe <HAL_GPIO_Init+0x21e>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a4f      	ldr	r2, [pc, #316]	@ (8002ec0 <HAL_GPIO_Init+0x320>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d019      	beq.n	8002dba <HAL_GPIO_Init+0x21a>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a4e      	ldr	r2, [pc, #312]	@ (8002ec4 <HAL_GPIO_Init+0x324>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d013      	beq.n	8002db6 <HAL_GPIO_Init+0x216>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a4d      	ldr	r2, [pc, #308]	@ (8002ec8 <HAL_GPIO_Init+0x328>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d00d      	beq.n	8002db2 <HAL_GPIO_Init+0x212>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a4c      	ldr	r2, [pc, #304]	@ (8002ecc <HAL_GPIO_Init+0x32c>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d007      	beq.n	8002dae <HAL_GPIO_Init+0x20e>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a4b      	ldr	r2, [pc, #300]	@ (8002ed0 <HAL_GPIO_Init+0x330>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d101      	bne.n	8002daa <HAL_GPIO_Init+0x20a>
 8002da6:	2307      	movs	r3, #7
 8002da8:	e00e      	b.n	8002dc8 <HAL_GPIO_Init+0x228>
 8002daa:	2308      	movs	r3, #8
 8002dac:	e00c      	b.n	8002dc8 <HAL_GPIO_Init+0x228>
 8002dae:	2306      	movs	r3, #6
 8002db0:	e00a      	b.n	8002dc8 <HAL_GPIO_Init+0x228>
 8002db2:	2305      	movs	r3, #5
 8002db4:	e008      	b.n	8002dc8 <HAL_GPIO_Init+0x228>
 8002db6:	2304      	movs	r3, #4
 8002db8:	e006      	b.n	8002dc8 <HAL_GPIO_Init+0x228>
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e004      	b.n	8002dc8 <HAL_GPIO_Init+0x228>
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	e002      	b.n	8002dc8 <HAL_GPIO_Init+0x228>
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e000      	b.n	8002dc8 <HAL_GPIO_Init+0x228>
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	69fa      	ldr	r2, [r7, #28]
 8002dca:	f002 0203 	and.w	r2, r2, #3
 8002dce:	0092      	lsls	r2, r2, #2
 8002dd0:	4093      	lsls	r3, r2
 8002dd2:	69ba      	ldr	r2, [r7, #24]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002dd8:	4935      	ldr	r1, [pc, #212]	@ (8002eb0 <HAL_GPIO_Init+0x310>)
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	089b      	lsrs	r3, r3, #2
 8002dde:	3302      	adds	r3, #2
 8002de0:	69ba      	ldr	r2, [r7, #24]
 8002de2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002de6:	4b3b      	ldr	r3, [pc, #236]	@ (8002ed4 <HAL_GPIO_Init+0x334>)
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	43db      	mvns	r3, r3
 8002df0:	69ba      	ldr	r2, [r7, #24]
 8002df2:	4013      	ands	r3, r2
 8002df4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d003      	beq.n	8002e0a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002e02:	69ba      	ldr	r2, [r7, #24]
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e0a:	4a32      	ldr	r2, [pc, #200]	@ (8002ed4 <HAL_GPIO_Init+0x334>)
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e10:	4b30      	ldr	r3, [pc, #192]	@ (8002ed4 <HAL_GPIO_Init+0x334>)
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	43db      	mvns	r3, r3
 8002e1a:	69ba      	ldr	r2, [r7, #24]
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d003      	beq.n	8002e34 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002e2c:	69ba      	ldr	r2, [r7, #24]
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e34:	4a27      	ldr	r2, [pc, #156]	@ (8002ed4 <HAL_GPIO_Init+0x334>)
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e3a:	4b26      	ldr	r3, [pc, #152]	@ (8002ed4 <HAL_GPIO_Init+0x334>)
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	43db      	mvns	r3, r3
 8002e44:	69ba      	ldr	r2, [r7, #24]
 8002e46:	4013      	ands	r3, r2
 8002e48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d003      	beq.n	8002e5e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002e56:	69ba      	ldr	r2, [r7, #24]
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e5e:	4a1d      	ldr	r2, [pc, #116]	@ (8002ed4 <HAL_GPIO_Init+0x334>)
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e64:	4b1b      	ldr	r3, [pc, #108]	@ (8002ed4 <HAL_GPIO_Init+0x334>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	43db      	mvns	r3, r3
 8002e6e:	69ba      	ldr	r2, [r7, #24]
 8002e70:	4013      	ands	r3, r2
 8002e72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d003      	beq.n	8002e88 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002e80:	69ba      	ldr	r2, [r7, #24]
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e88:	4a12      	ldr	r2, [pc, #72]	@ (8002ed4 <HAL_GPIO_Init+0x334>)
 8002e8a:	69bb      	ldr	r3, [r7, #24]
 8002e8c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	3301      	adds	r3, #1
 8002e92:	61fb      	str	r3, [r7, #28]
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	2b0f      	cmp	r3, #15
 8002e98:	f67f ae90 	bls.w	8002bbc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e9c:	bf00      	nop
 8002e9e:	bf00      	nop
 8002ea0:	3724      	adds	r7, #36	@ 0x24
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	40023800 	.word	0x40023800
 8002eb0:	40013800 	.word	0x40013800
 8002eb4:	40020000 	.word	0x40020000
 8002eb8:	40020400 	.word	0x40020400
 8002ebc:	40020800 	.word	0x40020800
 8002ec0:	40020c00 	.word	0x40020c00
 8002ec4:	40021000 	.word	0x40021000
 8002ec8:	40021400 	.word	0x40021400
 8002ecc:	40021800 	.word	0x40021800
 8002ed0:	40021c00 	.word	0x40021c00
 8002ed4:	40013c00 	.word	0x40013c00

08002ed8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	460b      	mov	r3, r1
 8002ee2:	807b      	strh	r3, [r7, #2]
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ee8:	787b      	ldrb	r3, [r7, #1]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d003      	beq.n	8002ef6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002eee:	887a      	ldrh	r2, [r7, #2]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ef4:	e003      	b.n	8002efe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ef6:	887b      	ldrh	r3, [r7, #2]
 8002ef8:	041a      	lsls	r2, r3, #16
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	619a      	str	r2, [r3, #24]
}
 8002efe:	bf00      	nop
 8002f00:	370c      	adds	r7, #12
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr

08002f0a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f0a:	b480      	push	{r7}
 8002f0c:	b085      	sub	sp, #20
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	6078      	str	r0, [r7, #4]
 8002f12:	460b      	mov	r3, r1
 8002f14:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	695b      	ldr	r3, [r3, #20]
 8002f1a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002f1c:	887a      	ldrh	r2, [r7, #2]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	4013      	ands	r3, r2
 8002f22:	041a      	lsls	r2, r3, #16
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	43d9      	mvns	r1, r3
 8002f28:	887b      	ldrh	r3, [r7, #2]
 8002f2a:	400b      	ands	r3, r1
 8002f2c:	431a      	orrs	r2, r3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	619a      	str	r2, [r3, #24]
}
 8002f32:	bf00      	nop
 8002f34:	3714      	adds	r7, #20
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr
	...

08002f40 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	4603      	mov	r3, r0
 8002f48:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002f4a:	4b08      	ldr	r3, [pc, #32]	@ (8002f6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f4c:	695a      	ldr	r2, [r3, #20]
 8002f4e:	88fb      	ldrh	r3, [r7, #6]
 8002f50:	4013      	ands	r3, r2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d006      	beq.n	8002f64 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f56:	4a05      	ldr	r2, [pc, #20]	@ (8002f6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f58:	88fb      	ldrh	r3, [r7, #6]
 8002f5a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f5c:	88fb      	ldrh	r3, [r7, #6]
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f000 f806 	bl	8002f70 <HAL_GPIO_EXTI_Callback>
  }
}
 8002f64:	bf00      	nop
 8002f66:	3708      	adds	r7, #8
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	40013c00 	.word	0x40013c00

08002f70 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	4603      	mov	r3, r0
 8002f78:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002f7a:	bf00      	nop
 8002f7c:	370c      	adds	r7, #12
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
	...

08002f88 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b086      	sub	sp, #24
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d101      	bne.n	8002f9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e267      	b.n	800346a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0301 	and.w	r3, r3, #1
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d075      	beq.n	8003092 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fa6:	4b88      	ldr	r3, [pc, #544]	@ (80031c8 <HAL_RCC_OscConfig+0x240>)
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f003 030c 	and.w	r3, r3, #12
 8002fae:	2b04      	cmp	r3, #4
 8002fb0:	d00c      	beq.n	8002fcc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fb2:	4b85      	ldr	r3, [pc, #532]	@ (80031c8 <HAL_RCC_OscConfig+0x240>)
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fba:	2b08      	cmp	r3, #8
 8002fbc:	d112      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fbe:	4b82      	ldr	r3, [pc, #520]	@ (80031c8 <HAL_RCC_OscConfig+0x240>)
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fc6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002fca:	d10b      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fcc:	4b7e      	ldr	r3, [pc, #504]	@ (80031c8 <HAL_RCC_OscConfig+0x240>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d05b      	beq.n	8003090 <HAL_RCC_OscConfig+0x108>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d157      	bne.n	8003090 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e242      	b.n	800346a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fec:	d106      	bne.n	8002ffc <HAL_RCC_OscConfig+0x74>
 8002fee:	4b76      	ldr	r3, [pc, #472]	@ (80031c8 <HAL_RCC_OscConfig+0x240>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a75      	ldr	r2, [pc, #468]	@ (80031c8 <HAL_RCC_OscConfig+0x240>)
 8002ff4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ff8:	6013      	str	r3, [r2, #0]
 8002ffa:	e01d      	b.n	8003038 <HAL_RCC_OscConfig+0xb0>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003004:	d10c      	bne.n	8003020 <HAL_RCC_OscConfig+0x98>
 8003006:	4b70      	ldr	r3, [pc, #448]	@ (80031c8 <HAL_RCC_OscConfig+0x240>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a6f      	ldr	r2, [pc, #444]	@ (80031c8 <HAL_RCC_OscConfig+0x240>)
 800300c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003010:	6013      	str	r3, [r2, #0]
 8003012:	4b6d      	ldr	r3, [pc, #436]	@ (80031c8 <HAL_RCC_OscConfig+0x240>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a6c      	ldr	r2, [pc, #432]	@ (80031c8 <HAL_RCC_OscConfig+0x240>)
 8003018:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800301c:	6013      	str	r3, [r2, #0]
 800301e:	e00b      	b.n	8003038 <HAL_RCC_OscConfig+0xb0>
 8003020:	4b69      	ldr	r3, [pc, #420]	@ (80031c8 <HAL_RCC_OscConfig+0x240>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a68      	ldr	r2, [pc, #416]	@ (80031c8 <HAL_RCC_OscConfig+0x240>)
 8003026:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800302a:	6013      	str	r3, [r2, #0]
 800302c:	4b66      	ldr	r3, [pc, #408]	@ (80031c8 <HAL_RCC_OscConfig+0x240>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a65      	ldr	r2, [pc, #404]	@ (80031c8 <HAL_RCC_OscConfig+0x240>)
 8003032:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003036:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d013      	beq.n	8003068 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003040:	f7fe fb0a 	bl	8001658 <HAL_GetTick>
 8003044:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003046:	e008      	b.n	800305a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003048:	f7fe fb06 	bl	8001658 <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	2b64      	cmp	r3, #100	@ 0x64
 8003054:	d901      	bls.n	800305a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e207      	b.n	800346a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800305a:	4b5b      	ldr	r3, [pc, #364]	@ (80031c8 <HAL_RCC_OscConfig+0x240>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d0f0      	beq.n	8003048 <HAL_RCC_OscConfig+0xc0>
 8003066:	e014      	b.n	8003092 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003068:	f7fe faf6 	bl	8001658 <HAL_GetTick>
 800306c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800306e:	e008      	b.n	8003082 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003070:	f7fe faf2 	bl	8001658 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b64      	cmp	r3, #100	@ 0x64
 800307c:	d901      	bls.n	8003082 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e1f3      	b.n	800346a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003082:	4b51      	ldr	r3, [pc, #324]	@ (80031c8 <HAL_RCC_OscConfig+0x240>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d1f0      	bne.n	8003070 <HAL_RCC_OscConfig+0xe8>
 800308e:	e000      	b.n	8003092 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003090:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0302 	and.w	r3, r3, #2
 800309a:	2b00      	cmp	r3, #0
 800309c:	d063      	beq.n	8003166 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800309e:	4b4a      	ldr	r3, [pc, #296]	@ (80031c8 <HAL_RCC_OscConfig+0x240>)
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	f003 030c 	and.w	r3, r3, #12
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d00b      	beq.n	80030c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030aa:	4b47      	ldr	r3, [pc, #284]	@ (80031c8 <HAL_RCC_OscConfig+0x240>)
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030b2:	2b08      	cmp	r3, #8
 80030b4:	d11c      	bne.n	80030f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030b6:	4b44      	ldr	r3, [pc, #272]	@ (80031c8 <HAL_RCC_OscConfig+0x240>)
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d116      	bne.n	80030f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030c2:	4b41      	ldr	r3, [pc, #260]	@ (80031c8 <HAL_RCC_OscConfig+0x240>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0302 	and.w	r3, r3, #2
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d005      	beq.n	80030da <HAL_RCC_OscConfig+0x152>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d001      	beq.n	80030da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e1c7      	b.n	800346a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030da:	4b3b      	ldr	r3, [pc, #236]	@ (80031c8 <HAL_RCC_OscConfig+0x240>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	691b      	ldr	r3, [r3, #16]
 80030e6:	00db      	lsls	r3, r3, #3
 80030e8:	4937      	ldr	r1, [pc, #220]	@ (80031c8 <HAL_RCC_OscConfig+0x240>)
 80030ea:	4313      	orrs	r3, r2
 80030ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030ee:	e03a      	b.n	8003166 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d020      	beq.n	800313a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030f8:	4b34      	ldr	r3, [pc, #208]	@ (80031cc <HAL_RCC_OscConfig+0x244>)
 80030fa:	2201      	movs	r2, #1
 80030fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030fe:	f7fe faab 	bl	8001658 <HAL_GetTick>
 8003102:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003104:	e008      	b.n	8003118 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003106:	f7fe faa7 	bl	8001658 <HAL_GetTick>
 800310a:	4602      	mov	r2, r0
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	2b02      	cmp	r3, #2
 8003112:	d901      	bls.n	8003118 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	e1a8      	b.n	800346a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003118:	4b2b      	ldr	r3, [pc, #172]	@ (80031c8 <HAL_RCC_OscConfig+0x240>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0302 	and.w	r3, r3, #2
 8003120:	2b00      	cmp	r3, #0
 8003122:	d0f0      	beq.n	8003106 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003124:	4b28      	ldr	r3, [pc, #160]	@ (80031c8 <HAL_RCC_OscConfig+0x240>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	691b      	ldr	r3, [r3, #16]
 8003130:	00db      	lsls	r3, r3, #3
 8003132:	4925      	ldr	r1, [pc, #148]	@ (80031c8 <HAL_RCC_OscConfig+0x240>)
 8003134:	4313      	orrs	r3, r2
 8003136:	600b      	str	r3, [r1, #0]
 8003138:	e015      	b.n	8003166 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800313a:	4b24      	ldr	r3, [pc, #144]	@ (80031cc <HAL_RCC_OscConfig+0x244>)
 800313c:	2200      	movs	r2, #0
 800313e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003140:	f7fe fa8a 	bl	8001658 <HAL_GetTick>
 8003144:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003146:	e008      	b.n	800315a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003148:	f7fe fa86 	bl	8001658 <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b02      	cmp	r3, #2
 8003154:	d901      	bls.n	800315a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e187      	b.n	800346a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800315a:	4b1b      	ldr	r3, [pc, #108]	@ (80031c8 <HAL_RCC_OscConfig+0x240>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0302 	and.w	r3, r3, #2
 8003162:	2b00      	cmp	r3, #0
 8003164:	d1f0      	bne.n	8003148 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0308 	and.w	r3, r3, #8
 800316e:	2b00      	cmp	r3, #0
 8003170:	d036      	beq.n	80031e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	695b      	ldr	r3, [r3, #20]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d016      	beq.n	80031a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800317a:	4b15      	ldr	r3, [pc, #84]	@ (80031d0 <HAL_RCC_OscConfig+0x248>)
 800317c:	2201      	movs	r2, #1
 800317e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003180:	f7fe fa6a 	bl	8001658 <HAL_GetTick>
 8003184:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003186:	e008      	b.n	800319a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003188:	f7fe fa66 	bl	8001658 <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	2b02      	cmp	r3, #2
 8003194:	d901      	bls.n	800319a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e167      	b.n	800346a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800319a:	4b0b      	ldr	r3, [pc, #44]	@ (80031c8 <HAL_RCC_OscConfig+0x240>)
 800319c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800319e:	f003 0302 	and.w	r3, r3, #2
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d0f0      	beq.n	8003188 <HAL_RCC_OscConfig+0x200>
 80031a6:	e01b      	b.n	80031e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031a8:	4b09      	ldr	r3, [pc, #36]	@ (80031d0 <HAL_RCC_OscConfig+0x248>)
 80031aa:	2200      	movs	r2, #0
 80031ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031ae:	f7fe fa53 	bl	8001658 <HAL_GetTick>
 80031b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031b4:	e00e      	b.n	80031d4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031b6:	f7fe fa4f 	bl	8001658 <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d907      	bls.n	80031d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80031c4:	2303      	movs	r3, #3
 80031c6:	e150      	b.n	800346a <HAL_RCC_OscConfig+0x4e2>
 80031c8:	40023800 	.word	0x40023800
 80031cc:	42470000 	.word	0x42470000
 80031d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031d4:	4b88      	ldr	r3, [pc, #544]	@ (80033f8 <HAL_RCC_OscConfig+0x470>)
 80031d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031d8:	f003 0302 	and.w	r3, r3, #2
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d1ea      	bne.n	80031b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0304 	and.w	r3, r3, #4
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	f000 8097 	beq.w	800331c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031ee:	2300      	movs	r3, #0
 80031f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031f2:	4b81      	ldr	r3, [pc, #516]	@ (80033f8 <HAL_RCC_OscConfig+0x470>)
 80031f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d10f      	bne.n	800321e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031fe:	2300      	movs	r3, #0
 8003200:	60bb      	str	r3, [r7, #8]
 8003202:	4b7d      	ldr	r3, [pc, #500]	@ (80033f8 <HAL_RCC_OscConfig+0x470>)
 8003204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003206:	4a7c      	ldr	r2, [pc, #496]	@ (80033f8 <HAL_RCC_OscConfig+0x470>)
 8003208:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800320c:	6413      	str	r3, [r2, #64]	@ 0x40
 800320e:	4b7a      	ldr	r3, [pc, #488]	@ (80033f8 <HAL_RCC_OscConfig+0x470>)
 8003210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003212:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003216:	60bb      	str	r3, [r7, #8]
 8003218:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800321a:	2301      	movs	r3, #1
 800321c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800321e:	4b77      	ldr	r3, [pc, #476]	@ (80033fc <HAL_RCC_OscConfig+0x474>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003226:	2b00      	cmp	r3, #0
 8003228:	d118      	bne.n	800325c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800322a:	4b74      	ldr	r3, [pc, #464]	@ (80033fc <HAL_RCC_OscConfig+0x474>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a73      	ldr	r2, [pc, #460]	@ (80033fc <HAL_RCC_OscConfig+0x474>)
 8003230:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003234:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003236:	f7fe fa0f 	bl	8001658 <HAL_GetTick>
 800323a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800323c:	e008      	b.n	8003250 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800323e:	f7fe fa0b 	bl	8001658 <HAL_GetTick>
 8003242:	4602      	mov	r2, r0
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	2b02      	cmp	r3, #2
 800324a:	d901      	bls.n	8003250 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800324c:	2303      	movs	r3, #3
 800324e:	e10c      	b.n	800346a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003250:	4b6a      	ldr	r3, [pc, #424]	@ (80033fc <HAL_RCC_OscConfig+0x474>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003258:	2b00      	cmp	r3, #0
 800325a:	d0f0      	beq.n	800323e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	2b01      	cmp	r3, #1
 8003262:	d106      	bne.n	8003272 <HAL_RCC_OscConfig+0x2ea>
 8003264:	4b64      	ldr	r3, [pc, #400]	@ (80033f8 <HAL_RCC_OscConfig+0x470>)
 8003266:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003268:	4a63      	ldr	r2, [pc, #396]	@ (80033f8 <HAL_RCC_OscConfig+0x470>)
 800326a:	f043 0301 	orr.w	r3, r3, #1
 800326e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003270:	e01c      	b.n	80032ac <HAL_RCC_OscConfig+0x324>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	2b05      	cmp	r3, #5
 8003278:	d10c      	bne.n	8003294 <HAL_RCC_OscConfig+0x30c>
 800327a:	4b5f      	ldr	r3, [pc, #380]	@ (80033f8 <HAL_RCC_OscConfig+0x470>)
 800327c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800327e:	4a5e      	ldr	r2, [pc, #376]	@ (80033f8 <HAL_RCC_OscConfig+0x470>)
 8003280:	f043 0304 	orr.w	r3, r3, #4
 8003284:	6713      	str	r3, [r2, #112]	@ 0x70
 8003286:	4b5c      	ldr	r3, [pc, #368]	@ (80033f8 <HAL_RCC_OscConfig+0x470>)
 8003288:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800328a:	4a5b      	ldr	r2, [pc, #364]	@ (80033f8 <HAL_RCC_OscConfig+0x470>)
 800328c:	f043 0301 	orr.w	r3, r3, #1
 8003290:	6713      	str	r3, [r2, #112]	@ 0x70
 8003292:	e00b      	b.n	80032ac <HAL_RCC_OscConfig+0x324>
 8003294:	4b58      	ldr	r3, [pc, #352]	@ (80033f8 <HAL_RCC_OscConfig+0x470>)
 8003296:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003298:	4a57      	ldr	r2, [pc, #348]	@ (80033f8 <HAL_RCC_OscConfig+0x470>)
 800329a:	f023 0301 	bic.w	r3, r3, #1
 800329e:	6713      	str	r3, [r2, #112]	@ 0x70
 80032a0:	4b55      	ldr	r3, [pc, #340]	@ (80033f8 <HAL_RCC_OscConfig+0x470>)
 80032a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032a4:	4a54      	ldr	r2, [pc, #336]	@ (80033f8 <HAL_RCC_OscConfig+0x470>)
 80032a6:	f023 0304 	bic.w	r3, r3, #4
 80032aa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d015      	beq.n	80032e0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032b4:	f7fe f9d0 	bl	8001658 <HAL_GetTick>
 80032b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032ba:	e00a      	b.n	80032d2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032bc:	f7fe f9cc 	bl	8001658 <HAL_GetTick>
 80032c0:	4602      	mov	r2, r0
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d901      	bls.n	80032d2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e0cb      	b.n	800346a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032d2:	4b49      	ldr	r3, [pc, #292]	@ (80033f8 <HAL_RCC_OscConfig+0x470>)
 80032d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032d6:	f003 0302 	and.w	r3, r3, #2
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d0ee      	beq.n	80032bc <HAL_RCC_OscConfig+0x334>
 80032de:	e014      	b.n	800330a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032e0:	f7fe f9ba 	bl	8001658 <HAL_GetTick>
 80032e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032e6:	e00a      	b.n	80032fe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032e8:	f7fe f9b6 	bl	8001658 <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e0b5      	b.n	800346a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032fe:	4b3e      	ldr	r3, [pc, #248]	@ (80033f8 <HAL_RCC_OscConfig+0x470>)
 8003300:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003302:	f003 0302 	and.w	r3, r3, #2
 8003306:	2b00      	cmp	r3, #0
 8003308:	d1ee      	bne.n	80032e8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800330a:	7dfb      	ldrb	r3, [r7, #23]
 800330c:	2b01      	cmp	r3, #1
 800330e:	d105      	bne.n	800331c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003310:	4b39      	ldr	r3, [pc, #228]	@ (80033f8 <HAL_RCC_OscConfig+0x470>)
 8003312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003314:	4a38      	ldr	r2, [pc, #224]	@ (80033f8 <HAL_RCC_OscConfig+0x470>)
 8003316:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800331a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	699b      	ldr	r3, [r3, #24]
 8003320:	2b00      	cmp	r3, #0
 8003322:	f000 80a1 	beq.w	8003468 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003326:	4b34      	ldr	r3, [pc, #208]	@ (80033f8 <HAL_RCC_OscConfig+0x470>)
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f003 030c 	and.w	r3, r3, #12
 800332e:	2b08      	cmp	r3, #8
 8003330:	d05c      	beq.n	80033ec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	699b      	ldr	r3, [r3, #24]
 8003336:	2b02      	cmp	r3, #2
 8003338:	d141      	bne.n	80033be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800333a:	4b31      	ldr	r3, [pc, #196]	@ (8003400 <HAL_RCC_OscConfig+0x478>)
 800333c:	2200      	movs	r2, #0
 800333e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003340:	f7fe f98a 	bl	8001658 <HAL_GetTick>
 8003344:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003346:	e008      	b.n	800335a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003348:	f7fe f986 	bl	8001658 <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	2b02      	cmp	r3, #2
 8003354:	d901      	bls.n	800335a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e087      	b.n	800346a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800335a:	4b27      	ldr	r3, [pc, #156]	@ (80033f8 <HAL_RCC_OscConfig+0x470>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d1f0      	bne.n	8003348 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	69da      	ldr	r2, [r3, #28]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6a1b      	ldr	r3, [r3, #32]
 800336e:	431a      	orrs	r2, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003374:	019b      	lsls	r3, r3, #6
 8003376:	431a      	orrs	r2, r3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800337c:	085b      	lsrs	r3, r3, #1
 800337e:	3b01      	subs	r3, #1
 8003380:	041b      	lsls	r3, r3, #16
 8003382:	431a      	orrs	r2, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003388:	061b      	lsls	r3, r3, #24
 800338a:	491b      	ldr	r1, [pc, #108]	@ (80033f8 <HAL_RCC_OscConfig+0x470>)
 800338c:	4313      	orrs	r3, r2
 800338e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003390:	4b1b      	ldr	r3, [pc, #108]	@ (8003400 <HAL_RCC_OscConfig+0x478>)
 8003392:	2201      	movs	r2, #1
 8003394:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003396:	f7fe f95f 	bl	8001658 <HAL_GetTick>
 800339a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800339c:	e008      	b.n	80033b0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800339e:	f7fe f95b 	bl	8001658 <HAL_GetTick>
 80033a2:	4602      	mov	r2, r0
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	2b02      	cmp	r3, #2
 80033aa:	d901      	bls.n	80033b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80033ac:	2303      	movs	r3, #3
 80033ae:	e05c      	b.n	800346a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033b0:	4b11      	ldr	r3, [pc, #68]	@ (80033f8 <HAL_RCC_OscConfig+0x470>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d0f0      	beq.n	800339e <HAL_RCC_OscConfig+0x416>
 80033bc:	e054      	b.n	8003468 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033be:	4b10      	ldr	r3, [pc, #64]	@ (8003400 <HAL_RCC_OscConfig+0x478>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c4:	f7fe f948 	bl	8001658 <HAL_GetTick>
 80033c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033ca:	e008      	b.n	80033de <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033cc:	f7fe f944 	bl	8001658 <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d901      	bls.n	80033de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e045      	b.n	800346a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033de:	4b06      	ldr	r3, [pc, #24]	@ (80033f8 <HAL_RCC_OscConfig+0x470>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d1f0      	bne.n	80033cc <HAL_RCC_OscConfig+0x444>
 80033ea:	e03d      	b.n	8003468 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	699b      	ldr	r3, [r3, #24]
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d107      	bne.n	8003404 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e038      	b.n	800346a <HAL_RCC_OscConfig+0x4e2>
 80033f8:	40023800 	.word	0x40023800
 80033fc:	40007000 	.word	0x40007000
 8003400:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003404:	4b1b      	ldr	r3, [pc, #108]	@ (8003474 <HAL_RCC_OscConfig+0x4ec>)
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	699b      	ldr	r3, [r3, #24]
 800340e:	2b01      	cmp	r3, #1
 8003410:	d028      	beq.n	8003464 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800341c:	429a      	cmp	r2, r3
 800341e:	d121      	bne.n	8003464 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800342a:	429a      	cmp	r2, r3
 800342c:	d11a      	bne.n	8003464 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800342e:	68fa      	ldr	r2, [r7, #12]
 8003430:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003434:	4013      	ands	r3, r2
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800343a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800343c:	4293      	cmp	r3, r2
 800343e:	d111      	bne.n	8003464 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800344a:	085b      	lsrs	r3, r3, #1
 800344c:	3b01      	subs	r3, #1
 800344e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003450:	429a      	cmp	r2, r3
 8003452:	d107      	bne.n	8003464 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800345e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003460:	429a      	cmp	r2, r3
 8003462:	d001      	beq.n	8003468 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e000      	b.n	800346a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003468:	2300      	movs	r3, #0
}
 800346a:	4618      	mov	r0, r3
 800346c:	3718      	adds	r7, #24
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	40023800 	.word	0x40023800

08003478 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b084      	sub	sp, #16
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d101      	bne.n	800348c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e0cc      	b.n	8003626 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800348c:	4b68      	ldr	r3, [pc, #416]	@ (8003630 <HAL_RCC_ClockConfig+0x1b8>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0307 	and.w	r3, r3, #7
 8003494:	683a      	ldr	r2, [r7, #0]
 8003496:	429a      	cmp	r2, r3
 8003498:	d90c      	bls.n	80034b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800349a:	4b65      	ldr	r3, [pc, #404]	@ (8003630 <HAL_RCC_ClockConfig+0x1b8>)
 800349c:	683a      	ldr	r2, [r7, #0]
 800349e:	b2d2      	uxtb	r2, r2
 80034a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034a2:	4b63      	ldr	r3, [pc, #396]	@ (8003630 <HAL_RCC_ClockConfig+0x1b8>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0307 	and.w	r3, r3, #7
 80034aa:	683a      	ldr	r2, [r7, #0]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d001      	beq.n	80034b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e0b8      	b.n	8003626 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0302 	and.w	r3, r3, #2
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d020      	beq.n	8003502 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0304 	and.w	r3, r3, #4
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d005      	beq.n	80034d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034cc:	4b59      	ldr	r3, [pc, #356]	@ (8003634 <HAL_RCC_ClockConfig+0x1bc>)
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	4a58      	ldr	r2, [pc, #352]	@ (8003634 <HAL_RCC_ClockConfig+0x1bc>)
 80034d2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80034d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0308 	and.w	r3, r3, #8
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d005      	beq.n	80034f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034e4:	4b53      	ldr	r3, [pc, #332]	@ (8003634 <HAL_RCC_ClockConfig+0x1bc>)
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	4a52      	ldr	r2, [pc, #328]	@ (8003634 <HAL_RCC_ClockConfig+0x1bc>)
 80034ea:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80034ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034f0:	4b50      	ldr	r3, [pc, #320]	@ (8003634 <HAL_RCC_ClockConfig+0x1bc>)
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	494d      	ldr	r1, [pc, #308]	@ (8003634 <HAL_RCC_ClockConfig+0x1bc>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0301 	and.w	r3, r3, #1
 800350a:	2b00      	cmp	r3, #0
 800350c:	d044      	beq.n	8003598 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	2b01      	cmp	r3, #1
 8003514:	d107      	bne.n	8003526 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003516:	4b47      	ldr	r3, [pc, #284]	@ (8003634 <HAL_RCC_ClockConfig+0x1bc>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d119      	bne.n	8003556 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e07f      	b.n	8003626 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	2b02      	cmp	r3, #2
 800352c:	d003      	beq.n	8003536 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003532:	2b03      	cmp	r3, #3
 8003534:	d107      	bne.n	8003546 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003536:	4b3f      	ldr	r3, [pc, #252]	@ (8003634 <HAL_RCC_ClockConfig+0x1bc>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d109      	bne.n	8003556 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e06f      	b.n	8003626 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003546:	4b3b      	ldr	r3, [pc, #236]	@ (8003634 <HAL_RCC_ClockConfig+0x1bc>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0302 	and.w	r3, r3, #2
 800354e:	2b00      	cmp	r3, #0
 8003550:	d101      	bne.n	8003556 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e067      	b.n	8003626 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003556:	4b37      	ldr	r3, [pc, #220]	@ (8003634 <HAL_RCC_ClockConfig+0x1bc>)
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	f023 0203 	bic.w	r2, r3, #3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	4934      	ldr	r1, [pc, #208]	@ (8003634 <HAL_RCC_ClockConfig+0x1bc>)
 8003564:	4313      	orrs	r3, r2
 8003566:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003568:	f7fe f876 	bl	8001658 <HAL_GetTick>
 800356c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800356e:	e00a      	b.n	8003586 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003570:	f7fe f872 	bl	8001658 <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800357e:	4293      	cmp	r3, r2
 8003580:	d901      	bls.n	8003586 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e04f      	b.n	8003626 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003586:	4b2b      	ldr	r3, [pc, #172]	@ (8003634 <HAL_RCC_ClockConfig+0x1bc>)
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	f003 020c 	and.w	r2, r3, #12
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	429a      	cmp	r2, r3
 8003596:	d1eb      	bne.n	8003570 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003598:	4b25      	ldr	r3, [pc, #148]	@ (8003630 <HAL_RCC_ClockConfig+0x1b8>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0307 	and.w	r3, r3, #7
 80035a0:	683a      	ldr	r2, [r7, #0]
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d20c      	bcs.n	80035c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035a6:	4b22      	ldr	r3, [pc, #136]	@ (8003630 <HAL_RCC_ClockConfig+0x1b8>)
 80035a8:	683a      	ldr	r2, [r7, #0]
 80035aa:	b2d2      	uxtb	r2, r2
 80035ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ae:	4b20      	ldr	r3, [pc, #128]	@ (8003630 <HAL_RCC_ClockConfig+0x1b8>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0307 	and.w	r3, r3, #7
 80035b6:	683a      	ldr	r2, [r7, #0]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d001      	beq.n	80035c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e032      	b.n	8003626 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0304 	and.w	r3, r3, #4
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d008      	beq.n	80035de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035cc:	4b19      	ldr	r3, [pc, #100]	@ (8003634 <HAL_RCC_ClockConfig+0x1bc>)
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	4916      	ldr	r1, [pc, #88]	@ (8003634 <HAL_RCC_ClockConfig+0x1bc>)
 80035da:	4313      	orrs	r3, r2
 80035dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0308 	and.w	r3, r3, #8
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d009      	beq.n	80035fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035ea:	4b12      	ldr	r3, [pc, #72]	@ (8003634 <HAL_RCC_ClockConfig+0x1bc>)
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	691b      	ldr	r3, [r3, #16]
 80035f6:	00db      	lsls	r3, r3, #3
 80035f8:	490e      	ldr	r1, [pc, #56]	@ (8003634 <HAL_RCC_ClockConfig+0x1bc>)
 80035fa:	4313      	orrs	r3, r2
 80035fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80035fe:	f000 f821 	bl	8003644 <HAL_RCC_GetSysClockFreq>
 8003602:	4602      	mov	r2, r0
 8003604:	4b0b      	ldr	r3, [pc, #44]	@ (8003634 <HAL_RCC_ClockConfig+0x1bc>)
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	091b      	lsrs	r3, r3, #4
 800360a:	f003 030f 	and.w	r3, r3, #15
 800360e:	490a      	ldr	r1, [pc, #40]	@ (8003638 <HAL_RCC_ClockConfig+0x1c0>)
 8003610:	5ccb      	ldrb	r3, [r1, r3]
 8003612:	fa22 f303 	lsr.w	r3, r2, r3
 8003616:	4a09      	ldr	r2, [pc, #36]	@ (800363c <HAL_RCC_ClockConfig+0x1c4>)
 8003618:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800361a:	4b09      	ldr	r3, [pc, #36]	@ (8003640 <HAL_RCC_ClockConfig+0x1c8>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4618      	mov	r0, r3
 8003620:	f7fd ffd6 	bl	80015d0 <HAL_InitTick>

  return HAL_OK;
 8003624:	2300      	movs	r3, #0
}
 8003626:	4618      	mov	r0, r3
 8003628:	3710      	adds	r7, #16
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	40023c00 	.word	0x40023c00
 8003634:	40023800 	.word	0x40023800
 8003638:	0800665c 	.word	0x0800665c
 800363c:	20000000 	.word	0x20000000
 8003640:	20000004 	.word	0x20000004

08003644 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003644:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003648:	b094      	sub	sp, #80	@ 0x50
 800364a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800364c:	2300      	movs	r3, #0
 800364e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003650:	2300      	movs	r3, #0
 8003652:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003654:	2300      	movs	r3, #0
 8003656:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003658:	2300      	movs	r3, #0
 800365a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800365c:	4b79      	ldr	r3, [pc, #484]	@ (8003844 <HAL_RCC_GetSysClockFreq+0x200>)
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	f003 030c 	and.w	r3, r3, #12
 8003664:	2b08      	cmp	r3, #8
 8003666:	d00d      	beq.n	8003684 <HAL_RCC_GetSysClockFreq+0x40>
 8003668:	2b08      	cmp	r3, #8
 800366a:	f200 80e1 	bhi.w	8003830 <HAL_RCC_GetSysClockFreq+0x1ec>
 800366e:	2b00      	cmp	r3, #0
 8003670:	d002      	beq.n	8003678 <HAL_RCC_GetSysClockFreq+0x34>
 8003672:	2b04      	cmp	r3, #4
 8003674:	d003      	beq.n	800367e <HAL_RCC_GetSysClockFreq+0x3a>
 8003676:	e0db      	b.n	8003830 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003678:	4b73      	ldr	r3, [pc, #460]	@ (8003848 <HAL_RCC_GetSysClockFreq+0x204>)
 800367a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 800367c:	e0db      	b.n	8003836 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800367e:	4b73      	ldr	r3, [pc, #460]	@ (800384c <HAL_RCC_GetSysClockFreq+0x208>)
 8003680:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003682:	e0d8      	b.n	8003836 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003684:	4b6f      	ldr	r3, [pc, #444]	@ (8003844 <HAL_RCC_GetSysClockFreq+0x200>)
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800368c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800368e:	4b6d      	ldr	r3, [pc, #436]	@ (8003844 <HAL_RCC_GetSysClockFreq+0x200>)
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d063      	beq.n	8003762 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800369a:	4b6a      	ldr	r3, [pc, #424]	@ (8003844 <HAL_RCC_GetSysClockFreq+0x200>)
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	099b      	lsrs	r3, r3, #6
 80036a0:	2200      	movs	r2, #0
 80036a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80036a4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80036a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80036ae:	2300      	movs	r3, #0
 80036b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80036b2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80036b6:	4622      	mov	r2, r4
 80036b8:	462b      	mov	r3, r5
 80036ba:	f04f 0000 	mov.w	r0, #0
 80036be:	f04f 0100 	mov.w	r1, #0
 80036c2:	0159      	lsls	r1, r3, #5
 80036c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036c8:	0150      	lsls	r0, r2, #5
 80036ca:	4602      	mov	r2, r0
 80036cc:	460b      	mov	r3, r1
 80036ce:	4621      	mov	r1, r4
 80036d0:	1a51      	subs	r1, r2, r1
 80036d2:	6139      	str	r1, [r7, #16]
 80036d4:	4629      	mov	r1, r5
 80036d6:	eb63 0301 	sbc.w	r3, r3, r1
 80036da:	617b      	str	r3, [r7, #20]
 80036dc:	f04f 0200 	mov.w	r2, #0
 80036e0:	f04f 0300 	mov.w	r3, #0
 80036e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80036e8:	4659      	mov	r1, fp
 80036ea:	018b      	lsls	r3, r1, #6
 80036ec:	4651      	mov	r1, sl
 80036ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80036f2:	4651      	mov	r1, sl
 80036f4:	018a      	lsls	r2, r1, #6
 80036f6:	4651      	mov	r1, sl
 80036f8:	ebb2 0801 	subs.w	r8, r2, r1
 80036fc:	4659      	mov	r1, fp
 80036fe:	eb63 0901 	sbc.w	r9, r3, r1
 8003702:	f04f 0200 	mov.w	r2, #0
 8003706:	f04f 0300 	mov.w	r3, #0
 800370a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800370e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003712:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003716:	4690      	mov	r8, r2
 8003718:	4699      	mov	r9, r3
 800371a:	4623      	mov	r3, r4
 800371c:	eb18 0303 	adds.w	r3, r8, r3
 8003720:	60bb      	str	r3, [r7, #8]
 8003722:	462b      	mov	r3, r5
 8003724:	eb49 0303 	adc.w	r3, r9, r3
 8003728:	60fb      	str	r3, [r7, #12]
 800372a:	f04f 0200 	mov.w	r2, #0
 800372e:	f04f 0300 	mov.w	r3, #0
 8003732:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003736:	4629      	mov	r1, r5
 8003738:	024b      	lsls	r3, r1, #9
 800373a:	4621      	mov	r1, r4
 800373c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003740:	4621      	mov	r1, r4
 8003742:	024a      	lsls	r2, r1, #9
 8003744:	4610      	mov	r0, r2
 8003746:	4619      	mov	r1, r3
 8003748:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800374a:	2200      	movs	r2, #0
 800374c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800374e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003750:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003754:	f7fc fd38 	bl	80001c8 <__aeabi_uldivmod>
 8003758:	4602      	mov	r2, r0
 800375a:	460b      	mov	r3, r1
 800375c:	4613      	mov	r3, r2
 800375e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003760:	e058      	b.n	8003814 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003762:	4b38      	ldr	r3, [pc, #224]	@ (8003844 <HAL_RCC_GetSysClockFreq+0x200>)
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	099b      	lsrs	r3, r3, #6
 8003768:	2200      	movs	r2, #0
 800376a:	4618      	mov	r0, r3
 800376c:	4611      	mov	r1, r2
 800376e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003772:	623b      	str	r3, [r7, #32]
 8003774:	2300      	movs	r3, #0
 8003776:	627b      	str	r3, [r7, #36]	@ 0x24
 8003778:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800377c:	4642      	mov	r2, r8
 800377e:	464b      	mov	r3, r9
 8003780:	f04f 0000 	mov.w	r0, #0
 8003784:	f04f 0100 	mov.w	r1, #0
 8003788:	0159      	lsls	r1, r3, #5
 800378a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800378e:	0150      	lsls	r0, r2, #5
 8003790:	4602      	mov	r2, r0
 8003792:	460b      	mov	r3, r1
 8003794:	4641      	mov	r1, r8
 8003796:	ebb2 0a01 	subs.w	sl, r2, r1
 800379a:	4649      	mov	r1, r9
 800379c:	eb63 0b01 	sbc.w	fp, r3, r1
 80037a0:	f04f 0200 	mov.w	r2, #0
 80037a4:	f04f 0300 	mov.w	r3, #0
 80037a8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80037ac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80037b0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80037b4:	ebb2 040a 	subs.w	r4, r2, sl
 80037b8:	eb63 050b 	sbc.w	r5, r3, fp
 80037bc:	f04f 0200 	mov.w	r2, #0
 80037c0:	f04f 0300 	mov.w	r3, #0
 80037c4:	00eb      	lsls	r3, r5, #3
 80037c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037ca:	00e2      	lsls	r2, r4, #3
 80037cc:	4614      	mov	r4, r2
 80037ce:	461d      	mov	r5, r3
 80037d0:	4643      	mov	r3, r8
 80037d2:	18e3      	adds	r3, r4, r3
 80037d4:	603b      	str	r3, [r7, #0]
 80037d6:	464b      	mov	r3, r9
 80037d8:	eb45 0303 	adc.w	r3, r5, r3
 80037dc:	607b      	str	r3, [r7, #4]
 80037de:	f04f 0200 	mov.w	r2, #0
 80037e2:	f04f 0300 	mov.w	r3, #0
 80037e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80037ea:	4629      	mov	r1, r5
 80037ec:	028b      	lsls	r3, r1, #10
 80037ee:	4621      	mov	r1, r4
 80037f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80037f4:	4621      	mov	r1, r4
 80037f6:	028a      	lsls	r2, r1, #10
 80037f8:	4610      	mov	r0, r2
 80037fa:	4619      	mov	r1, r3
 80037fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80037fe:	2200      	movs	r2, #0
 8003800:	61bb      	str	r3, [r7, #24]
 8003802:	61fa      	str	r2, [r7, #28]
 8003804:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003808:	f7fc fcde 	bl	80001c8 <__aeabi_uldivmod>
 800380c:	4602      	mov	r2, r0
 800380e:	460b      	mov	r3, r1
 8003810:	4613      	mov	r3, r2
 8003812:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003814:	4b0b      	ldr	r3, [pc, #44]	@ (8003844 <HAL_RCC_GetSysClockFreq+0x200>)
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	0c1b      	lsrs	r3, r3, #16
 800381a:	f003 0303 	and.w	r3, r3, #3
 800381e:	3301      	adds	r3, #1
 8003820:	005b      	lsls	r3, r3, #1
 8003822:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003824:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003826:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003828:	fbb2 f3f3 	udiv	r3, r2, r3
 800382c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800382e:	e002      	b.n	8003836 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003830:	4b05      	ldr	r3, [pc, #20]	@ (8003848 <HAL_RCC_GetSysClockFreq+0x204>)
 8003832:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003834:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003836:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003838:	4618      	mov	r0, r3
 800383a:	3750      	adds	r7, #80	@ 0x50
 800383c:	46bd      	mov	sp, r7
 800383e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003842:	bf00      	nop
 8003844:	40023800 	.word	0x40023800
 8003848:	00f42400 	.word	0x00f42400
 800384c:	007a1200 	.word	0x007a1200

08003850 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003850:	b480      	push	{r7}
 8003852:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003854:	4b03      	ldr	r3, [pc, #12]	@ (8003864 <HAL_RCC_GetHCLKFreq+0x14>)
 8003856:	681b      	ldr	r3, [r3, #0]
}
 8003858:	4618      	mov	r0, r3
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr
 8003862:	bf00      	nop
 8003864:	20000000 	.word	0x20000000

08003868 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800386c:	f7ff fff0 	bl	8003850 <HAL_RCC_GetHCLKFreq>
 8003870:	4602      	mov	r2, r0
 8003872:	4b05      	ldr	r3, [pc, #20]	@ (8003888 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	0a9b      	lsrs	r3, r3, #10
 8003878:	f003 0307 	and.w	r3, r3, #7
 800387c:	4903      	ldr	r1, [pc, #12]	@ (800388c <HAL_RCC_GetPCLK1Freq+0x24>)
 800387e:	5ccb      	ldrb	r3, [r1, r3]
 8003880:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003884:	4618      	mov	r0, r3
 8003886:	bd80      	pop	{r7, pc}
 8003888:	40023800 	.word	0x40023800
 800388c:	0800666c 	.word	0x0800666c

08003890 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003894:	f7ff ffdc 	bl	8003850 <HAL_RCC_GetHCLKFreq>
 8003898:	4602      	mov	r2, r0
 800389a:	4b05      	ldr	r3, [pc, #20]	@ (80038b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	0b5b      	lsrs	r3, r3, #13
 80038a0:	f003 0307 	and.w	r3, r3, #7
 80038a4:	4903      	ldr	r1, [pc, #12]	@ (80038b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038a6:	5ccb      	ldrb	r3, [r1, r3]
 80038a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	40023800 	.word	0x40023800
 80038b4:	0800666c 	.word	0x0800666c

080038b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d101      	bne.n	80038ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e07b      	b.n	80039c2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d108      	bne.n	80038e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80038da:	d009      	beq.n	80038f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	61da      	str	r2, [r3, #28]
 80038e2:	e005      	b.n	80038f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d106      	bne.n	8003910 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f7fd fbbc 	bl	8001088 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2202      	movs	r2, #2
 8003914:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003926:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003938:	431a      	orrs	r2, r3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	68db      	ldr	r3, [r3, #12]
 800393e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003942:	431a      	orrs	r2, r3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	691b      	ldr	r3, [r3, #16]
 8003948:	f003 0302 	and.w	r3, r3, #2
 800394c:	431a      	orrs	r2, r3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	695b      	ldr	r3, [r3, #20]
 8003952:	f003 0301 	and.w	r3, r3, #1
 8003956:	431a      	orrs	r2, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	699b      	ldr	r3, [r3, #24]
 800395c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003960:	431a      	orrs	r2, r3
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	69db      	ldr	r3, [r3, #28]
 8003966:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800396a:	431a      	orrs	r2, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6a1b      	ldr	r3, [r3, #32]
 8003970:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003974:	ea42 0103 	orr.w	r1, r2, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800397c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	430a      	orrs	r2, r1
 8003986:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	699b      	ldr	r3, [r3, #24]
 800398c:	0c1b      	lsrs	r3, r3, #16
 800398e:	f003 0104 	and.w	r1, r3, #4
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003996:	f003 0210 	and.w	r2, r3, #16
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	430a      	orrs	r2, r1
 80039a0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	69da      	ldr	r2, [r3, #28]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80039b0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80039c0:	2300      	movs	r3, #0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3708      	adds	r7, #8
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}

080039ca <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039ca:	b580      	push	{r7, lr}
 80039cc:	b088      	sub	sp, #32
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	60f8      	str	r0, [r7, #12]
 80039d2:	60b9      	str	r1, [r7, #8]
 80039d4:	603b      	str	r3, [r7, #0]
 80039d6:	4613      	mov	r3, r2
 80039d8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80039da:	2300      	movs	r3, #0
 80039dc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d101      	bne.n	80039ec <HAL_SPI_Transmit+0x22>
 80039e8:	2302      	movs	r3, #2
 80039ea:	e12d      	b.n	8003c48 <HAL_SPI_Transmit+0x27e>
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80039f4:	f7fd fe30 	bl	8001658 <HAL_GetTick>
 80039f8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80039fa:	88fb      	ldrh	r3, [r7, #6]
 80039fc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d002      	beq.n	8003a10 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003a0a:	2302      	movs	r3, #2
 8003a0c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003a0e:	e116      	b.n	8003c3e <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d002      	beq.n	8003a1c <HAL_SPI_Transmit+0x52>
 8003a16:	88fb      	ldrh	r3, [r7, #6]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d102      	bne.n	8003a22 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003a20:	e10d      	b.n	8003c3e <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2203      	movs	r2, #3
 8003a26:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	68ba      	ldr	r2, [r7, #8]
 8003a34:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	88fa      	ldrh	r2, [r7, #6]
 8003a3a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	88fa      	ldrh	r2, [r7, #6]
 8003a40:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2200      	movs	r2, #0
 8003a46:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2200      	movs	r2, #0
 8003a52:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2200      	movs	r2, #0
 8003a58:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a68:	d10f      	bne.n	8003a8a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a78:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003a88:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a94:	2b40      	cmp	r3, #64	@ 0x40
 8003a96:	d007      	beq.n	8003aa8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003aa6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ab0:	d14f      	bne.n	8003b52 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d002      	beq.n	8003ac0 <HAL_SPI_Transmit+0xf6>
 8003aba:	8afb      	ldrh	r3, [r7, #22]
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d142      	bne.n	8003b46 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ac4:	881a      	ldrh	r2, [r3, #0]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ad0:	1c9a      	adds	r2, r3, #2
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	3b01      	subs	r3, #1
 8003ade:	b29a      	uxth	r2, r3
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003ae4:	e02f      	b.n	8003b46 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	f003 0302 	and.w	r3, r3, #2
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d112      	bne.n	8003b1a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003af8:	881a      	ldrh	r2, [r3, #0]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b04:	1c9a      	adds	r2, r3, #2
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	3b01      	subs	r3, #1
 8003b12:	b29a      	uxth	r2, r3
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003b18:	e015      	b.n	8003b46 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b1a:	f7fd fd9d 	bl	8001658 <HAL_GetTick>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	69bb      	ldr	r3, [r7, #24]
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	683a      	ldr	r2, [r7, #0]
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d803      	bhi.n	8003b32 <HAL_SPI_Transmit+0x168>
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b30:	d102      	bne.n	8003b38 <HAL_SPI_Transmit+0x16e>
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d106      	bne.n	8003b46 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003b38:	2303      	movs	r3, #3
 8003b3a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003b44:	e07b      	b.n	8003c3e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d1ca      	bne.n	8003ae6 <HAL_SPI_Transmit+0x11c>
 8003b50:	e050      	b.n	8003bf4 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d002      	beq.n	8003b60 <HAL_SPI_Transmit+0x196>
 8003b5a:	8afb      	ldrh	r3, [r7, #22]
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d144      	bne.n	8003bea <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	330c      	adds	r3, #12
 8003b6a:	7812      	ldrb	r2, [r2, #0]
 8003b6c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b72:	1c5a      	adds	r2, r3, #1
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	3b01      	subs	r3, #1
 8003b80:	b29a      	uxth	r2, r3
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003b86:	e030      	b.n	8003bea <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	f003 0302 	and.w	r3, r3, #2
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d113      	bne.n	8003bbe <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	330c      	adds	r3, #12
 8003ba0:	7812      	ldrb	r2, [r2, #0]
 8003ba2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ba8:	1c5a      	adds	r2, r3, #1
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	3b01      	subs	r3, #1
 8003bb6:	b29a      	uxth	r2, r3
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003bbc:	e015      	b.n	8003bea <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003bbe:	f7fd fd4b 	bl	8001658 <HAL_GetTick>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	683a      	ldr	r2, [r7, #0]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d803      	bhi.n	8003bd6 <HAL_SPI_Transmit+0x20c>
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd4:	d102      	bne.n	8003bdc <HAL_SPI_Transmit+0x212>
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d106      	bne.n	8003bea <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003be8:	e029      	b.n	8003c3e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d1c9      	bne.n	8003b88 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003bf4:	69ba      	ldr	r2, [r7, #24]
 8003bf6:	6839      	ldr	r1, [r7, #0]
 8003bf8:	68f8      	ldr	r0, [r7, #12]
 8003bfa:	f000 fbdf 	bl	80043bc <SPI_EndRxTxTransaction>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d002      	beq.n	8003c0a <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2220      	movs	r2, #32
 8003c08:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d10a      	bne.n	8003c28 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c12:	2300      	movs	r3, #0
 8003c14:	613b      	str	r3, [r7, #16]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	613b      	str	r3, [r7, #16]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	613b      	str	r3, [r7, #16]
 8003c26:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d002      	beq.n	8003c36 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	77fb      	strb	r3, [r7, #31]
 8003c34:	e003      	b.n	8003c3e <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2201      	movs	r2, #1
 8003c3a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003c46:	7ffb      	ldrb	r3, [r7, #31]
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3720      	adds	r7, #32
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}

08003c50 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b088      	sub	sp, #32
 8003c54:	af02      	add	r7, sp, #8
 8003c56:	60f8      	str	r0, [r7, #12]
 8003c58:	60b9      	str	r1, [r7, #8]
 8003c5a:	603b      	str	r3, [r7, #0]
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003c60:	2300      	movs	r3, #0
 8003c62:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d002      	beq.n	8003c76 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8003c70:	2302      	movs	r3, #2
 8003c72:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003c74:	e0fb      	b.n	8003e6e <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c7e:	d112      	bne.n	8003ca6 <HAL_SPI_Receive+0x56>
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d10e      	bne.n	8003ca6 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2204      	movs	r2, #4
 8003c8c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003c90:	88fa      	ldrh	r2, [r7, #6]
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	9300      	str	r3, [sp, #0]
 8003c96:	4613      	mov	r3, r2
 8003c98:	68ba      	ldr	r2, [r7, #8]
 8003c9a:	68b9      	ldr	r1, [r7, #8]
 8003c9c:	68f8      	ldr	r0, [r7, #12]
 8003c9e:	f000 f8ef 	bl	8003e80 <HAL_SPI_TransmitReceive>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	e0e8      	b.n	8003e78 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d101      	bne.n	8003cb4 <HAL_SPI_Receive+0x64>
 8003cb0:	2302      	movs	r3, #2
 8003cb2:	e0e1      	b.n	8003e78 <HAL_SPI_Receive+0x228>
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003cbc:	f7fd fccc 	bl	8001658 <HAL_GetTick>
 8003cc0:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d002      	beq.n	8003cce <HAL_SPI_Receive+0x7e>
 8003cc8:	88fb      	ldrh	r3, [r7, #6]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d102      	bne.n	8003cd4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003cd2:	e0cc      	b.n	8003e6e <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2204      	movs	r2, #4
 8003cd8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	68ba      	ldr	r2, [r7, #8]
 8003ce6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	88fa      	ldrh	r2, [r7, #6]
 8003cec:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	88fa      	ldrh	r2, [r7, #6]
 8003cf2:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2200      	movs	r2, #0
 8003d04:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d1a:	d10f      	bne.n	8003d3c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d2a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003d3a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d46:	2b40      	cmp	r3, #64	@ 0x40
 8003d48:	d007      	beq.n	8003d5a <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003d58:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d16a      	bne.n	8003e38 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003d62:	e032      	b.n	8003dca <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	f003 0301 	and.w	r3, r3, #1
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d115      	bne.n	8003d9e <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f103 020c 	add.w	r2, r3, #12
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d7e:	7812      	ldrb	r2, [r2, #0]
 8003d80:	b2d2      	uxtb	r2, r2
 8003d82:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d88:	1c5a      	adds	r2, r3, #1
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	3b01      	subs	r3, #1
 8003d96:	b29a      	uxth	r2, r3
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003d9c:	e015      	b.n	8003dca <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d9e:	f7fd fc5b 	bl	8001658 <HAL_GetTick>
 8003da2:	4602      	mov	r2, r0
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	683a      	ldr	r2, [r7, #0]
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d803      	bhi.n	8003db6 <HAL_SPI_Receive+0x166>
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003db4:	d102      	bne.n	8003dbc <HAL_SPI_Receive+0x16c>
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d106      	bne.n	8003dca <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003dc8:	e051      	b.n	8003e6e <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d1c7      	bne.n	8003d64 <HAL_SPI_Receive+0x114>
 8003dd4:	e035      	b.n	8003e42 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	f003 0301 	and.w	r3, r3, #1
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d113      	bne.n	8003e0c <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	68da      	ldr	r2, [r3, #12]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dee:	b292      	uxth	r2, r2
 8003df0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003df6:	1c9a      	adds	r2, r3, #2
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	3b01      	subs	r3, #1
 8003e04:	b29a      	uxth	r2, r3
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003e0a:	e015      	b.n	8003e38 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e0c:	f7fd fc24 	bl	8001658 <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	683a      	ldr	r2, [r7, #0]
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d803      	bhi.n	8003e24 <HAL_SPI_Receive+0x1d4>
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e22:	d102      	bne.n	8003e2a <HAL_SPI_Receive+0x1da>
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d106      	bne.n	8003e38 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2201      	movs	r2, #1
 8003e32:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003e36:	e01a      	b.n	8003e6e <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d1c9      	bne.n	8003dd6 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e42:	693a      	ldr	r2, [r7, #16]
 8003e44:	6839      	ldr	r1, [r7, #0]
 8003e46:	68f8      	ldr	r0, [r7, #12]
 8003e48:	f000 fa52 	bl	80042f0 <SPI_EndRxTransaction>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d002      	beq.n	8003e58 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2220      	movs	r2, #32
 8003e56:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d002      	beq.n	8003e66 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	75fb      	strb	r3, [r7, #23]
 8003e64:	e003      	b.n	8003e6e <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2201      	movs	r2, #1
 8003e6a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2200      	movs	r2, #0
 8003e72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003e76:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3718      	adds	r7, #24
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b08c      	sub	sp, #48	@ 0x30
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	60f8      	str	r0, [r7, #12]
 8003e88:	60b9      	str	r1, [r7, #8]
 8003e8a:	607a      	str	r2, [r7, #4]
 8003e8c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003e92:	2300      	movs	r3, #0
 8003e94:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d101      	bne.n	8003ea6 <HAL_SPI_TransmitReceive+0x26>
 8003ea2:	2302      	movs	r3, #2
 8003ea4:	e198      	b.n	80041d8 <HAL_SPI_TransmitReceive+0x358>
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003eae:	f7fd fbd3 	bl	8001658 <HAL_GetTick>
 8003eb2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003eba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003ec4:	887b      	ldrh	r3, [r7, #2]
 8003ec6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003ec8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d00f      	beq.n	8003ef0 <HAL_SPI_TransmitReceive+0x70>
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ed6:	d107      	bne.n	8003ee8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d103      	bne.n	8003ee8 <HAL_SPI_TransmitReceive+0x68>
 8003ee0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003ee4:	2b04      	cmp	r3, #4
 8003ee6:	d003      	beq.n	8003ef0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003ee8:	2302      	movs	r3, #2
 8003eea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8003eee:	e16d      	b.n	80041cc <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d005      	beq.n	8003f02 <HAL_SPI_TransmitReceive+0x82>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d002      	beq.n	8003f02 <HAL_SPI_TransmitReceive+0x82>
 8003efc:	887b      	ldrh	r3, [r7, #2]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d103      	bne.n	8003f0a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8003f08:	e160      	b.n	80041cc <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	2b04      	cmp	r3, #4
 8003f14:	d003      	beq.n	8003f1e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2205      	movs	r2, #5
 8003f1a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2200      	movs	r2, #0
 8003f22:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	887a      	ldrh	r2, [r7, #2]
 8003f2e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	887a      	ldrh	r2, [r7, #2]
 8003f34:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	68ba      	ldr	r2, [r7, #8]
 8003f3a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	887a      	ldrh	r2, [r7, #2]
 8003f40:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	887a      	ldrh	r2, [r7, #2]
 8003f46:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2200      	movs	r2, #0
 8003f52:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f5e:	2b40      	cmp	r3, #64	@ 0x40
 8003f60:	d007      	beq.n	8003f72 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003f70:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f7a:	d17c      	bne.n	8004076 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d002      	beq.n	8003f8a <HAL_SPI_TransmitReceive+0x10a>
 8003f84:	8b7b      	ldrh	r3, [r7, #26]
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d16a      	bne.n	8004060 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f8e:	881a      	ldrh	r2, [r3, #0]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f9a:	1c9a      	adds	r2, r3, #2
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	3b01      	subs	r3, #1
 8003fa8:	b29a      	uxth	r2, r3
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003fae:	e057      	b.n	8004060 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	f003 0302 	and.w	r3, r3, #2
 8003fba:	2b02      	cmp	r3, #2
 8003fbc:	d11b      	bne.n	8003ff6 <HAL_SPI_TransmitReceive+0x176>
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d016      	beq.n	8003ff6 <HAL_SPI_TransmitReceive+0x176>
 8003fc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d113      	bne.n	8003ff6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fd2:	881a      	ldrh	r2, [r3, #0]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fde:	1c9a      	adds	r2, r3, #2
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	3b01      	subs	r3, #1
 8003fec:	b29a      	uxth	r2, r3
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	f003 0301 	and.w	r3, r3, #1
 8004000:	2b01      	cmp	r3, #1
 8004002:	d119      	bne.n	8004038 <HAL_SPI_TransmitReceive+0x1b8>
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004008:	b29b      	uxth	r3, r3
 800400a:	2b00      	cmp	r3, #0
 800400c:	d014      	beq.n	8004038 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	68da      	ldr	r2, [r3, #12]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004018:	b292      	uxth	r2, r2
 800401a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004020:	1c9a      	adds	r2, r3, #2
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800402a:	b29b      	uxth	r3, r3
 800402c:	3b01      	subs	r3, #1
 800402e:	b29a      	uxth	r2, r3
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004034:	2301      	movs	r3, #1
 8004036:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004038:	f7fd fb0e 	bl	8001658 <HAL_GetTick>
 800403c:	4602      	mov	r2, r0
 800403e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004044:	429a      	cmp	r2, r3
 8004046:	d80b      	bhi.n	8004060 <HAL_SPI_TransmitReceive+0x1e0>
 8004048:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800404a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800404e:	d007      	beq.n	8004060 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8004050:	2303      	movs	r3, #3
 8004052:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2201      	movs	r2, #1
 800405a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 800405e:	e0b5      	b.n	80041cc <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004064:	b29b      	uxth	r3, r3
 8004066:	2b00      	cmp	r3, #0
 8004068:	d1a2      	bne.n	8003fb0 <HAL_SPI_TransmitReceive+0x130>
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800406e:	b29b      	uxth	r3, r3
 8004070:	2b00      	cmp	r3, #0
 8004072:	d19d      	bne.n	8003fb0 <HAL_SPI_TransmitReceive+0x130>
 8004074:	e080      	b.n	8004178 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d002      	beq.n	8004084 <HAL_SPI_TransmitReceive+0x204>
 800407e:	8b7b      	ldrh	r3, [r7, #26]
 8004080:	2b01      	cmp	r3, #1
 8004082:	d16f      	bne.n	8004164 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	330c      	adds	r3, #12
 800408e:	7812      	ldrb	r2, [r2, #0]
 8004090:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004096:	1c5a      	adds	r2, r3, #1
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	3b01      	subs	r3, #1
 80040a4:	b29a      	uxth	r2, r3
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040aa:	e05b      	b.n	8004164 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	f003 0302 	and.w	r3, r3, #2
 80040b6:	2b02      	cmp	r3, #2
 80040b8:	d11c      	bne.n	80040f4 <HAL_SPI_TransmitReceive+0x274>
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80040be:	b29b      	uxth	r3, r3
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d017      	beq.n	80040f4 <HAL_SPI_TransmitReceive+0x274>
 80040c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d114      	bne.n	80040f4 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	330c      	adds	r3, #12
 80040d4:	7812      	ldrb	r2, [r2, #0]
 80040d6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040dc:	1c5a      	adds	r2, r3, #1
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	3b01      	subs	r3, #1
 80040ea:	b29a      	uxth	r2, r3
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80040f0:	2300      	movs	r3, #0
 80040f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	f003 0301 	and.w	r3, r3, #1
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d119      	bne.n	8004136 <HAL_SPI_TransmitReceive+0x2b6>
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004106:	b29b      	uxth	r3, r3
 8004108:	2b00      	cmp	r3, #0
 800410a:	d014      	beq.n	8004136 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	68da      	ldr	r2, [r3, #12]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004116:	b2d2      	uxtb	r2, r2
 8004118:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800411e:	1c5a      	adds	r2, r3, #1
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004128:	b29b      	uxth	r3, r3
 800412a:	3b01      	subs	r3, #1
 800412c:	b29a      	uxth	r2, r3
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004132:	2301      	movs	r3, #1
 8004134:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004136:	f7fd fa8f 	bl	8001658 <HAL_GetTick>
 800413a:	4602      	mov	r2, r0
 800413c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004142:	429a      	cmp	r2, r3
 8004144:	d803      	bhi.n	800414e <HAL_SPI_TransmitReceive+0x2ce>
 8004146:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800414c:	d102      	bne.n	8004154 <HAL_SPI_TransmitReceive+0x2d4>
 800414e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004150:	2b00      	cmp	r3, #0
 8004152:	d107      	bne.n	8004164 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8004154:	2303      	movs	r3, #3
 8004156:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2201      	movs	r2, #1
 800415e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8004162:	e033      	b.n	80041cc <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004168:	b29b      	uxth	r3, r3
 800416a:	2b00      	cmp	r3, #0
 800416c:	d19e      	bne.n	80040ac <HAL_SPI_TransmitReceive+0x22c>
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004172:	b29b      	uxth	r3, r3
 8004174:	2b00      	cmp	r3, #0
 8004176:	d199      	bne.n	80040ac <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004178:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800417a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800417c:	68f8      	ldr	r0, [r7, #12]
 800417e:	f000 f91d 	bl	80043bc <SPI_EndRxTxTransaction>
 8004182:	4603      	mov	r3, r0
 8004184:	2b00      	cmp	r3, #0
 8004186:	d006      	beq.n	8004196 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2220      	movs	r2, #32
 8004192:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8004194:	e01a      	b.n	80041cc <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d10a      	bne.n	80041b4 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800419e:	2300      	movs	r3, #0
 80041a0:	617b      	str	r3, [r7, #20]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	617b      	str	r3, [r7, #20]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	617b      	str	r3, [r7, #20]
 80041b2:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d003      	beq.n	80041c4 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80041c2:	e003      	b.n	80041cc <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2200      	movs	r2, #0
 80041d0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80041d4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3730      	adds	r7, #48	@ 0x30
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}

080041e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b088      	sub	sp, #32
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	60b9      	str	r1, [r7, #8]
 80041ea:	603b      	str	r3, [r7, #0]
 80041ec:	4613      	mov	r3, r2
 80041ee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80041f0:	f7fd fa32 	bl	8001658 <HAL_GetTick>
 80041f4:	4602      	mov	r2, r0
 80041f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041f8:	1a9b      	subs	r3, r3, r2
 80041fa:	683a      	ldr	r2, [r7, #0]
 80041fc:	4413      	add	r3, r2
 80041fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004200:	f7fd fa2a 	bl	8001658 <HAL_GetTick>
 8004204:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004206:	4b39      	ldr	r3, [pc, #228]	@ (80042ec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	015b      	lsls	r3, r3, #5
 800420c:	0d1b      	lsrs	r3, r3, #20
 800420e:	69fa      	ldr	r2, [r7, #28]
 8004210:	fb02 f303 	mul.w	r3, r2, r3
 8004214:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004216:	e054      	b.n	80042c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800421e:	d050      	beq.n	80042c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004220:	f7fd fa1a 	bl	8001658 <HAL_GetTick>
 8004224:	4602      	mov	r2, r0
 8004226:	69bb      	ldr	r3, [r7, #24]
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	69fa      	ldr	r2, [r7, #28]
 800422c:	429a      	cmp	r2, r3
 800422e:	d902      	bls.n	8004236 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d13d      	bne.n	80042b2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	685a      	ldr	r2, [r3, #4]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004244:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800424e:	d111      	bne.n	8004274 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004258:	d004      	beq.n	8004264 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004262:	d107      	bne.n	8004274 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004272:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004278:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800427c:	d10f      	bne.n	800429e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800428c:	601a      	str	r2, [r3, #0]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800429c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2201      	movs	r2, #1
 80042a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e017      	b.n	80042e2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d101      	bne.n	80042bc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80042b8:	2300      	movs	r3, #0
 80042ba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	3b01      	subs	r3, #1
 80042c0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	689a      	ldr	r2, [r3, #8]
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	4013      	ands	r3, r2
 80042cc:	68ba      	ldr	r2, [r7, #8]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	bf0c      	ite	eq
 80042d2:	2301      	moveq	r3, #1
 80042d4:	2300      	movne	r3, #0
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	461a      	mov	r2, r3
 80042da:	79fb      	ldrb	r3, [r7, #7]
 80042dc:	429a      	cmp	r2, r3
 80042de:	d19b      	bne.n	8004218 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80042e0:	2300      	movs	r3, #0
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3720      	adds	r7, #32
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	20000000 	.word	0x20000000

080042f0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b086      	sub	sp, #24
 80042f4:	af02      	add	r7, sp, #8
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004304:	d111      	bne.n	800432a <SPI_EndRxTransaction+0x3a>
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800430e:	d004      	beq.n	800431a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004318:	d107      	bne.n	800432a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004328:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004332:	d12a      	bne.n	800438a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800433c:	d012      	beq.n	8004364 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	9300      	str	r3, [sp, #0]
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	2200      	movs	r2, #0
 8004346:	2180      	movs	r1, #128	@ 0x80
 8004348:	68f8      	ldr	r0, [r7, #12]
 800434a:	f7ff ff49 	bl	80041e0 <SPI_WaitFlagStateUntilTimeout>
 800434e:	4603      	mov	r3, r0
 8004350:	2b00      	cmp	r3, #0
 8004352:	d02d      	beq.n	80043b0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004358:	f043 0220 	orr.w	r2, r3, #32
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004360:	2303      	movs	r3, #3
 8004362:	e026      	b.n	80043b2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	9300      	str	r3, [sp, #0]
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	2200      	movs	r2, #0
 800436c:	2101      	movs	r1, #1
 800436e:	68f8      	ldr	r0, [r7, #12]
 8004370:	f7ff ff36 	bl	80041e0 <SPI_WaitFlagStateUntilTimeout>
 8004374:	4603      	mov	r3, r0
 8004376:	2b00      	cmp	r3, #0
 8004378:	d01a      	beq.n	80043b0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800437e:	f043 0220 	orr.w	r2, r3, #32
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e013      	b.n	80043b2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	9300      	str	r3, [sp, #0]
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	2200      	movs	r2, #0
 8004392:	2101      	movs	r1, #1
 8004394:	68f8      	ldr	r0, [r7, #12]
 8004396:	f7ff ff23 	bl	80041e0 <SPI_WaitFlagStateUntilTimeout>
 800439a:	4603      	mov	r3, r0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d007      	beq.n	80043b0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043a4:	f043 0220 	orr.w	r2, r3, #32
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80043ac:	2303      	movs	r3, #3
 80043ae:	e000      	b.n	80043b2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80043b0:	2300      	movs	r3, #0
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3710      	adds	r7, #16
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
	...

080043bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b088      	sub	sp, #32
 80043c0:	af02      	add	r7, sp, #8
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	9300      	str	r3, [sp, #0]
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	2201      	movs	r2, #1
 80043d0:	2102      	movs	r1, #2
 80043d2:	68f8      	ldr	r0, [r7, #12]
 80043d4:	f7ff ff04 	bl	80041e0 <SPI_WaitFlagStateUntilTimeout>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d007      	beq.n	80043ee <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043e2:	f043 0220 	orr.w	r2, r3, #32
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80043ea:	2303      	movs	r3, #3
 80043ec:	e032      	b.n	8004454 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80043ee:	4b1b      	ldr	r3, [pc, #108]	@ (800445c <SPI_EndRxTxTransaction+0xa0>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a1b      	ldr	r2, [pc, #108]	@ (8004460 <SPI_EndRxTxTransaction+0xa4>)
 80043f4:	fba2 2303 	umull	r2, r3, r2, r3
 80043f8:	0d5b      	lsrs	r3, r3, #21
 80043fa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80043fe:	fb02 f303 	mul.w	r3, r2, r3
 8004402:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800440c:	d112      	bne.n	8004434 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	9300      	str	r3, [sp, #0]
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	2200      	movs	r2, #0
 8004416:	2180      	movs	r1, #128	@ 0x80
 8004418:	68f8      	ldr	r0, [r7, #12]
 800441a:	f7ff fee1 	bl	80041e0 <SPI_WaitFlagStateUntilTimeout>
 800441e:	4603      	mov	r3, r0
 8004420:	2b00      	cmp	r3, #0
 8004422:	d016      	beq.n	8004452 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004428:	f043 0220 	orr.w	r2, r3, #32
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004430:	2303      	movs	r3, #3
 8004432:	e00f      	b.n	8004454 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d00a      	beq.n	8004450 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	3b01      	subs	r3, #1
 800443e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800444a:	2b80      	cmp	r3, #128	@ 0x80
 800444c:	d0f2      	beq.n	8004434 <SPI_EndRxTxTransaction+0x78>
 800444e:	e000      	b.n	8004452 <SPI_EndRxTxTransaction+0x96>
        break;
 8004450:	bf00      	nop
  }

  return HAL_OK;
 8004452:	2300      	movs	r3, #0
}
 8004454:	4618      	mov	r0, r3
 8004456:	3718      	adds	r7, #24
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}
 800445c:	20000000 	.word	0x20000000
 8004460:	165e9f81 	.word	0x165e9f81

08004464 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b082      	sub	sp, #8
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d101      	bne.n	8004476 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e041      	b.n	80044fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800447c:	b2db      	uxtb	r3, r3
 800447e:	2b00      	cmp	r3, #0
 8004480:	d106      	bne.n	8004490 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f7fc fe44 	bl	8001118 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2202      	movs	r2, #2
 8004494:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	3304      	adds	r3, #4
 80044a0:	4619      	mov	r1, r3
 80044a2:	4610      	mov	r0, r2
 80044a4:	f000 fc1e 	bl	8004ce4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3708      	adds	r7, #8
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
	...

08004504 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004504:	b480      	push	{r7}
 8004506:	b085      	sub	sp, #20
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004512:	b2db      	uxtb	r3, r3
 8004514:	2b01      	cmp	r3, #1
 8004516:	d001      	beq.n	800451c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e046      	b.n	80045aa <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2202      	movs	r2, #2
 8004520:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a23      	ldr	r2, [pc, #140]	@ (80045b8 <HAL_TIM_Base_Start+0xb4>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d022      	beq.n	8004574 <HAL_TIM_Base_Start+0x70>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004536:	d01d      	beq.n	8004574 <HAL_TIM_Base_Start+0x70>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a1f      	ldr	r2, [pc, #124]	@ (80045bc <HAL_TIM_Base_Start+0xb8>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d018      	beq.n	8004574 <HAL_TIM_Base_Start+0x70>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a1e      	ldr	r2, [pc, #120]	@ (80045c0 <HAL_TIM_Base_Start+0xbc>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d013      	beq.n	8004574 <HAL_TIM_Base_Start+0x70>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a1c      	ldr	r2, [pc, #112]	@ (80045c4 <HAL_TIM_Base_Start+0xc0>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d00e      	beq.n	8004574 <HAL_TIM_Base_Start+0x70>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a1b      	ldr	r2, [pc, #108]	@ (80045c8 <HAL_TIM_Base_Start+0xc4>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d009      	beq.n	8004574 <HAL_TIM_Base_Start+0x70>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a19      	ldr	r2, [pc, #100]	@ (80045cc <HAL_TIM_Base_Start+0xc8>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d004      	beq.n	8004574 <HAL_TIM_Base_Start+0x70>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a18      	ldr	r2, [pc, #96]	@ (80045d0 <HAL_TIM_Base_Start+0xcc>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d111      	bne.n	8004598 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	f003 0307 	and.w	r3, r3, #7
 800457e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2b06      	cmp	r3, #6
 8004584:	d010      	beq.n	80045a8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f042 0201 	orr.w	r2, r2, #1
 8004594:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004596:	e007      	b.n	80045a8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f042 0201 	orr.w	r2, r2, #1
 80045a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80045a8:	2300      	movs	r3, #0
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3714      	adds	r7, #20
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr
 80045b6:	bf00      	nop
 80045b8:	40010000 	.word	0x40010000
 80045bc:	40000400 	.word	0x40000400
 80045c0:	40000800 	.word	0x40000800
 80045c4:	40000c00 	.word	0x40000c00
 80045c8:	40010400 	.word	0x40010400
 80045cc:	40014000 	.word	0x40014000
 80045d0:	40001800 	.word	0x40001800

080045d4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	6a1a      	ldr	r2, [r3, #32]
 80045e2:	f241 1311 	movw	r3, #4369	@ 0x1111
 80045e6:	4013      	ands	r3, r2
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d10f      	bne.n	800460c <HAL_TIM_Base_Stop+0x38>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	6a1a      	ldr	r2, [r3, #32]
 80045f2:	f240 4344 	movw	r3, #1092	@ 0x444
 80045f6:	4013      	ands	r3, r2
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d107      	bne.n	800460c <HAL_TIM_Base_Stop+0x38>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f022 0201 	bic.w	r2, r2, #1
 800460a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8004614:	2300      	movs	r3, #0
}
 8004616:	4618      	mov	r0, r3
 8004618:	370c      	adds	r7, #12
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr

08004622 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004622:	b580      	push	{r7, lr}
 8004624:	b082      	sub	sp, #8
 8004626:	af00      	add	r7, sp, #0
 8004628:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d101      	bne.n	8004634 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e041      	b.n	80046b8 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800463a:	b2db      	uxtb	r3, r3
 800463c:	2b00      	cmp	r3, #0
 800463e:	d106      	bne.n	800464e <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f000 f839 	bl	80046c0 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2202      	movs	r2, #2
 8004652:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	3304      	adds	r3, #4
 800465e:	4619      	mov	r1, r3
 8004660:	4610      	mov	r0, r2
 8004662:	f000 fb3f 	bl	8004ce4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2201      	movs	r2, #1
 800466a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2201      	movs	r2, #1
 8004672:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2201      	movs	r2, #1
 800467a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2201      	movs	r2, #1
 8004682:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2201      	movs	r2, #1
 800468a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2201      	movs	r2, #1
 8004692:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2201      	movs	r2, #1
 800469a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2201      	movs	r2, #1
 80046a2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2201      	movs	r2, #1
 80046aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2201      	movs	r2, #1
 80046b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80046b6:	2300      	movs	r3, #0
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3708      	adds	r7, #8
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b083      	sub	sp, #12
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80046c8:	bf00      	nop
 80046ca:	370c      	adds	r7, #12
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr

080046d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b082      	sub	sp, #8
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d101      	bne.n	80046e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e041      	b.n	800476a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d106      	bne.n	8004700 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f000 f839 	bl	8004772 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2202      	movs	r2, #2
 8004704:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	3304      	adds	r3, #4
 8004710:	4619      	mov	r1, r3
 8004712:	4610      	mov	r0, r2
 8004714:	f000 fae6 	bl	8004ce4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004768:	2300      	movs	r3, #0
}
 800476a:	4618      	mov	r0, r3
 800476c:	3708      	adds	r7, #8
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}

08004772 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004772:	b480      	push	{r7}
 8004774:	b083      	sub	sp, #12
 8004776:	af00      	add	r7, sp, #0
 8004778:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800477a:	bf00      	nop
 800477c:	370c      	adds	r7, #12
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr
	...

08004788 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b084      	sub	sp, #16
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d109      	bne.n	80047ac <HAL_TIM_PWM_Start+0x24>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	bf14      	ite	ne
 80047a4:	2301      	movne	r3, #1
 80047a6:	2300      	moveq	r3, #0
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	e022      	b.n	80047f2 <HAL_TIM_PWM_Start+0x6a>
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	2b04      	cmp	r3, #4
 80047b0:	d109      	bne.n	80047c6 <HAL_TIM_PWM_Start+0x3e>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	bf14      	ite	ne
 80047be:	2301      	movne	r3, #1
 80047c0:	2300      	moveq	r3, #0
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	e015      	b.n	80047f2 <HAL_TIM_PWM_Start+0x6a>
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	2b08      	cmp	r3, #8
 80047ca:	d109      	bne.n	80047e0 <HAL_TIM_PWM_Start+0x58>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	bf14      	ite	ne
 80047d8:	2301      	movne	r3, #1
 80047da:	2300      	moveq	r3, #0
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	e008      	b.n	80047f2 <HAL_TIM_PWM_Start+0x6a>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	bf14      	ite	ne
 80047ec:	2301      	movne	r3, #1
 80047ee:	2300      	moveq	r3, #0
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d001      	beq.n	80047fa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e07c      	b.n	80048f4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d104      	bne.n	800480a <HAL_TIM_PWM_Start+0x82>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2202      	movs	r2, #2
 8004804:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004808:	e013      	b.n	8004832 <HAL_TIM_PWM_Start+0xaa>
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	2b04      	cmp	r3, #4
 800480e:	d104      	bne.n	800481a <HAL_TIM_PWM_Start+0x92>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2202      	movs	r2, #2
 8004814:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004818:	e00b      	b.n	8004832 <HAL_TIM_PWM_Start+0xaa>
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	2b08      	cmp	r3, #8
 800481e:	d104      	bne.n	800482a <HAL_TIM_PWM_Start+0xa2>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2202      	movs	r2, #2
 8004824:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004828:	e003      	b.n	8004832 <HAL_TIM_PWM_Start+0xaa>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2202      	movs	r2, #2
 800482e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	2201      	movs	r2, #1
 8004838:	6839      	ldr	r1, [r7, #0]
 800483a:	4618      	mov	r0, r3
 800483c:	f000 fd48 	bl	80052d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a2d      	ldr	r2, [pc, #180]	@ (80048fc <HAL_TIM_PWM_Start+0x174>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d004      	beq.n	8004854 <HAL_TIM_PWM_Start+0xcc>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a2c      	ldr	r2, [pc, #176]	@ (8004900 <HAL_TIM_PWM_Start+0x178>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d101      	bne.n	8004858 <HAL_TIM_PWM_Start+0xd0>
 8004854:	2301      	movs	r3, #1
 8004856:	e000      	b.n	800485a <HAL_TIM_PWM_Start+0xd2>
 8004858:	2300      	movs	r3, #0
 800485a:	2b00      	cmp	r3, #0
 800485c:	d007      	beq.n	800486e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800486c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a22      	ldr	r2, [pc, #136]	@ (80048fc <HAL_TIM_PWM_Start+0x174>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d022      	beq.n	80048be <HAL_TIM_PWM_Start+0x136>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004880:	d01d      	beq.n	80048be <HAL_TIM_PWM_Start+0x136>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a1f      	ldr	r2, [pc, #124]	@ (8004904 <HAL_TIM_PWM_Start+0x17c>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d018      	beq.n	80048be <HAL_TIM_PWM_Start+0x136>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a1d      	ldr	r2, [pc, #116]	@ (8004908 <HAL_TIM_PWM_Start+0x180>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d013      	beq.n	80048be <HAL_TIM_PWM_Start+0x136>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a1c      	ldr	r2, [pc, #112]	@ (800490c <HAL_TIM_PWM_Start+0x184>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d00e      	beq.n	80048be <HAL_TIM_PWM_Start+0x136>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a16      	ldr	r2, [pc, #88]	@ (8004900 <HAL_TIM_PWM_Start+0x178>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d009      	beq.n	80048be <HAL_TIM_PWM_Start+0x136>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a18      	ldr	r2, [pc, #96]	@ (8004910 <HAL_TIM_PWM_Start+0x188>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d004      	beq.n	80048be <HAL_TIM_PWM_Start+0x136>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a16      	ldr	r2, [pc, #88]	@ (8004914 <HAL_TIM_PWM_Start+0x18c>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d111      	bne.n	80048e2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	f003 0307 	and.w	r3, r3, #7
 80048c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2b06      	cmp	r3, #6
 80048ce:	d010      	beq.n	80048f2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f042 0201 	orr.w	r2, r2, #1
 80048de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048e0:	e007      	b.n	80048f2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f042 0201 	orr.w	r2, r2, #1
 80048f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048f2:	2300      	movs	r3, #0
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3710      	adds	r7, #16
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}
 80048fc:	40010000 	.word	0x40010000
 8004900:	40010400 	.word	0x40010400
 8004904:	40000400 	.word	0x40000400
 8004908:	40000800 	.word	0x40000800
 800490c:	40000c00 	.word	0x40000c00
 8004910:	40014000 	.word	0x40014000
 8004914:	40001800 	.word	0x40001800

08004918 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b086      	sub	sp, #24
 800491c:	af00      	add	r7, sp, #0
 800491e:	60f8      	str	r0, [r7, #12]
 8004920:	60b9      	str	r1, [r7, #8]
 8004922:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004924:	2300      	movs	r3, #0
 8004926:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800492e:	2b01      	cmp	r3, #1
 8004930:	d101      	bne.n	8004936 <HAL_TIM_OC_ConfigChannel+0x1e>
 8004932:	2302      	movs	r3, #2
 8004934:	e048      	b.n	80049c8 <HAL_TIM_OC_ConfigChannel+0xb0>
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2201      	movs	r2, #1
 800493a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2b0c      	cmp	r3, #12
 8004942:	d839      	bhi.n	80049b8 <HAL_TIM_OC_ConfigChannel+0xa0>
 8004944:	a201      	add	r2, pc, #4	@ (adr r2, 800494c <HAL_TIM_OC_ConfigChannel+0x34>)
 8004946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800494a:	bf00      	nop
 800494c:	08004981 	.word	0x08004981
 8004950:	080049b9 	.word	0x080049b9
 8004954:	080049b9 	.word	0x080049b9
 8004958:	080049b9 	.word	0x080049b9
 800495c:	0800498f 	.word	0x0800498f
 8004960:	080049b9 	.word	0x080049b9
 8004964:	080049b9 	.word	0x080049b9
 8004968:	080049b9 	.word	0x080049b9
 800496c:	0800499d 	.word	0x0800499d
 8004970:	080049b9 	.word	0x080049b9
 8004974:	080049b9 	.word	0x080049b9
 8004978:	080049b9 	.word	0x080049b9
 800497c:	080049ab 	.word	0x080049ab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	68b9      	ldr	r1, [r7, #8]
 8004986:	4618      	mov	r0, r3
 8004988:	f000 fa58 	bl	8004e3c <TIM_OC1_SetConfig>
      break;
 800498c:	e017      	b.n	80049be <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	68b9      	ldr	r1, [r7, #8]
 8004994:	4618      	mov	r0, r3
 8004996:	f000 fac1 	bl	8004f1c <TIM_OC2_SetConfig>
      break;
 800499a:	e010      	b.n	80049be <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	68b9      	ldr	r1, [r7, #8]
 80049a2:	4618      	mov	r0, r3
 80049a4:	f000 fb30 	bl	8005008 <TIM_OC3_SetConfig>
      break;
 80049a8:	e009      	b.n	80049be <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	68b9      	ldr	r1, [r7, #8]
 80049b0:	4618      	mov	r0, r3
 80049b2:	f000 fb9d 	bl	80050f0 <TIM_OC4_SetConfig>
      break;
 80049b6:	e002      	b.n	80049be <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	75fb      	strb	r3, [r7, #23]
      break;
 80049bc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2200      	movs	r2, #0
 80049c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80049c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3718      	adds	r7, #24
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}

080049d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b086      	sub	sp, #24
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	60f8      	str	r0, [r7, #12]
 80049d8:	60b9      	str	r1, [r7, #8]
 80049da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049dc:	2300      	movs	r3, #0
 80049de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d101      	bne.n	80049ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 80049ea:	2302      	movs	r3, #2
 80049ec:	e0ae      	b.n	8004b4c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2201      	movs	r2, #1
 80049f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2b0c      	cmp	r3, #12
 80049fa:	f200 809f 	bhi.w	8004b3c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80049fe:	a201      	add	r2, pc, #4	@ (adr r2, 8004a04 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a04:	08004a39 	.word	0x08004a39
 8004a08:	08004b3d 	.word	0x08004b3d
 8004a0c:	08004b3d 	.word	0x08004b3d
 8004a10:	08004b3d 	.word	0x08004b3d
 8004a14:	08004a79 	.word	0x08004a79
 8004a18:	08004b3d 	.word	0x08004b3d
 8004a1c:	08004b3d 	.word	0x08004b3d
 8004a20:	08004b3d 	.word	0x08004b3d
 8004a24:	08004abb 	.word	0x08004abb
 8004a28:	08004b3d 	.word	0x08004b3d
 8004a2c:	08004b3d 	.word	0x08004b3d
 8004a30:	08004b3d 	.word	0x08004b3d
 8004a34:	08004afb 	.word	0x08004afb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	68b9      	ldr	r1, [r7, #8]
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f000 f9fc 	bl	8004e3c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	699a      	ldr	r2, [r3, #24]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f042 0208 	orr.w	r2, r2, #8
 8004a52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	699a      	ldr	r2, [r3, #24]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f022 0204 	bic.w	r2, r2, #4
 8004a62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	6999      	ldr	r1, [r3, #24]
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	691a      	ldr	r2, [r3, #16]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	430a      	orrs	r2, r1
 8004a74:	619a      	str	r2, [r3, #24]
      break;
 8004a76:	e064      	b.n	8004b42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	68b9      	ldr	r1, [r7, #8]
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f000 fa4c 	bl	8004f1c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	699a      	ldr	r2, [r3, #24]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	699a      	ldr	r2, [r3, #24]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004aa2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	6999      	ldr	r1, [r3, #24]
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	691b      	ldr	r3, [r3, #16]
 8004aae:	021a      	lsls	r2, r3, #8
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	430a      	orrs	r2, r1
 8004ab6:	619a      	str	r2, [r3, #24]
      break;
 8004ab8:	e043      	b.n	8004b42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	68b9      	ldr	r1, [r7, #8]
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f000 faa1 	bl	8005008 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	69da      	ldr	r2, [r3, #28]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f042 0208 	orr.w	r2, r2, #8
 8004ad4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	69da      	ldr	r2, [r3, #28]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f022 0204 	bic.w	r2, r2, #4
 8004ae4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	69d9      	ldr	r1, [r3, #28]
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	691a      	ldr	r2, [r3, #16]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	430a      	orrs	r2, r1
 8004af6:	61da      	str	r2, [r3, #28]
      break;
 8004af8:	e023      	b.n	8004b42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	68b9      	ldr	r1, [r7, #8]
 8004b00:	4618      	mov	r0, r3
 8004b02:	f000 faf5 	bl	80050f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	69da      	ldr	r2, [r3, #28]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	69da      	ldr	r2, [r3, #28]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	69d9      	ldr	r1, [r3, #28]
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	691b      	ldr	r3, [r3, #16]
 8004b30:	021a      	lsls	r2, r3, #8
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	430a      	orrs	r2, r1
 8004b38:	61da      	str	r2, [r3, #28]
      break;
 8004b3a:	e002      	b.n	8004b42 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	75fb      	strb	r3, [r7, #23]
      break;
 8004b40:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2200      	movs	r2, #0
 8004b46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004b4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3718      	adds	r7, #24
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}

08004b54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b084      	sub	sp, #16
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d101      	bne.n	8004b70 <HAL_TIM_ConfigClockSource+0x1c>
 8004b6c:	2302      	movs	r3, #2
 8004b6e:	e0b4      	b.n	8004cda <HAL_TIM_ConfigClockSource+0x186>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2202      	movs	r2, #2
 8004b7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004b8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004b96:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	68ba      	ldr	r2, [r7, #8]
 8004b9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ba8:	d03e      	beq.n	8004c28 <HAL_TIM_ConfigClockSource+0xd4>
 8004baa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004bae:	f200 8087 	bhi.w	8004cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8004bb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bb6:	f000 8086 	beq.w	8004cc6 <HAL_TIM_ConfigClockSource+0x172>
 8004bba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bbe:	d87f      	bhi.n	8004cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8004bc0:	2b70      	cmp	r3, #112	@ 0x70
 8004bc2:	d01a      	beq.n	8004bfa <HAL_TIM_ConfigClockSource+0xa6>
 8004bc4:	2b70      	cmp	r3, #112	@ 0x70
 8004bc6:	d87b      	bhi.n	8004cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8004bc8:	2b60      	cmp	r3, #96	@ 0x60
 8004bca:	d050      	beq.n	8004c6e <HAL_TIM_ConfigClockSource+0x11a>
 8004bcc:	2b60      	cmp	r3, #96	@ 0x60
 8004bce:	d877      	bhi.n	8004cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8004bd0:	2b50      	cmp	r3, #80	@ 0x50
 8004bd2:	d03c      	beq.n	8004c4e <HAL_TIM_ConfigClockSource+0xfa>
 8004bd4:	2b50      	cmp	r3, #80	@ 0x50
 8004bd6:	d873      	bhi.n	8004cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8004bd8:	2b40      	cmp	r3, #64	@ 0x40
 8004bda:	d058      	beq.n	8004c8e <HAL_TIM_ConfigClockSource+0x13a>
 8004bdc:	2b40      	cmp	r3, #64	@ 0x40
 8004bde:	d86f      	bhi.n	8004cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8004be0:	2b30      	cmp	r3, #48	@ 0x30
 8004be2:	d064      	beq.n	8004cae <HAL_TIM_ConfigClockSource+0x15a>
 8004be4:	2b30      	cmp	r3, #48	@ 0x30
 8004be6:	d86b      	bhi.n	8004cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8004be8:	2b20      	cmp	r3, #32
 8004bea:	d060      	beq.n	8004cae <HAL_TIM_ConfigClockSource+0x15a>
 8004bec:	2b20      	cmp	r3, #32
 8004bee:	d867      	bhi.n	8004cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d05c      	beq.n	8004cae <HAL_TIM_ConfigClockSource+0x15a>
 8004bf4:	2b10      	cmp	r3, #16
 8004bf6:	d05a      	beq.n	8004cae <HAL_TIM_ConfigClockSource+0x15a>
 8004bf8:	e062      	b.n	8004cc0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c0a:	f000 fb41 	bl	8005290 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004c1c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	68ba      	ldr	r2, [r7, #8]
 8004c24:	609a      	str	r2, [r3, #8]
      break;
 8004c26:	e04f      	b.n	8004cc8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c38:	f000 fb2a 	bl	8005290 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	689a      	ldr	r2, [r3, #8]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004c4a:	609a      	str	r2, [r3, #8]
      break;
 8004c4c:	e03c      	b.n	8004cc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	f000 fa9e 	bl	800519c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	2150      	movs	r1, #80	@ 0x50
 8004c66:	4618      	mov	r0, r3
 8004c68:	f000 faf7 	bl	800525a <TIM_ITRx_SetConfig>
      break;
 8004c6c:	e02c      	b.n	8004cc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	f000 fabd 	bl	80051fa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	2160      	movs	r1, #96	@ 0x60
 8004c86:	4618      	mov	r0, r3
 8004c88:	f000 fae7 	bl	800525a <TIM_ITRx_SetConfig>
      break;
 8004c8c:	e01c      	b.n	8004cc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	f000 fa7e 	bl	800519c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	2140      	movs	r1, #64	@ 0x40
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f000 fad7 	bl	800525a <TIM_ITRx_SetConfig>
      break;
 8004cac:	e00c      	b.n	8004cc8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4619      	mov	r1, r3
 8004cb8:	4610      	mov	r0, r2
 8004cba:	f000 face 	bl	800525a <TIM_ITRx_SetConfig>
      break;
 8004cbe:	e003      	b.n	8004cc8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	73fb      	strb	r3, [r7, #15]
      break;
 8004cc4:	e000      	b.n	8004cc8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004cc6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3710      	adds	r7, #16
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}
	...

08004ce4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b085      	sub	sp, #20
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
 8004cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	4a46      	ldr	r2, [pc, #280]	@ (8004e10 <TIM_Base_SetConfig+0x12c>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d013      	beq.n	8004d24 <TIM_Base_SetConfig+0x40>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d02:	d00f      	beq.n	8004d24 <TIM_Base_SetConfig+0x40>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	4a43      	ldr	r2, [pc, #268]	@ (8004e14 <TIM_Base_SetConfig+0x130>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d00b      	beq.n	8004d24 <TIM_Base_SetConfig+0x40>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	4a42      	ldr	r2, [pc, #264]	@ (8004e18 <TIM_Base_SetConfig+0x134>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d007      	beq.n	8004d24 <TIM_Base_SetConfig+0x40>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	4a41      	ldr	r2, [pc, #260]	@ (8004e1c <TIM_Base_SetConfig+0x138>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d003      	beq.n	8004d24 <TIM_Base_SetConfig+0x40>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	4a40      	ldr	r2, [pc, #256]	@ (8004e20 <TIM_Base_SetConfig+0x13c>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d108      	bne.n	8004d36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	68fa      	ldr	r2, [r7, #12]
 8004d32:	4313      	orrs	r3, r2
 8004d34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	4a35      	ldr	r2, [pc, #212]	@ (8004e10 <TIM_Base_SetConfig+0x12c>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d02b      	beq.n	8004d96 <TIM_Base_SetConfig+0xb2>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d44:	d027      	beq.n	8004d96 <TIM_Base_SetConfig+0xb2>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a32      	ldr	r2, [pc, #200]	@ (8004e14 <TIM_Base_SetConfig+0x130>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d023      	beq.n	8004d96 <TIM_Base_SetConfig+0xb2>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4a31      	ldr	r2, [pc, #196]	@ (8004e18 <TIM_Base_SetConfig+0x134>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d01f      	beq.n	8004d96 <TIM_Base_SetConfig+0xb2>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	4a30      	ldr	r2, [pc, #192]	@ (8004e1c <TIM_Base_SetConfig+0x138>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d01b      	beq.n	8004d96 <TIM_Base_SetConfig+0xb2>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	4a2f      	ldr	r2, [pc, #188]	@ (8004e20 <TIM_Base_SetConfig+0x13c>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d017      	beq.n	8004d96 <TIM_Base_SetConfig+0xb2>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	4a2e      	ldr	r2, [pc, #184]	@ (8004e24 <TIM_Base_SetConfig+0x140>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d013      	beq.n	8004d96 <TIM_Base_SetConfig+0xb2>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	4a2d      	ldr	r2, [pc, #180]	@ (8004e28 <TIM_Base_SetConfig+0x144>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d00f      	beq.n	8004d96 <TIM_Base_SetConfig+0xb2>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	4a2c      	ldr	r2, [pc, #176]	@ (8004e2c <TIM_Base_SetConfig+0x148>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d00b      	beq.n	8004d96 <TIM_Base_SetConfig+0xb2>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4a2b      	ldr	r2, [pc, #172]	@ (8004e30 <TIM_Base_SetConfig+0x14c>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d007      	beq.n	8004d96 <TIM_Base_SetConfig+0xb2>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4a2a      	ldr	r2, [pc, #168]	@ (8004e34 <TIM_Base_SetConfig+0x150>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d003      	beq.n	8004d96 <TIM_Base_SetConfig+0xb2>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a29      	ldr	r2, [pc, #164]	@ (8004e38 <TIM_Base_SetConfig+0x154>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d108      	bne.n	8004da8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	68db      	ldr	r3, [r3, #12]
 8004da2:	68fa      	ldr	r2, [r7, #12]
 8004da4:	4313      	orrs	r3, r2
 8004da6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	695b      	ldr	r3, [r3, #20]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	68fa      	ldr	r2, [r7, #12]
 8004dba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	689a      	ldr	r2, [r3, #8]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	4a10      	ldr	r2, [pc, #64]	@ (8004e10 <TIM_Base_SetConfig+0x12c>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d003      	beq.n	8004ddc <TIM_Base_SetConfig+0xf8>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	4a12      	ldr	r2, [pc, #72]	@ (8004e20 <TIM_Base_SetConfig+0x13c>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d103      	bne.n	8004de4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	691a      	ldr	r2, [r3, #16]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	691b      	ldr	r3, [r3, #16]
 8004dee:	f003 0301 	and.w	r3, r3, #1
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d105      	bne.n	8004e02 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	691b      	ldr	r3, [r3, #16]
 8004dfa:	f023 0201 	bic.w	r2, r3, #1
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	611a      	str	r2, [r3, #16]
  }
}
 8004e02:	bf00      	nop
 8004e04:	3714      	adds	r7, #20
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr
 8004e0e:	bf00      	nop
 8004e10:	40010000 	.word	0x40010000
 8004e14:	40000400 	.word	0x40000400
 8004e18:	40000800 	.word	0x40000800
 8004e1c:	40000c00 	.word	0x40000c00
 8004e20:	40010400 	.word	0x40010400
 8004e24:	40014000 	.word	0x40014000
 8004e28:	40014400 	.word	0x40014400
 8004e2c:	40014800 	.word	0x40014800
 8004e30:	40001800 	.word	0x40001800
 8004e34:	40001c00 	.word	0x40001c00
 8004e38:	40002000 	.word	0x40002000

08004e3c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b087      	sub	sp, #28
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a1b      	ldr	r3, [r3, #32]
 8004e4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6a1b      	ldr	r3, [r3, #32]
 8004e50:	f023 0201 	bic.w	r2, r3, #1
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	699b      	ldr	r3, [r3, #24]
 8004e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f023 0303 	bic.w	r3, r3, #3
 8004e72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	68fa      	ldr	r2, [r7, #12]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	f023 0302 	bic.w	r3, r3, #2
 8004e84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	697a      	ldr	r2, [r7, #20]
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	4a20      	ldr	r2, [pc, #128]	@ (8004f14 <TIM_OC1_SetConfig+0xd8>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d003      	beq.n	8004ea0 <TIM_OC1_SetConfig+0x64>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	4a1f      	ldr	r2, [pc, #124]	@ (8004f18 <TIM_OC1_SetConfig+0xdc>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d10c      	bne.n	8004eba <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	f023 0308 	bic.w	r3, r3, #8
 8004ea6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	697a      	ldr	r2, [r7, #20]
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	f023 0304 	bic.w	r3, r3, #4
 8004eb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4a15      	ldr	r2, [pc, #84]	@ (8004f14 <TIM_OC1_SetConfig+0xd8>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d003      	beq.n	8004eca <TIM_OC1_SetConfig+0x8e>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4a14      	ldr	r2, [pc, #80]	@ (8004f18 <TIM_OC1_SetConfig+0xdc>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d111      	bne.n	8004eee <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ed0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004ed8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	695b      	ldr	r3, [r3, #20]
 8004ede:	693a      	ldr	r2, [r7, #16]
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	699b      	ldr	r3, [r3, #24]
 8004ee8:	693a      	ldr	r2, [r7, #16]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	693a      	ldr	r2, [r7, #16]
 8004ef2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	68fa      	ldr	r2, [r7, #12]
 8004ef8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	685a      	ldr	r2, [r3, #4]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	697a      	ldr	r2, [r7, #20]
 8004f06:	621a      	str	r2, [r3, #32]
}
 8004f08:	bf00      	nop
 8004f0a:	371c      	adds	r7, #28
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr
 8004f14:	40010000 	.word	0x40010000
 8004f18:	40010400 	.word	0x40010400

08004f1c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b087      	sub	sp, #28
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a1b      	ldr	r3, [r3, #32]
 8004f2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6a1b      	ldr	r3, [r3, #32]
 8004f30:	f023 0210 	bic.w	r2, r3, #16
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	699b      	ldr	r3, [r3, #24]
 8004f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	021b      	lsls	r3, r3, #8
 8004f5a:	68fa      	ldr	r2, [r7, #12]
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	f023 0320 	bic.w	r3, r3, #32
 8004f66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	011b      	lsls	r3, r3, #4
 8004f6e:	697a      	ldr	r2, [r7, #20]
 8004f70:	4313      	orrs	r3, r2
 8004f72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4a22      	ldr	r2, [pc, #136]	@ (8005000 <TIM_OC2_SetConfig+0xe4>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d003      	beq.n	8004f84 <TIM_OC2_SetConfig+0x68>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	4a21      	ldr	r2, [pc, #132]	@ (8005004 <TIM_OC2_SetConfig+0xe8>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d10d      	bne.n	8004fa0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	68db      	ldr	r3, [r3, #12]
 8004f90:	011b      	lsls	r3, r3, #4
 8004f92:	697a      	ldr	r2, [r7, #20]
 8004f94:	4313      	orrs	r3, r2
 8004f96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f9e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	4a17      	ldr	r2, [pc, #92]	@ (8005000 <TIM_OC2_SetConfig+0xe4>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d003      	beq.n	8004fb0 <TIM_OC2_SetConfig+0x94>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	4a16      	ldr	r2, [pc, #88]	@ (8005004 <TIM_OC2_SetConfig+0xe8>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d113      	bne.n	8004fd8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004fb6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004fbe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	695b      	ldr	r3, [r3, #20]
 8004fc4:	009b      	lsls	r3, r3, #2
 8004fc6:	693a      	ldr	r2, [r7, #16]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	699b      	ldr	r3, [r3, #24]
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	693a      	ldr	r2, [r7, #16]
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	693a      	ldr	r2, [r7, #16]
 8004fdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	68fa      	ldr	r2, [r7, #12]
 8004fe2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	685a      	ldr	r2, [r3, #4]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	697a      	ldr	r2, [r7, #20]
 8004ff0:	621a      	str	r2, [r3, #32]
}
 8004ff2:	bf00      	nop
 8004ff4:	371c      	adds	r7, #28
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr
 8004ffe:	bf00      	nop
 8005000:	40010000 	.word	0x40010000
 8005004:	40010400 	.word	0x40010400

08005008 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005008:	b480      	push	{r7}
 800500a:	b087      	sub	sp, #28
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a1b      	ldr	r3, [r3, #32]
 8005016:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6a1b      	ldr	r3, [r3, #32]
 800501c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	69db      	ldr	r3, [r3, #28]
 800502e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005036:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f023 0303 	bic.w	r3, r3, #3
 800503e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	68fa      	ldr	r2, [r7, #12]
 8005046:	4313      	orrs	r3, r2
 8005048:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005050:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	021b      	lsls	r3, r3, #8
 8005058:	697a      	ldr	r2, [r7, #20]
 800505a:	4313      	orrs	r3, r2
 800505c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a21      	ldr	r2, [pc, #132]	@ (80050e8 <TIM_OC3_SetConfig+0xe0>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d003      	beq.n	800506e <TIM_OC3_SetConfig+0x66>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4a20      	ldr	r2, [pc, #128]	@ (80050ec <TIM_OC3_SetConfig+0xe4>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d10d      	bne.n	800508a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005074:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	68db      	ldr	r3, [r3, #12]
 800507a:	021b      	lsls	r3, r3, #8
 800507c:	697a      	ldr	r2, [r7, #20]
 800507e:	4313      	orrs	r3, r2
 8005080:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005088:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	4a16      	ldr	r2, [pc, #88]	@ (80050e8 <TIM_OC3_SetConfig+0xe0>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d003      	beq.n	800509a <TIM_OC3_SetConfig+0x92>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	4a15      	ldr	r2, [pc, #84]	@ (80050ec <TIM_OC3_SetConfig+0xe4>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d113      	bne.n	80050c2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80050a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80050a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	695b      	ldr	r3, [r3, #20]
 80050ae:	011b      	lsls	r3, r3, #4
 80050b0:	693a      	ldr	r2, [r7, #16]
 80050b2:	4313      	orrs	r3, r2
 80050b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	699b      	ldr	r3, [r3, #24]
 80050ba:	011b      	lsls	r3, r3, #4
 80050bc:	693a      	ldr	r2, [r7, #16]
 80050be:	4313      	orrs	r3, r2
 80050c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	693a      	ldr	r2, [r7, #16]
 80050c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	68fa      	ldr	r2, [r7, #12]
 80050cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	685a      	ldr	r2, [r3, #4]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	697a      	ldr	r2, [r7, #20]
 80050da:	621a      	str	r2, [r3, #32]
}
 80050dc:	bf00      	nop
 80050de:	371c      	adds	r7, #28
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr
 80050e8:	40010000 	.word	0x40010000
 80050ec:	40010400 	.word	0x40010400

080050f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b087      	sub	sp, #28
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a1b      	ldr	r3, [r3, #32]
 80050fe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6a1b      	ldr	r3, [r3, #32]
 8005104:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	69db      	ldr	r3, [r3, #28]
 8005116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800511e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005126:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	021b      	lsls	r3, r3, #8
 800512e:	68fa      	ldr	r2, [r7, #12]
 8005130:	4313      	orrs	r3, r2
 8005132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800513a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	031b      	lsls	r3, r3, #12
 8005142:	693a      	ldr	r2, [r7, #16]
 8005144:	4313      	orrs	r3, r2
 8005146:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	4a12      	ldr	r2, [pc, #72]	@ (8005194 <TIM_OC4_SetConfig+0xa4>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d003      	beq.n	8005158 <TIM_OC4_SetConfig+0x68>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	4a11      	ldr	r2, [pc, #68]	@ (8005198 <TIM_OC4_SetConfig+0xa8>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d109      	bne.n	800516c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800515e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	695b      	ldr	r3, [r3, #20]
 8005164:	019b      	lsls	r3, r3, #6
 8005166:	697a      	ldr	r2, [r7, #20]
 8005168:	4313      	orrs	r3, r2
 800516a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	697a      	ldr	r2, [r7, #20]
 8005170:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	68fa      	ldr	r2, [r7, #12]
 8005176:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	685a      	ldr	r2, [r3, #4]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	693a      	ldr	r2, [r7, #16]
 8005184:	621a      	str	r2, [r3, #32]
}
 8005186:	bf00      	nop
 8005188:	371c      	adds	r7, #28
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr
 8005192:	bf00      	nop
 8005194:	40010000 	.word	0x40010000
 8005198:	40010400 	.word	0x40010400

0800519c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800519c:	b480      	push	{r7}
 800519e:	b087      	sub	sp, #28
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	60f8      	str	r0, [r7, #12]
 80051a4:	60b9      	str	r1, [r7, #8]
 80051a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6a1b      	ldr	r3, [r3, #32]
 80051ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	6a1b      	ldr	r3, [r3, #32]
 80051b2:	f023 0201 	bic.w	r2, r3, #1
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	699b      	ldr	r3, [r3, #24]
 80051be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80051c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	011b      	lsls	r3, r3, #4
 80051cc:	693a      	ldr	r2, [r7, #16]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	f023 030a 	bic.w	r3, r3, #10
 80051d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80051da:	697a      	ldr	r2, [r7, #20]
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	4313      	orrs	r3, r2
 80051e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	693a      	ldr	r2, [r7, #16]
 80051e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	697a      	ldr	r2, [r7, #20]
 80051ec:	621a      	str	r2, [r3, #32]
}
 80051ee:	bf00      	nop
 80051f0:	371c      	adds	r7, #28
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr

080051fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051fa:	b480      	push	{r7}
 80051fc:	b087      	sub	sp, #28
 80051fe:	af00      	add	r7, sp, #0
 8005200:	60f8      	str	r0, [r7, #12]
 8005202:	60b9      	str	r1, [r7, #8]
 8005204:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	6a1b      	ldr	r3, [r3, #32]
 800520a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	6a1b      	ldr	r3, [r3, #32]
 8005210:	f023 0210 	bic.w	r2, r3, #16
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	699b      	ldr	r3, [r3, #24]
 800521c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005224:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	031b      	lsls	r3, r3, #12
 800522a:	693a      	ldr	r2, [r7, #16]
 800522c:	4313      	orrs	r3, r2
 800522e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005236:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	011b      	lsls	r3, r3, #4
 800523c:	697a      	ldr	r2, [r7, #20]
 800523e:	4313      	orrs	r3, r2
 8005240:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	693a      	ldr	r2, [r7, #16]
 8005246:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	697a      	ldr	r2, [r7, #20]
 800524c:	621a      	str	r2, [r3, #32]
}
 800524e:	bf00      	nop
 8005250:	371c      	adds	r7, #28
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr

0800525a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800525a:	b480      	push	{r7}
 800525c:	b085      	sub	sp, #20
 800525e:	af00      	add	r7, sp, #0
 8005260:	6078      	str	r0, [r7, #4]
 8005262:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005270:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005272:	683a      	ldr	r2, [r7, #0]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	4313      	orrs	r3, r2
 8005278:	f043 0307 	orr.w	r3, r3, #7
 800527c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	68fa      	ldr	r2, [r7, #12]
 8005282:	609a      	str	r2, [r3, #8]
}
 8005284:	bf00      	nop
 8005286:	3714      	adds	r7, #20
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr

08005290 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005290:	b480      	push	{r7}
 8005292:	b087      	sub	sp, #28
 8005294:	af00      	add	r7, sp, #0
 8005296:	60f8      	str	r0, [r7, #12]
 8005298:	60b9      	str	r1, [r7, #8]
 800529a:	607a      	str	r2, [r7, #4]
 800529c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80052aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	021a      	lsls	r2, r3, #8
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	431a      	orrs	r2, r3
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	4313      	orrs	r3, r2
 80052b8:	697a      	ldr	r2, [r7, #20]
 80052ba:	4313      	orrs	r3, r2
 80052bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	697a      	ldr	r2, [r7, #20]
 80052c2:	609a      	str	r2, [r3, #8]
}
 80052c4:	bf00      	nop
 80052c6:	371c      	adds	r7, #28
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr

080052d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b087      	sub	sp, #28
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	60f8      	str	r0, [r7, #12]
 80052d8:	60b9      	str	r1, [r7, #8]
 80052da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	f003 031f 	and.w	r3, r3, #31
 80052e2:	2201      	movs	r2, #1
 80052e4:	fa02 f303 	lsl.w	r3, r2, r3
 80052e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	6a1a      	ldr	r2, [r3, #32]
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	43db      	mvns	r3, r3
 80052f2:	401a      	ands	r2, r3
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	6a1a      	ldr	r2, [r3, #32]
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	f003 031f 	and.w	r3, r3, #31
 8005302:	6879      	ldr	r1, [r7, #4]
 8005304:	fa01 f303 	lsl.w	r3, r1, r3
 8005308:	431a      	orrs	r2, r3
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	621a      	str	r2, [r3, #32]
}
 800530e:	bf00      	nop
 8005310:	371c      	adds	r7, #28
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr
	...

0800531c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800531c:	b480      	push	{r7}
 800531e:	b085      	sub	sp, #20
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800532c:	2b01      	cmp	r3, #1
 800532e:	d101      	bne.n	8005334 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005330:	2302      	movs	r3, #2
 8005332:	e05a      	b.n	80053ea <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2202      	movs	r2, #2
 8005340:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800535a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	68fa      	ldr	r2, [r7, #12]
 8005362:	4313      	orrs	r3, r2
 8005364:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	68fa      	ldr	r2, [r7, #12]
 800536c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a21      	ldr	r2, [pc, #132]	@ (80053f8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d022      	beq.n	80053be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005380:	d01d      	beq.n	80053be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a1d      	ldr	r2, [pc, #116]	@ (80053fc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d018      	beq.n	80053be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a1b      	ldr	r2, [pc, #108]	@ (8005400 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d013      	beq.n	80053be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a1a      	ldr	r2, [pc, #104]	@ (8005404 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d00e      	beq.n	80053be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a18      	ldr	r2, [pc, #96]	@ (8005408 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d009      	beq.n	80053be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a17      	ldr	r2, [pc, #92]	@ (800540c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d004      	beq.n	80053be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a15      	ldr	r2, [pc, #84]	@ (8005410 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d10c      	bne.n	80053d8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80053c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	68ba      	ldr	r2, [r7, #8]
 80053cc:	4313      	orrs	r3, r2
 80053ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	68ba      	ldr	r2, [r7, #8]
 80053d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2200      	movs	r2, #0
 80053e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80053e8:	2300      	movs	r3, #0
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3714      	adds	r7, #20
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr
 80053f6:	bf00      	nop
 80053f8:	40010000 	.word	0x40010000
 80053fc:	40000400 	.word	0x40000400
 8005400:	40000800 	.word	0x40000800
 8005404:	40000c00 	.word	0x40000c00
 8005408:	40010400 	.word	0x40010400
 800540c:	40014000 	.word	0x40014000
 8005410:	40001800 	.word	0x40001800

08005414 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005414:	b480      	push	{r7}
 8005416:	b085      	sub	sp, #20
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800541e:	2300      	movs	r3, #0
 8005420:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005428:	2b01      	cmp	r3, #1
 800542a:	d101      	bne.n	8005430 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800542c:	2302      	movs	r3, #2
 800542e:	e03d      	b.n	80054ac <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2201      	movs	r2, #1
 8005434:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	68db      	ldr	r3, [r3, #12]
 8005442:	4313      	orrs	r3, r2
 8005444:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	4313      	orrs	r3, r2
 8005452:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	4313      	orrs	r3, r2
 8005460:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4313      	orrs	r3, r2
 800546e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	691b      	ldr	r3, [r3, #16]
 800547a:	4313      	orrs	r3, r2
 800547c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	695b      	ldr	r3, [r3, #20]
 8005488:	4313      	orrs	r3, r2
 800548a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	69db      	ldr	r3, [r3, #28]
 8005496:	4313      	orrs	r3, r2
 8005498:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	68fa      	ldr	r2, [r7, #12]
 80054a0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2200      	movs	r2, #0
 80054a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80054aa:	2300      	movs	r3, #0
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3714      	adds	r7, #20
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr

080054b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b082      	sub	sp, #8
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d101      	bne.n	80054ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e042      	b.n	8005550 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d106      	bne.n	80054e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f7fb fee2 	bl	80012a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2224      	movs	r2, #36	@ 0x24
 80054e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	68da      	ldr	r2, [r3, #12]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80054fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f000 f973 	bl	80057e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	691a      	ldr	r2, [r3, #16]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005510:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	695a      	ldr	r2, [r3, #20]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005520:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	68da      	ldr	r2, [r3, #12]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005530:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2200      	movs	r2, #0
 8005536:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2220      	movs	r2, #32
 800553c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2220      	movs	r2, #32
 8005544:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2200      	movs	r2, #0
 800554c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800554e:	2300      	movs	r3, #0
}
 8005550:	4618      	mov	r0, r3
 8005552:	3708      	adds	r7, #8
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}

08005558 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b08a      	sub	sp, #40	@ 0x28
 800555c:	af02      	add	r7, sp, #8
 800555e:	60f8      	str	r0, [r7, #12]
 8005560:	60b9      	str	r1, [r7, #8]
 8005562:	603b      	str	r3, [r7, #0]
 8005564:	4613      	mov	r3, r2
 8005566:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005568:	2300      	movs	r3, #0
 800556a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005572:	b2db      	uxtb	r3, r3
 8005574:	2b20      	cmp	r3, #32
 8005576:	d175      	bne.n	8005664 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d002      	beq.n	8005584 <HAL_UART_Transmit+0x2c>
 800557e:	88fb      	ldrh	r3, [r7, #6]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d101      	bne.n	8005588 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	e06e      	b.n	8005666 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2200      	movs	r2, #0
 800558c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2221      	movs	r2, #33	@ 0x21
 8005592:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005596:	f7fc f85f 	bl	8001658 <HAL_GetTick>
 800559a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	88fa      	ldrh	r2, [r7, #6]
 80055a0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	88fa      	ldrh	r2, [r7, #6]
 80055a6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055b0:	d108      	bne.n	80055c4 <HAL_UART_Transmit+0x6c>
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	691b      	ldr	r3, [r3, #16]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d104      	bne.n	80055c4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80055ba:	2300      	movs	r3, #0
 80055bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	61bb      	str	r3, [r7, #24]
 80055c2:	e003      	b.n	80055cc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80055c8:	2300      	movs	r3, #0
 80055ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80055cc:	e02e      	b.n	800562c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	9300      	str	r3, [sp, #0]
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	2200      	movs	r2, #0
 80055d6:	2180      	movs	r1, #128	@ 0x80
 80055d8:	68f8      	ldr	r0, [r7, #12]
 80055da:	f000 f848 	bl	800566e <UART_WaitOnFlagUntilTimeout>
 80055de:	4603      	mov	r3, r0
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d005      	beq.n	80055f0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2220      	movs	r2, #32
 80055e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80055ec:	2303      	movs	r3, #3
 80055ee:	e03a      	b.n	8005666 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80055f0:	69fb      	ldr	r3, [r7, #28]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d10b      	bne.n	800560e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80055f6:	69bb      	ldr	r3, [r7, #24]
 80055f8:	881b      	ldrh	r3, [r3, #0]
 80055fa:	461a      	mov	r2, r3
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005604:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005606:	69bb      	ldr	r3, [r7, #24]
 8005608:	3302      	adds	r3, #2
 800560a:	61bb      	str	r3, [r7, #24]
 800560c:	e007      	b.n	800561e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800560e:	69fb      	ldr	r3, [r7, #28]
 8005610:	781a      	ldrb	r2, [r3, #0]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005618:	69fb      	ldr	r3, [r7, #28]
 800561a:	3301      	adds	r3, #1
 800561c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005622:	b29b      	uxth	r3, r3
 8005624:	3b01      	subs	r3, #1
 8005626:	b29a      	uxth	r2, r3
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005630:	b29b      	uxth	r3, r3
 8005632:	2b00      	cmp	r3, #0
 8005634:	d1cb      	bne.n	80055ce <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	9300      	str	r3, [sp, #0]
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	2200      	movs	r2, #0
 800563e:	2140      	movs	r1, #64	@ 0x40
 8005640:	68f8      	ldr	r0, [r7, #12]
 8005642:	f000 f814 	bl	800566e <UART_WaitOnFlagUntilTimeout>
 8005646:	4603      	mov	r3, r0
 8005648:	2b00      	cmp	r3, #0
 800564a:	d005      	beq.n	8005658 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2220      	movs	r2, #32
 8005650:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005654:	2303      	movs	r3, #3
 8005656:	e006      	b.n	8005666 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2220      	movs	r2, #32
 800565c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005660:	2300      	movs	r3, #0
 8005662:	e000      	b.n	8005666 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005664:	2302      	movs	r3, #2
  }
}
 8005666:	4618      	mov	r0, r3
 8005668:	3720      	adds	r7, #32
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}

0800566e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800566e:	b580      	push	{r7, lr}
 8005670:	b086      	sub	sp, #24
 8005672:	af00      	add	r7, sp, #0
 8005674:	60f8      	str	r0, [r7, #12]
 8005676:	60b9      	str	r1, [r7, #8]
 8005678:	603b      	str	r3, [r7, #0]
 800567a:	4613      	mov	r3, r2
 800567c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800567e:	e03b      	b.n	80056f8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005680:	6a3b      	ldr	r3, [r7, #32]
 8005682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005686:	d037      	beq.n	80056f8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005688:	f7fb ffe6 	bl	8001658 <HAL_GetTick>
 800568c:	4602      	mov	r2, r0
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	1ad3      	subs	r3, r2, r3
 8005692:	6a3a      	ldr	r2, [r7, #32]
 8005694:	429a      	cmp	r2, r3
 8005696:	d302      	bcc.n	800569e <UART_WaitOnFlagUntilTimeout+0x30>
 8005698:	6a3b      	ldr	r3, [r7, #32]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d101      	bne.n	80056a2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800569e:	2303      	movs	r3, #3
 80056a0:	e03a      	b.n	8005718 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	68db      	ldr	r3, [r3, #12]
 80056a8:	f003 0304 	and.w	r3, r3, #4
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d023      	beq.n	80056f8 <UART_WaitOnFlagUntilTimeout+0x8a>
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	2b80      	cmp	r3, #128	@ 0x80
 80056b4:	d020      	beq.n	80056f8 <UART_WaitOnFlagUntilTimeout+0x8a>
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	2b40      	cmp	r3, #64	@ 0x40
 80056ba:	d01d      	beq.n	80056f8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f003 0308 	and.w	r3, r3, #8
 80056c6:	2b08      	cmp	r3, #8
 80056c8:	d116      	bne.n	80056f8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80056ca:	2300      	movs	r3, #0
 80056cc:	617b      	str	r3, [r7, #20]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	617b      	str	r3, [r7, #20]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	617b      	str	r3, [r7, #20]
 80056de:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80056e0:	68f8      	ldr	r0, [r7, #12]
 80056e2:	f000 f81d 	bl	8005720 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2208      	movs	r2, #8
 80056ea:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2200      	movs	r2, #0
 80056f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	e00f      	b.n	8005718 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	4013      	ands	r3, r2
 8005702:	68ba      	ldr	r2, [r7, #8]
 8005704:	429a      	cmp	r2, r3
 8005706:	bf0c      	ite	eq
 8005708:	2301      	moveq	r3, #1
 800570a:	2300      	movne	r3, #0
 800570c:	b2db      	uxtb	r3, r3
 800570e:	461a      	mov	r2, r3
 8005710:	79fb      	ldrb	r3, [r7, #7]
 8005712:	429a      	cmp	r2, r3
 8005714:	d0b4      	beq.n	8005680 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005716:	2300      	movs	r3, #0
}
 8005718:	4618      	mov	r0, r3
 800571a:	3718      	adds	r7, #24
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}

08005720 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005720:	b480      	push	{r7}
 8005722:	b095      	sub	sp, #84	@ 0x54
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	330c      	adds	r3, #12
 800572e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005730:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005732:	e853 3f00 	ldrex	r3, [r3]
 8005736:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800573a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800573e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	330c      	adds	r3, #12
 8005746:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005748:	643a      	str	r2, [r7, #64]	@ 0x40
 800574a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800574c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800574e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005750:	e841 2300 	strex	r3, r2, [r1]
 8005754:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005758:	2b00      	cmp	r3, #0
 800575a:	d1e5      	bne.n	8005728 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	3314      	adds	r3, #20
 8005762:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005764:	6a3b      	ldr	r3, [r7, #32]
 8005766:	e853 3f00 	ldrex	r3, [r3]
 800576a:	61fb      	str	r3, [r7, #28]
   return(result);
 800576c:	69fb      	ldr	r3, [r7, #28]
 800576e:	f023 0301 	bic.w	r3, r3, #1
 8005772:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	3314      	adds	r3, #20
 800577a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800577c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800577e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005780:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005782:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005784:	e841 2300 	strex	r3, r2, [r1]
 8005788:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800578a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800578c:	2b00      	cmp	r3, #0
 800578e:	d1e5      	bne.n	800575c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005794:	2b01      	cmp	r3, #1
 8005796:	d119      	bne.n	80057cc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	330c      	adds	r3, #12
 800579e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	e853 3f00 	ldrex	r3, [r3]
 80057a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	f023 0310 	bic.w	r3, r3, #16
 80057ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	330c      	adds	r3, #12
 80057b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80057b8:	61ba      	str	r2, [r7, #24]
 80057ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057bc:	6979      	ldr	r1, [r7, #20]
 80057be:	69ba      	ldr	r2, [r7, #24]
 80057c0:	e841 2300 	strex	r3, r2, [r1]
 80057c4:	613b      	str	r3, [r7, #16]
   return(result);
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d1e5      	bne.n	8005798 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2220      	movs	r2, #32
 80057d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2200      	movs	r2, #0
 80057d8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80057da:	bf00      	nop
 80057dc:	3754      	adds	r7, #84	@ 0x54
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr
	...

080057e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057ec:	b0c0      	sub	sp, #256	@ 0x100
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	691b      	ldr	r3, [r3, #16]
 80057fc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005804:	68d9      	ldr	r1, [r3, #12]
 8005806:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	ea40 0301 	orr.w	r3, r0, r1
 8005810:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005812:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005816:	689a      	ldr	r2, [r3, #8]
 8005818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800581c:	691b      	ldr	r3, [r3, #16]
 800581e:	431a      	orrs	r2, r3
 8005820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005824:	695b      	ldr	r3, [r3, #20]
 8005826:	431a      	orrs	r2, r3
 8005828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800582c:	69db      	ldr	r3, [r3, #28]
 800582e:	4313      	orrs	r3, r2
 8005830:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005840:	f021 010c 	bic.w	r1, r1, #12
 8005844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800584e:	430b      	orrs	r3, r1
 8005850:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005852:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	695b      	ldr	r3, [r3, #20]
 800585a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800585e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005862:	6999      	ldr	r1, [r3, #24]
 8005864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	ea40 0301 	orr.w	r3, r0, r1
 800586e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	4b8f      	ldr	r3, [pc, #572]	@ (8005ab4 <UART_SetConfig+0x2cc>)
 8005878:	429a      	cmp	r2, r3
 800587a:	d005      	beq.n	8005888 <UART_SetConfig+0xa0>
 800587c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	4b8d      	ldr	r3, [pc, #564]	@ (8005ab8 <UART_SetConfig+0x2d0>)
 8005884:	429a      	cmp	r2, r3
 8005886:	d104      	bne.n	8005892 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005888:	f7fe f802 	bl	8003890 <HAL_RCC_GetPCLK2Freq>
 800588c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005890:	e003      	b.n	800589a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005892:	f7fd ffe9 	bl	8003868 <HAL_RCC_GetPCLK1Freq>
 8005896:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800589a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800589e:	69db      	ldr	r3, [r3, #28]
 80058a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80058a4:	f040 810c 	bne.w	8005ac0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80058a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058ac:	2200      	movs	r2, #0
 80058ae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80058b2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80058b6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80058ba:	4622      	mov	r2, r4
 80058bc:	462b      	mov	r3, r5
 80058be:	1891      	adds	r1, r2, r2
 80058c0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80058c2:	415b      	adcs	r3, r3
 80058c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80058c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80058ca:	4621      	mov	r1, r4
 80058cc:	eb12 0801 	adds.w	r8, r2, r1
 80058d0:	4629      	mov	r1, r5
 80058d2:	eb43 0901 	adc.w	r9, r3, r1
 80058d6:	f04f 0200 	mov.w	r2, #0
 80058da:	f04f 0300 	mov.w	r3, #0
 80058de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80058e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80058e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80058ea:	4690      	mov	r8, r2
 80058ec:	4699      	mov	r9, r3
 80058ee:	4623      	mov	r3, r4
 80058f0:	eb18 0303 	adds.w	r3, r8, r3
 80058f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80058f8:	462b      	mov	r3, r5
 80058fa:	eb49 0303 	adc.w	r3, r9, r3
 80058fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005902:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	2200      	movs	r2, #0
 800590a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800590e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005912:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005916:	460b      	mov	r3, r1
 8005918:	18db      	adds	r3, r3, r3
 800591a:	653b      	str	r3, [r7, #80]	@ 0x50
 800591c:	4613      	mov	r3, r2
 800591e:	eb42 0303 	adc.w	r3, r2, r3
 8005922:	657b      	str	r3, [r7, #84]	@ 0x54
 8005924:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005928:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800592c:	f7fa fc4c 	bl	80001c8 <__aeabi_uldivmod>
 8005930:	4602      	mov	r2, r0
 8005932:	460b      	mov	r3, r1
 8005934:	4b61      	ldr	r3, [pc, #388]	@ (8005abc <UART_SetConfig+0x2d4>)
 8005936:	fba3 2302 	umull	r2, r3, r3, r2
 800593a:	095b      	lsrs	r3, r3, #5
 800593c:	011c      	lsls	r4, r3, #4
 800593e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005942:	2200      	movs	r2, #0
 8005944:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005948:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800594c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005950:	4642      	mov	r2, r8
 8005952:	464b      	mov	r3, r9
 8005954:	1891      	adds	r1, r2, r2
 8005956:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005958:	415b      	adcs	r3, r3
 800595a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800595c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005960:	4641      	mov	r1, r8
 8005962:	eb12 0a01 	adds.w	sl, r2, r1
 8005966:	4649      	mov	r1, r9
 8005968:	eb43 0b01 	adc.w	fp, r3, r1
 800596c:	f04f 0200 	mov.w	r2, #0
 8005970:	f04f 0300 	mov.w	r3, #0
 8005974:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005978:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800597c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005980:	4692      	mov	sl, r2
 8005982:	469b      	mov	fp, r3
 8005984:	4643      	mov	r3, r8
 8005986:	eb1a 0303 	adds.w	r3, sl, r3
 800598a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800598e:	464b      	mov	r3, r9
 8005990:	eb4b 0303 	adc.w	r3, fp, r3
 8005994:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	2200      	movs	r2, #0
 80059a0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80059a4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80059a8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80059ac:	460b      	mov	r3, r1
 80059ae:	18db      	adds	r3, r3, r3
 80059b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80059b2:	4613      	mov	r3, r2
 80059b4:	eb42 0303 	adc.w	r3, r2, r3
 80059b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80059ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80059be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80059c2:	f7fa fc01 	bl	80001c8 <__aeabi_uldivmod>
 80059c6:	4602      	mov	r2, r0
 80059c8:	460b      	mov	r3, r1
 80059ca:	4611      	mov	r1, r2
 80059cc:	4b3b      	ldr	r3, [pc, #236]	@ (8005abc <UART_SetConfig+0x2d4>)
 80059ce:	fba3 2301 	umull	r2, r3, r3, r1
 80059d2:	095b      	lsrs	r3, r3, #5
 80059d4:	2264      	movs	r2, #100	@ 0x64
 80059d6:	fb02 f303 	mul.w	r3, r2, r3
 80059da:	1acb      	subs	r3, r1, r3
 80059dc:	00db      	lsls	r3, r3, #3
 80059de:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80059e2:	4b36      	ldr	r3, [pc, #216]	@ (8005abc <UART_SetConfig+0x2d4>)
 80059e4:	fba3 2302 	umull	r2, r3, r3, r2
 80059e8:	095b      	lsrs	r3, r3, #5
 80059ea:	005b      	lsls	r3, r3, #1
 80059ec:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80059f0:	441c      	add	r4, r3
 80059f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059f6:	2200      	movs	r2, #0
 80059f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80059fc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005a00:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005a04:	4642      	mov	r2, r8
 8005a06:	464b      	mov	r3, r9
 8005a08:	1891      	adds	r1, r2, r2
 8005a0a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005a0c:	415b      	adcs	r3, r3
 8005a0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a10:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005a14:	4641      	mov	r1, r8
 8005a16:	1851      	adds	r1, r2, r1
 8005a18:	6339      	str	r1, [r7, #48]	@ 0x30
 8005a1a:	4649      	mov	r1, r9
 8005a1c:	414b      	adcs	r3, r1
 8005a1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a20:	f04f 0200 	mov.w	r2, #0
 8005a24:	f04f 0300 	mov.w	r3, #0
 8005a28:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005a2c:	4659      	mov	r1, fp
 8005a2e:	00cb      	lsls	r3, r1, #3
 8005a30:	4651      	mov	r1, sl
 8005a32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a36:	4651      	mov	r1, sl
 8005a38:	00ca      	lsls	r2, r1, #3
 8005a3a:	4610      	mov	r0, r2
 8005a3c:	4619      	mov	r1, r3
 8005a3e:	4603      	mov	r3, r0
 8005a40:	4642      	mov	r2, r8
 8005a42:	189b      	adds	r3, r3, r2
 8005a44:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005a48:	464b      	mov	r3, r9
 8005a4a:	460a      	mov	r2, r1
 8005a4c:	eb42 0303 	adc.w	r3, r2, r3
 8005a50:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005a60:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005a64:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005a68:	460b      	mov	r3, r1
 8005a6a:	18db      	adds	r3, r3, r3
 8005a6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005a6e:	4613      	mov	r3, r2
 8005a70:	eb42 0303 	adc.w	r3, r2, r3
 8005a74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005a76:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005a7a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005a7e:	f7fa fba3 	bl	80001c8 <__aeabi_uldivmod>
 8005a82:	4602      	mov	r2, r0
 8005a84:	460b      	mov	r3, r1
 8005a86:	4b0d      	ldr	r3, [pc, #52]	@ (8005abc <UART_SetConfig+0x2d4>)
 8005a88:	fba3 1302 	umull	r1, r3, r3, r2
 8005a8c:	095b      	lsrs	r3, r3, #5
 8005a8e:	2164      	movs	r1, #100	@ 0x64
 8005a90:	fb01 f303 	mul.w	r3, r1, r3
 8005a94:	1ad3      	subs	r3, r2, r3
 8005a96:	00db      	lsls	r3, r3, #3
 8005a98:	3332      	adds	r3, #50	@ 0x32
 8005a9a:	4a08      	ldr	r2, [pc, #32]	@ (8005abc <UART_SetConfig+0x2d4>)
 8005a9c:	fba2 2303 	umull	r2, r3, r2, r3
 8005aa0:	095b      	lsrs	r3, r3, #5
 8005aa2:	f003 0207 	and.w	r2, r3, #7
 8005aa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4422      	add	r2, r4
 8005aae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005ab0:	e106      	b.n	8005cc0 <UART_SetConfig+0x4d8>
 8005ab2:	bf00      	nop
 8005ab4:	40011000 	.word	0x40011000
 8005ab8:	40011400 	.word	0x40011400
 8005abc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ac0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005aca:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005ace:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005ad2:	4642      	mov	r2, r8
 8005ad4:	464b      	mov	r3, r9
 8005ad6:	1891      	adds	r1, r2, r2
 8005ad8:	6239      	str	r1, [r7, #32]
 8005ada:	415b      	adcs	r3, r3
 8005adc:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ade:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005ae2:	4641      	mov	r1, r8
 8005ae4:	1854      	adds	r4, r2, r1
 8005ae6:	4649      	mov	r1, r9
 8005ae8:	eb43 0501 	adc.w	r5, r3, r1
 8005aec:	f04f 0200 	mov.w	r2, #0
 8005af0:	f04f 0300 	mov.w	r3, #0
 8005af4:	00eb      	lsls	r3, r5, #3
 8005af6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005afa:	00e2      	lsls	r2, r4, #3
 8005afc:	4614      	mov	r4, r2
 8005afe:	461d      	mov	r5, r3
 8005b00:	4643      	mov	r3, r8
 8005b02:	18e3      	adds	r3, r4, r3
 8005b04:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005b08:	464b      	mov	r3, r9
 8005b0a:	eb45 0303 	adc.w	r3, r5, r3
 8005b0e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005b12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005b1e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005b22:	f04f 0200 	mov.w	r2, #0
 8005b26:	f04f 0300 	mov.w	r3, #0
 8005b2a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005b2e:	4629      	mov	r1, r5
 8005b30:	008b      	lsls	r3, r1, #2
 8005b32:	4621      	mov	r1, r4
 8005b34:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b38:	4621      	mov	r1, r4
 8005b3a:	008a      	lsls	r2, r1, #2
 8005b3c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005b40:	f7fa fb42 	bl	80001c8 <__aeabi_uldivmod>
 8005b44:	4602      	mov	r2, r0
 8005b46:	460b      	mov	r3, r1
 8005b48:	4b60      	ldr	r3, [pc, #384]	@ (8005ccc <UART_SetConfig+0x4e4>)
 8005b4a:	fba3 2302 	umull	r2, r3, r3, r2
 8005b4e:	095b      	lsrs	r3, r3, #5
 8005b50:	011c      	lsls	r4, r3, #4
 8005b52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b56:	2200      	movs	r2, #0
 8005b58:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005b5c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005b60:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005b64:	4642      	mov	r2, r8
 8005b66:	464b      	mov	r3, r9
 8005b68:	1891      	adds	r1, r2, r2
 8005b6a:	61b9      	str	r1, [r7, #24]
 8005b6c:	415b      	adcs	r3, r3
 8005b6e:	61fb      	str	r3, [r7, #28]
 8005b70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b74:	4641      	mov	r1, r8
 8005b76:	1851      	adds	r1, r2, r1
 8005b78:	6139      	str	r1, [r7, #16]
 8005b7a:	4649      	mov	r1, r9
 8005b7c:	414b      	adcs	r3, r1
 8005b7e:	617b      	str	r3, [r7, #20]
 8005b80:	f04f 0200 	mov.w	r2, #0
 8005b84:	f04f 0300 	mov.w	r3, #0
 8005b88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005b8c:	4659      	mov	r1, fp
 8005b8e:	00cb      	lsls	r3, r1, #3
 8005b90:	4651      	mov	r1, sl
 8005b92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b96:	4651      	mov	r1, sl
 8005b98:	00ca      	lsls	r2, r1, #3
 8005b9a:	4610      	mov	r0, r2
 8005b9c:	4619      	mov	r1, r3
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	4642      	mov	r2, r8
 8005ba2:	189b      	adds	r3, r3, r2
 8005ba4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005ba8:	464b      	mov	r3, r9
 8005baa:	460a      	mov	r2, r1
 8005bac:	eb42 0303 	adc.w	r3, r2, r3
 8005bb0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005bbe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005bc0:	f04f 0200 	mov.w	r2, #0
 8005bc4:	f04f 0300 	mov.w	r3, #0
 8005bc8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005bcc:	4649      	mov	r1, r9
 8005bce:	008b      	lsls	r3, r1, #2
 8005bd0:	4641      	mov	r1, r8
 8005bd2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005bd6:	4641      	mov	r1, r8
 8005bd8:	008a      	lsls	r2, r1, #2
 8005bda:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005bde:	f7fa faf3 	bl	80001c8 <__aeabi_uldivmod>
 8005be2:	4602      	mov	r2, r0
 8005be4:	460b      	mov	r3, r1
 8005be6:	4611      	mov	r1, r2
 8005be8:	4b38      	ldr	r3, [pc, #224]	@ (8005ccc <UART_SetConfig+0x4e4>)
 8005bea:	fba3 2301 	umull	r2, r3, r3, r1
 8005bee:	095b      	lsrs	r3, r3, #5
 8005bf0:	2264      	movs	r2, #100	@ 0x64
 8005bf2:	fb02 f303 	mul.w	r3, r2, r3
 8005bf6:	1acb      	subs	r3, r1, r3
 8005bf8:	011b      	lsls	r3, r3, #4
 8005bfa:	3332      	adds	r3, #50	@ 0x32
 8005bfc:	4a33      	ldr	r2, [pc, #204]	@ (8005ccc <UART_SetConfig+0x4e4>)
 8005bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8005c02:	095b      	lsrs	r3, r3, #5
 8005c04:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005c08:	441c      	add	r4, r3
 8005c0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c0e:	2200      	movs	r2, #0
 8005c10:	673b      	str	r3, [r7, #112]	@ 0x70
 8005c12:	677a      	str	r2, [r7, #116]	@ 0x74
 8005c14:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005c18:	4642      	mov	r2, r8
 8005c1a:	464b      	mov	r3, r9
 8005c1c:	1891      	adds	r1, r2, r2
 8005c1e:	60b9      	str	r1, [r7, #8]
 8005c20:	415b      	adcs	r3, r3
 8005c22:	60fb      	str	r3, [r7, #12]
 8005c24:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005c28:	4641      	mov	r1, r8
 8005c2a:	1851      	adds	r1, r2, r1
 8005c2c:	6039      	str	r1, [r7, #0]
 8005c2e:	4649      	mov	r1, r9
 8005c30:	414b      	adcs	r3, r1
 8005c32:	607b      	str	r3, [r7, #4]
 8005c34:	f04f 0200 	mov.w	r2, #0
 8005c38:	f04f 0300 	mov.w	r3, #0
 8005c3c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005c40:	4659      	mov	r1, fp
 8005c42:	00cb      	lsls	r3, r1, #3
 8005c44:	4651      	mov	r1, sl
 8005c46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c4a:	4651      	mov	r1, sl
 8005c4c:	00ca      	lsls	r2, r1, #3
 8005c4e:	4610      	mov	r0, r2
 8005c50:	4619      	mov	r1, r3
 8005c52:	4603      	mov	r3, r0
 8005c54:	4642      	mov	r2, r8
 8005c56:	189b      	adds	r3, r3, r2
 8005c58:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005c5a:	464b      	mov	r3, r9
 8005c5c:	460a      	mov	r2, r1
 8005c5e:	eb42 0303 	adc.w	r3, r2, r3
 8005c62:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	663b      	str	r3, [r7, #96]	@ 0x60
 8005c6e:	667a      	str	r2, [r7, #100]	@ 0x64
 8005c70:	f04f 0200 	mov.w	r2, #0
 8005c74:	f04f 0300 	mov.w	r3, #0
 8005c78:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005c7c:	4649      	mov	r1, r9
 8005c7e:	008b      	lsls	r3, r1, #2
 8005c80:	4641      	mov	r1, r8
 8005c82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c86:	4641      	mov	r1, r8
 8005c88:	008a      	lsls	r2, r1, #2
 8005c8a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005c8e:	f7fa fa9b 	bl	80001c8 <__aeabi_uldivmod>
 8005c92:	4602      	mov	r2, r0
 8005c94:	460b      	mov	r3, r1
 8005c96:	4b0d      	ldr	r3, [pc, #52]	@ (8005ccc <UART_SetConfig+0x4e4>)
 8005c98:	fba3 1302 	umull	r1, r3, r3, r2
 8005c9c:	095b      	lsrs	r3, r3, #5
 8005c9e:	2164      	movs	r1, #100	@ 0x64
 8005ca0:	fb01 f303 	mul.w	r3, r1, r3
 8005ca4:	1ad3      	subs	r3, r2, r3
 8005ca6:	011b      	lsls	r3, r3, #4
 8005ca8:	3332      	adds	r3, #50	@ 0x32
 8005caa:	4a08      	ldr	r2, [pc, #32]	@ (8005ccc <UART_SetConfig+0x4e4>)
 8005cac:	fba2 2303 	umull	r2, r3, r2, r3
 8005cb0:	095b      	lsrs	r3, r3, #5
 8005cb2:	f003 020f 	and.w	r2, r3, #15
 8005cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4422      	add	r2, r4
 8005cbe:	609a      	str	r2, [r3, #8]
}
 8005cc0:	bf00      	nop
 8005cc2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ccc:	51eb851f 	.word	0x51eb851f

08005cd0 <std>:
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	b510      	push	{r4, lr}
 8005cd4:	4604      	mov	r4, r0
 8005cd6:	e9c0 3300 	strd	r3, r3, [r0]
 8005cda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005cde:	6083      	str	r3, [r0, #8]
 8005ce0:	8181      	strh	r1, [r0, #12]
 8005ce2:	6643      	str	r3, [r0, #100]	@ 0x64
 8005ce4:	81c2      	strh	r2, [r0, #14]
 8005ce6:	6183      	str	r3, [r0, #24]
 8005ce8:	4619      	mov	r1, r3
 8005cea:	2208      	movs	r2, #8
 8005cec:	305c      	adds	r0, #92	@ 0x5c
 8005cee:	f000 f9e7 	bl	80060c0 <memset>
 8005cf2:	4b0d      	ldr	r3, [pc, #52]	@ (8005d28 <std+0x58>)
 8005cf4:	6263      	str	r3, [r4, #36]	@ 0x24
 8005cf6:	4b0d      	ldr	r3, [pc, #52]	@ (8005d2c <std+0x5c>)
 8005cf8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005cfa:	4b0d      	ldr	r3, [pc, #52]	@ (8005d30 <std+0x60>)
 8005cfc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005cfe:	4b0d      	ldr	r3, [pc, #52]	@ (8005d34 <std+0x64>)
 8005d00:	6323      	str	r3, [r4, #48]	@ 0x30
 8005d02:	4b0d      	ldr	r3, [pc, #52]	@ (8005d38 <std+0x68>)
 8005d04:	6224      	str	r4, [r4, #32]
 8005d06:	429c      	cmp	r4, r3
 8005d08:	d006      	beq.n	8005d18 <std+0x48>
 8005d0a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005d0e:	4294      	cmp	r4, r2
 8005d10:	d002      	beq.n	8005d18 <std+0x48>
 8005d12:	33d0      	adds	r3, #208	@ 0xd0
 8005d14:	429c      	cmp	r4, r3
 8005d16:	d105      	bne.n	8005d24 <std+0x54>
 8005d18:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005d1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d20:	f000 ba46 	b.w	80061b0 <__retarget_lock_init_recursive>
 8005d24:	bd10      	pop	{r4, pc}
 8005d26:	bf00      	nop
 8005d28:	08005f11 	.word	0x08005f11
 8005d2c:	08005f33 	.word	0x08005f33
 8005d30:	08005f6b 	.word	0x08005f6b
 8005d34:	08005f8f 	.word	0x08005f8f
 8005d38:	20000340 	.word	0x20000340

08005d3c <stdio_exit_handler>:
 8005d3c:	4a02      	ldr	r2, [pc, #8]	@ (8005d48 <stdio_exit_handler+0xc>)
 8005d3e:	4903      	ldr	r1, [pc, #12]	@ (8005d4c <stdio_exit_handler+0x10>)
 8005d40:	4803      	ldr	r0, [pc, #12]	@ (8005d50 <stdio_exit_handler+0x14>)
 8005d42:	f000 b869 	b.w	8005e18 <_fwalk_sglue>
 8005d46:	bf00      	nop
 8005d48:	2000000c 	.word	0x2000000c
 8005d4c:	080064b1 	.word	0x080064b1
 8005d50:	2000001c 	.word	0x2000001c

08005d54 <cleanup_stdio>:
 8005d54:	6841      	ldr	r1, [r0, #4]
 8005d56:	4b0c      	ldr	r3, [pc, #48]	@ (8005d88 <cleanup_stdio+0x34>)
 8005d58:	4299      	cmp	r1, r3
 8005d5a:	b510      	push	{r4, lr}
 8005d5c:	4604      	mov	r4, r0
 8005d5e:	d001      	beq.n	8005d64 <cleanup_stdio+0x10>
 8005d60:	f000 fba6 	bl	80064b0 <_fflush_r>
 8005d64:	68a1      	ldr	r1, [r4, #8]
 8005d66:	4b09      	ldr	r3, [pc, #36]	@ (8005d8c <cleanup_stdio+0x38>)
 8005d68:	4299      	cmp	r1, r3
 8005d6a:	d002      	beq.n	8005d72 <cleanup_stdio+0x1e>
 8005d6c:	4620      	mov	r0, r4
 8005d6e:	f000 fb9f 	bl	80064b0 <_fflush_r>
 8005d72:	68e1      	ldr	r1, [r4, #12]
 8005d74:	4b06      	ldr	r3, [pc, #24]	@ (8005d90 <cleanup_stdio+0x3c>)
 8005d76:	4299      	cmp	r1, r3
 8005d78:	d004      	beq.n	8005d84 <cleanup_stdio+0x30>
 8005d7a:	4620      	mov	r0, r4
 8005d7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d80:	f000 bb96 	b.w	80064b0 <_fflush_r>
 8005d84:	bd10      	pop	{r4, pc}
 8005d86:	bf00      	nop
 8005d88:	20000340 	.word	0x20000340
 8005d8c:	200003a8 	.word	0x200003a8
 8005d90:	20000410 	.word	0x20000410

08005d94 <global_stdio_init.part.0>:
 8005d94:	b510      	push	{r4, lr}
 8005d96:	4b0b      	ldr	r3, [pc, #44]	@ (8005dc4 <global_stdio_init.part.0+0x30>)
 8005d98:	4c0b      	ldr	r4, [pc, #44]	@ (8005dc8 <global_stdio_init.part.0+0x34>)
 8005d9a:	4a0c      	ldr	r2, [pc, #48]	@ (8005dcc <global_stdio_init.part.0+0x38>)
 8005d9c:	601a      	str	r2, [r3, #0]
 8005d9e:	4620      	mov	r0, r4
 8005da0:	2200      	movs	r2, #0
 8005da2:	2104      	movs	r1, #4
 8005da4:	f7ff ff94 	bl	8005cd0 <std>
 8005da8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005dac:	2201      	movs	r2, #1
 8005dae:	2109      	movs	r1, #9
 8005db0:	f7ff ff8e 	bl	8005cd0 <std>
 8005db4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005db8:	2202      	movs	r2, #2
 8005dba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005dbe:	2112      	movs	r1, #18
 8005dc0:	f7ff bf86 	b.w	8005cd0 <std>
 8005dc4:	20000478 	.word	0x20000478
 8005dc8:	20000340 	.word	0x20000340
 8005dcc:	08005d3d 	.word	0x08005d3d

08005dd0 <__sfp_lock_acquire>:
 8005dd0:	4801      	ldr	r0, [pc, #4]	@ (8005dd8 <__sfp_lock_acquire+0x8>)
 8005dd2:	f000 b9ee 	b.w	80061b2 <__retarget_lock_acquire_recursive>
 8005dd6:	bf00      	nop
 8005dd8:	20000481 	.word	0x20000481

08005ddc <__sfp_lock_release>:
 8005ddc:	4801      	ldr	r0, [pc, #4]	@ (8005de4 <__sfp_lock_release+0x8>)
 8005dde:	f000 b9e9 	b.w	80061b4 <__retarget_lock_release_recursive>
 8005de2:	bf00      	nop
 8005de4:	20000481 	.word	0x20000481

08005de8 <__sinit>:
 8005de8:	b510      	push	{r4, lr}
 8005dea:	4604      	mov	r4, r0
 8005dec:	f7ff fff0 	bl	8005dd0 <__sfp_lock_acquire>
 8005df0:	6a23      	ldr	r3, [r4, #32]
 8005df2:	b11b      	cbz	r3, 8005dfc <__sinit+0x14>
 8005df4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005df8:	f7ff bff0 	b.w	8005ddc <__sfp_lock_release>
 8005dfc:	4b04      	ldr	r3, [pc, #16]	@ (8005e10 <__sinit+0x28>)
 8005dfe:	6223      	str	r3, [r4, #32]
 8005e00:	4b04      	ldr	r3, [pc, #16]	@ (8005e14 <__sinit+0x2c>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d1f5      	bne.n	8005df4 <__sinit+0xc>
 8005e08:	f7ff ffc4 	bl	8005d94 <global_stdio_init.part.0>
 8005e0c:	e7f2      	b.n	8005df4 <__sinit+0xc>
 8005e0e:	bf00      	nop
 8005e10:	08005d55 	.word	0x08005d55
 8005e14:	20000478 	.word	0x20000478

08005e18 <_fwalk_sglue>:
 8005e18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e1c:	4607      	mov	r7, r0
 8005e1e:	4688      	mov	r8, r1
 8005e20:	4614      	mov	r4, r2
 8005e22:	2600      	movs	r6, #0
 8005e24:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005e28:	f1b9 0901 	subs.w	r9, r9, #1
 8005e2c:	d505      	bpl.n	8005e3a <_fwalk_sglue+0x22>
 8005e2e:	6824      	ldr	r4, [r4, #0]
 8005e30:	2c00      	cmp	r4, #0
 8005e32:	d1f7      	bne.n	8005e24 <_fwalk_sglue+0xc>
 8005e34:	4630      	mov	r0, r6
 8005e36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e3a:	89ab      	ldrh	r3, [r5, #12]
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d907      	bls.n	8005e50 <_fwalk_sglue+0x38>
 8005e40:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005e44:	3301      	adds	r3, #1
 8005e46:	d003      	beq.n	8005e50 <_fwalk_sglue+0x38>
 8005e48:	4629      	mov	r1, r5
 8005e4a:	4638      	mov	r0, r7
 8005e4c:	47c0      	blx	r8
 8005e4e:	4306      	orrs	r6, r0
 8005e50:	3568      	adds	r5, #104	@ 0x68
 8005e52:	e7e9      	b.n	8005e28 <_fwalk_sglue+0x10>

08005e54 <_puts_r>:
 8005e54:	6a03      	ldr	r3, [r0, #32]
 8005e56:	b570      	push	{r4, r5, r6, lr}
 8005e58:	6884      	ldr	r4, [r0, #8]
 8005e5a:	4605      	mov	r5, r0
 8005e5c:	460e      	mov	r6, r1
 8005e5e:	b90b      	cbnz	r3, 8005e64 <_puts_r+0x10>
 8005e60:	f7ff ffc2 	bl	8005de8 <__sinit>
 8005e64:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005e66:	07db      	lsls	r3, r3, #31
 8005e68:	d405      	bmi.n	8005e76 <_puts_r+0x22>
 8005e6a:	89a3      	ldrh	r3, [r4, #12]
 8005e6c:	0598      	lsls	r0, r3, #22
 8005e6e:	d402      	bmi.n	8005e76 <_puts_r+0x22>
 8005e70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005e72:	f000 f99e 	bl	80061b2 <__retarget_lock_acquire_recursive>
 8005e76:	89a3      	ldrh	r3, [r4, #12]
 8005e78:	0719      	lsls	r1, r3, #28
 8005e7a:	d502      	bpl.n	8005e82 <_puts_r+0x2e>
 8005e7c:	6923      	ldr	r3, [r4, #16]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d135      	bne.n	8005eee <_puts_r+0x9a>
 8005e82:	4621      	mov	r1, r4
 8005e84:	4628      	mov	r0, r5
 8005e86:	f000 f8c5 	bl	8006014 <__swsetup_r>
 8005e8a:	b380      	cbz	r0, 8005eee <_puts_r+0x9a>
 8005e8c:	f04f 35ff 	mov.w	r5, #4294967295
 8005e90:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005e92:	07da      	lsls	r2, r3, #31
 8005e94:	d405      	bmi.n	8005ea2 <_puts_r+0x4e>
 8005e96:	89a3      	ldrh	r3, [r4, #12]
 8005e98:	059b      	lsls	r3, r3, #22
 8005e9a:	d402      	bmi.n	8005ea2 <_puts_r+0x4e>
 8005e9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005e9e:	f000 f989 	bl	80061b4 <__retarget_lock_release_recursive>
 8005ea2:	4628      	mov	r0, r5
 8005ea4:	bd70      	pop	{r4, r5, r6, pc}
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	da04      	bge.n	8005eb4 <_puts_r+0x60>
 8005eaa:	69a2      	ldr	r2, [r4, #24]
 8005eac:	429a      	cmp	r2, r3
 8005eae:	dc17      	bgt.n	8005ee0 <_puts_r+0x8c>
 8005eb0:	290a      	cmp	r1, #10
 8005eb2:	d015      	beq.n	8005ee0 <_puts_r+0x8c>
 8005eb4:	6823      	ldr	r3, [r4, #0]
 8005eb6:	1c5a      	adds	r2, r3, #1
 8005eb8:	6022      	str	r2, [r4, #0]
 8005eba:	7019      	strb	r1, [r3, #0]
 8005ebc:	68a3      	ldr	r3, [r4, #8]
 8005ebe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005ec2:	3b01      	subs	r3, #1
 8005ec4:	60a3      	str	r3, [r4, #8]
 8005ec6:	2900      	cmp	r1, #0
 8005ec8:	d1ed      	bne.n	8005ea6 <_puts_r+0x52>
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	da11      	bge.n	8005ef2 <_puts_r+0x9e>
 8005ece:	4622      	mov	r2, r4
 8005ed0:	210a      	movs	r1, #10
 8005ed2:	4628      	mov	r0, r5
 8005ed4:	f000 f85f 	bl	8005f96 <__swbuf_r>
 8005ed8:	3001      	adds	r0, #1
 8005eda:	d0d7      	beq.n	8005e8c <_puts_r+0x38>
 8005edc:	250a      	movs	r5, #10
 8005ede:	e7d7      	b.n	8005e90 <_puts_r+0x3c>
 8005ee0:	4622      	mov	r2, r4
 8005ee2:	4628      	mov	r0, r5
 8005ee4:	f000 f857 	bl	8005f96 <__swbuf_r>
 8005ee8:	3001      	adds	r0, #1
 8005eea:	d1e7      	bne.n	8005ebc <_puts_r+0x68>
 8005eec:	e7ce      	b.n	8005e8c <_puts_r+0x38>
 8005eee:	3e01      	subs	r6, #1
 8005ef0:	e7e4      	b.n	8005ebc <_puts_r+0x68>
 8005ef2:	6823      	ldr	r3, [r4, #0]
 8005ef4:	1c5a      	adds	r2, r3, #1
 8005ef6:	6022      	str	r2, [r4, #0]
 8005ef8:	220a      	movs	r2, #10
 8005efa:	701a      	strb	r2, [r3, #0]
 8005efc:	e7ee      	b.n	8005edc <_puts_r+0x88>
	...

08005f00 <puts>:
 8005f00:	4b02      	ldr	r3, [pc, #8]	@ (8005f0c <puts+0xc>)
 8005f02:	4601      	mov	r1, r0
 8005f04:	6818      	ldr	r0, [r3, #0]
 8005f06:	f7ff bfa5 	b.w	8005e54 <_puts_r>
 8005f0a:	bf00      	nop
 8005f0c:	20000018 	.word	0x20000018

08005f10 <__sread>:
 8005f10:	b510      	push	{r4, lr}
 8005f12:	460c      	mov	r4, r1
 8005f14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f18:	f000 f8fc 	bl	8006114 <_read_r>
 8005f1c:	2800      	cmp	r0, #0
 8005f1e:	bfab      	itete	ge
 8005f20:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005f22:	89a3      	ldrhlt	r3, [r4, #12]
 8005f24:	181b      	addge	r3, r3, r0
 8005f26:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005f2a:	bfac      	ite	ge
 8005f2c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005f2e:	81a3      	strhlt	r3, [r4, #12]
 8005f30:	bd10      	pop	{r4, pc}

08005f32 <__swrite>:
 8005f32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f36:	461f      	mov	r7, r3
 8005f38:	898b      	ldrh	r3, [r1, #12]
 8005f3a:	05db      	lsls	r3, r3, #23
 8005f3c:	4605      	mov	r5, r0
 8005f3e:	460c      	mov	r4, r1
 8005f40:	4616      	mov	r6, r2
 8005f42:	d505      	bpl.n	8005f50 <__swrite+0x1e>
 8005f44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f48:	2302      	movs	r3, #2
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f000 f8d0 	bl	80060f0 <_lseek_r>
 8005f50:	89a3      	ldrh	r3, [r4, #12]
 8005f52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f56:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005f5a:	81a3      	strh	r3, [r4, #12]
 8005f5c:	4632      	mov	r2, r6
 8005f5e:	463b      	mov	r3, r7
 8005f60:	4628      	mov	r0, r5
 8005f62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f66:	f000 b8e7 	b.w	8006138 <_write_r>

08005f6a <__sseek>:
 8005f6a:	b510      	push	{r4, lr}
 8005f6c:	460c      	mov	r4, r1
 8005f6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f72:	f000 f8bd 	bl	80060f0 <_lseek_r>
 8005f76:	1c43      	adds	r3, r0, #1
 8005f78:	89a3      	ldrh	r3, [r4, #12]
 8005f7a:	bf15      	itete	ne
 8005f7c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005f7e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005f82:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005f86:	81a3      	strheq	r3, [r4, #12]
 8005f88:	bf18      	it	ne
 8005f8a:	81a3      	strhne	r3, [r4, #12]
 8005f8c:	bd10      	pop	{r4, pc}

08005f8e <__sclose>:
 8005f8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f92:	f000 b89d 	b.w	80060d0 <_close_r>

08005f96 <__swbuf_r>:
 8005f96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f98:	460e      	mov	r6, r1
 8005f9a:	4614      	mov	r4, r2
 8005f9c:	4605      	mov	r5, r0
 8005f9e:	b118      	cbz	r0, 8005fa8 <__swbuf_r+0x12>
 8005fa0:	6a03      	ldr	r3, [r0, #32]
 8005fa2:	b90b      	cbnz	r3, 8005fa8 <__swbuf_r+0x12>
 8005fa4:	f7ff ff20 	bl	8005de8 <__sinit>
 8005fa8:	69a3      	ldr	r3, [r4, #24]
 8005faa:	60a3      	str	r3, [r4, #8]
 8005fac:	89a3      	ldrh	r3, [r4, #12]
 8005fae:	071a      	lsls	r2, r3, #28
 8005fb0:	d501      	bpl.n	8005fb6 <__swbuf_r+0x20>
 8005fb2:	6923      	ldr	r3, [r4, #16]
 8005fb4:	b943      	cbnz	r3, 8005fc8 <__swbuf_r+0x32>
 8005fb6:	4621      	mov	r1, r4
 8005fb8:	4628      	mov	r0, r5
 8005fba:	f000 f82b 	bl	8006014 <__swsetup_r>
 8005fbe:	b118      	cbz	r0, 8005fc8 <__swbuf_r+0x32>
 8005fc0:	f04f 37ff 	mov.w	r7, #4294967295
 8005fc4:	4638      	mov	r0, r7
 8005fc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005fc8:	6823      	ldr	r3, [r4, #0]
 8005fca:	6922      	ldr	r2, [r4, #16]
 8005fcc:	1a98      	subs	r0, r3, r2
 8005fce:	6963      	ldr	r3, [r4, #20]
 8005fd0:	b2f6      	uxtb	r6, r6
 8005fd2:	4283      	cmp	r3, r0
 8005fd4:	4637      	mov	r7, r6
 8005fd6:	dc05      	bgt.n	8005fe4 <__swbuf_r+0x4e>
 8005fd8:	4621      	mov	r1, r4
 8005fda:	4628      	mov	r0, r5
 8005fdc:	f000 fa68 	bl	80064b0 <_fflush_r>
 8005fe0:	2800      	cmp	r0, #0
 8005fe2:	d1ed      	bne.n	8005fc0 <__swbuf_r+0x2a>
 8005fe4:	68a3      	ldr	r3, [r4, #8]
 8005fe6:	3b01      	subs	r3, #1
 8005fe8:	60a3      	str	r3, [r4, #8]
 8005fea:	6823      	ldr	r3, [r4, #0]
 8005fec:	1c5a      	adds	r2, r3, #1
 8005fee:	6022      	str	r2, [r4, #0]
 8005ff0:	701e      	strb	r6, [r3, #0]
 8005ff2:	6962      	ldr	r2, [r4, #20]
 8005ff4:	1c43      	adds	r3, r0, #1
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	d004      	beq.n	8006004 <__swbuf_r+0x6e>
 8005ffa:	89a3      	ldrh	r3, [r4, #12]
 8005ffc:	07db      	lsls	r3, r3, #31
 8005ffe:	d5e1      	bpl.n	8005fc4 <__swbuf_r+0x2e>
 8006000:	2e0a      	cmp	r6, #10
 8006002:	d1df      	bne.n	8005fc4 <__swbuf_r+0x2e>
 8006004:	4621      	mov	r1, r4
 8006006:	4628      	mov	r0, r5
 8006008:	f000 fa52 	bl	80064b0 <_fflush_r>
 800600c:	2800      	cmp	r0, #0
 800600e:	d0d9      	beq.n	8005fc4 <__swbuf_r+0x2e>
 8006010:	e7d6      	b.n	8005fc0 <__swbuf_r+0x2a>
	...

08006014 <__swsetup_r>:
 8006014:	b538      	push	{r3, r4, r5, lr}
 8006016:	4b29      	ldr	r3, [pc, #164]	@ (80060bc <__swsetup_r+0xa8>)
 8006018:	4605      	mov	r5, r0
 800601a:	6818      	ldr	r0, [r3, #0]
 800601c:	460c      	mov	r4, r1
 800601e:	b118      	cbz	r0, 8006028 <__swsetup_r+0x14>
 8006020:	6a03      	ldr	r3, [r0, #32]
 8006022:	b90b      	cbnz	r3, 8006028 <__swsetup_r+0x14>
 8006024:	f7ff fee0 	bl	8005de8 <__sinit>
 8006028:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800602c:	0719      	lsls	r1, r3, #28
 800602e:	d422      	bmi.n	8006076 <__swsetup_r+0x62>
 8006030:	06da      	lsls	r2, r3, #27
 8006032:	d407      	bmi.n	8006044 <__swsetup_r+0x30>
 8006034:	2209      	movs	r2, #9
 8006036:	602a      	str	r2, [r5, #0]
 8006038:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800603c:	81a3      	strh	r3, [r4, #12]
 800603e:	f04f 30ff 	mov.w	r0, #4294967295
 8006042:	e033      	b.n	80060ac <__swsetup_r+0x98>
 8006044:	0758      	lsls	r0, r3, #29
 8006046:	d512      	bpl.n	800606e <__swsetup_r+0x5a>
 8006048:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800604a:	b141      	cbz	r1, 800605e <__swsetup_r+0x4a>
 800604c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006050:	4299      	cmp	r1, r3
 8006052:	d002      	beq.n	800605a <__swsetup_r+0x46>
 8006054:	4628      	mov	r0, r5
 8006056:	f000 f8af 	bl	80061b8 <_free_r>
 800605a:	2300      	movs	r3, #0
 800605c:	6363      	str	r3, [r4, #52]	@ 0x34
 800605e:	89a3      	ldrh	r3, [r4, #12]
 8006060:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006064:	81a3      	strh	r3, [r4, #12]
 8006066:	2300      	movs	r3, #0
 8006068:	6063      	str	r3, [r4, #4]
 800606a:	6923      	ldr	r3, [r4, #16]
 800606c:	6023      	str	r3, [r4, #0]
 800606e:	89a3      	ldrh	r3, [r4, #12]
 8006070:	f043 0308 	orr.w	r3, r3, #8
 8006074:	81a3      	strh	r3, [r4, #12]
 8006076:	6923      	ldr	r3, [r4, #16]
 8006078:	b94b      	cbnz	r3, 800608e <__swsetup_r+0x7a>
 800607a:	89a3      	ldrh	r3, [r4, #12]
 800607c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006080:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006084:	d003      	beq.n	800608e <__swsetup_r+0x7a>
 8006086:	4621      	mov	r1, r4
 8006088:	4628      	mov	r0, r5
 800608a:	f000 fa5f 	bl	800654c <__smakebuf_r>
 800608e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006092:	f013 0201 	ands.w	r2, r3, #1
 8006096:	d00a      	beq.n	80060ae <__swsetup_r+0x9a>
 8006098:	2200      	movs	r2, #0
 800609a:	60a2      	str	r2, [r4, #8]
 800609c:	6962      	ldr	r2, [r4, #20]
 800609e:	4252      	negs	r2, r2
 80060a0:	61a2      	str	r2, [r4, #24]
 80060a2:	6922      	ldr	r2, [r4, #16]
 80060a4:	b942      	cbnz	r2, 80060b8 <__swsetup_r+0xa4>
 80060a6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80060aa:	d1c5      	bne.n	8006038 <__swsetup_r+0x24>
 80060ac:	bd38      	pop	{r3, r4, r5, pc}
 80060ae:	0799      	lsls	r1, r3, #30
 80060b0:	bf58      	it	pl
 80060b2:	6962      	ldrpl	r2, [r4, #20]
 80060b4:	60a2      	str	r2, [r4, #8]
 80060b6:	e7f4      	b.n	80060a2 <__swsetup_r+0x8e>
 80060b8:	2000      	movs	r0, #0
 80060ba:	e7f7      	b.n	80060ac <__swsetup_r+0x98>
 80060bc:	20000018 	.word	0x20000018

080060c0 <memset>:
 80060c0:	4402      	add	r2, r0
 80060c2:	4603      	mov	r3, r0
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d100      	bne.n	80060ca <memset+0xa>
 80060c8:	4770      	bx	lr
 80060ca:	f803 1b01 	strb.w	r1, [r3], #1
 80060ce:	e7f9      	b.n	80060c4 <memset+0x4>

080060d0 <_close_r>:
 80060d0:	b538      	push	{r3, r4, r5, lr}
 80060d2:	4d06      	ldr	r5, [pc, #24]	@ (80060ec <_close_r+0x1c>)
 80060d4:	2300      	movs	r3, #0
 80060d6:	4604      	mov	r4, r0
 80060d8:	4608      	mov	r0, r1
 80060da:	602b      	str	r3, [r5, #0]
 80060dc:	f7fb f9af 	bl	800143e <_close>
 80060e0:	1c43      	adds	r3, r0, #1
 80060e2:	d102      	bne.n	80060ea <_close_r+0x1a>
 80060e4:	682b      	ldr	r3, [r5, #0]
 80060e6:	b103      	cbz	r3, 80060ea <_close_r+0x1a>
 80060e8:	6023      	str	r3, [r4, #0]
 80060ea:	bd38      	pop	{r3, r4, r5, pc}
 80060ec:	2000047c 	.word	0x2000047c

080060f0 <_lseek_r>:
 80060f0:	b538      	push	{r3, r4, r5, lr}
 80060f2:	4d07      	ldr	r5, [pc, #28]	@ (8006110 <_lseek_r+0x20>)
 80060f4:	4604      	mov	r4, r0
 80060f6:	4608      	mov	r0, r1
 80060f8:	4611      	mov	r1, r2
 80060fa:	2200      	movs	r2, #0
 80060fc:	602a      	str	r2, [r5, #0]
 80060fe:	461a      	mov	r2, r3
 8006100:	f7fb f9c4 	bl	800148c <_lseek>
 8006104:	1c43      	adds	r3, r0, #1
 8006106:	d102      	bne.n	800610e <_lseek_r+0x1e>
 8006108:	682b      	ldr	r3, [r5, #0]
 800610a:	b103      	cbz	r3, 800610e <_lseek_r+0x1e>
 800610c:	6023      	str	r3, [r4, #0]
 800610e:	bd38      	pop	{r3, r4, r5, pc}
 8006110:	2000047c 	.word	0x2000047c

08006114 <_read_r>:
 8006114:	b538      	push	{r3, r4, r5, lr}
 8006116:	4d07      	ldr	r5, [pc, #28]	@ (8006134 <_read_r+0x20>)
 8006118:	4604      	mov	r4, r0
 800611a:	4608      	mov	r0, r1
 800611c:	4611      	mov	r1, r2
 800611e:	2200      	movs	r2, #0
 8006120:	602a      	str	r2, [r5, #0]
 8006122:	461a      	mov	r2, r3
 8006124:	f7fb f96e 	bl	8001404 <_read>
 8006128:	1c43      	adds	r3, r0, #1
 800612a:	d102      	bne.n	8006132 <_read_r+0x1e>
 800612c:	682b      	ldr	r3, [r5, #0]
 800612e:	b103      	cbz	r3, 8006132 <_read_r+0x1e>
 8006130:	6023      	str	r3, [r4, #0]
 8006132:	bd38      	pop	{r3, r4, r5, pc}
 8006134:	2000047c 	.word	0x2000047c

08006138 <_write_r>:
 8006138:	b538      	push	{r3, r4, r5, lr}
 800613a:	4d07      	ldr	r5, [pc, #28]	@ (8006158 <_write_r+0x20>)
 800613c:	4604      	mov	r4, r0
 800613e:	4608      	mov	r0, r1
 8006140:	4611      	mov	r1, r2
 8006142:	2200      	movs	r2, #0
 8006144:	602a      	str	r2, [r5, #0]
 8006146:	461a      	mov	r2, r3
 8006148:	f7fa fa3e 	bl	80005c8 <_write>
 800614c:	1c43      	adds	r3, r0, #1
 800614e:	d102      	bne.n	8006156 <_write_r+0x1e>
 8006150:	682b      	ldr	r3, [r5, #0]
 8006152:	b103      	cbz	r3, 8006156 <_write_r+0x1e>
 8006154:	6023      	str	r3, [r4, #0]
 8006156:	bd38      	pop	{r3, r4, r5, pc}
 8006158:	2000047c 	.word	0x2000047c

0800615c <__errno>:
 800615c:	4b01      	ldr	r3, [pc, #4]	@ (8006164 <__errno+0x8>)
 800615e:	6818      	ldr	r0, [r3, #0]
 8006160:	4770      	bx	lr
 8006162:	bf00      	nop
 8006164:	20000018 	.word	0x20000018

08006168 <__libc_init_array>:
 8006168:	b570      	push	{r4, r5, r6, lr}
 800616a:	4d0d      	ldr	r5, [pc, #52]	@ (80061a0 <__libc_init_array+0x38>)
 800616c:	4c0d      	ldr	r4, [pc, #52]	@ (80061a4 <__libc_init_array+0x3c>)
 800616e:	1b64      	subs	r4, r4, r5
 8006170:	10a4      	asrs	r4, r4, #2
 8006172:	2600      	movs	r6, #0
 8006174:	42a6      	cmp	r6, r4
 8006176:	d109      	bne.n	800618c <__libc_init_array+0x24>
 8006178:	4d0b      	ldr	r5, [pc, #44]	@ (80061a8 <__libc_init_array+0x40>)
 800617a:	4c0c      	ldr	r4, [pc, #48]	@ (80061ac <__libc_init_array+0x44>)
 800617c:	f000 fa54 	bl	8006628 <_init>
 8006180:	1b64      	subs	r4, r4, r5
 8006182:	10a4      	asrs	r4, r4, #2
 8006184:	2600      	movs	r6, #0
 8006186:	42a6      	cmp	r6, r4
 8006188:	d105      	bne.n	8006196 <__libc_init_array+0x2e>
 800618a:	bd70      	pop	{r4, r5, r6, pc}
 800618c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006190:	4798      	blx	r3
 8006192:	3601      	adds	r6, #1
 8006194:	e7ee      	b.n	8006174 <__libc_init_array+0xc>
 8006196:	f855 3b04 	ldr.w	r3, [r5], #4
 800619a:	4798      	blx	r3
 800619c:	3601      	adds	r6, #1
 800619e:	e7f2      	b.n	8006186 <__libc_init_array+0x1e>
 80061a0:	08006684 	.word	0x08006684
 80061a4:	08006684 	.word	0x08006684
 80061a8:	08006684 	.word	0x08006684
 80061ac:	08006688 	.word	0x08006688

080061b0 <__retarget_lock_init_recursive>:
 80061b0:	4770      	bx	lr

080061b2 <__retarget_lock_acquire_recursive>:
 80061b2:	4770      	bx	lr

080061b4 <__retarget_lock_release_recursive>:
 80061b4:	4770      	bx	lr
	...

080061b8 <_free_r>:
 80061b8:	b538      	push	{r3, r4, r5, lr}
 80061ba:	4605      	mov	r5, r0
 80061bc:	2900      	cmp	r1, #0
 80061be:	d041      	beq.n	8006244 <_free_r+0x8c>
 80061c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061c4:	1f0c      	subs	r4, r1, #4
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	bfb8      	it	lt
 80061ca:	18e4      	addlt	r4, r4, r3
 80061cc:	f000 f8e0 	bl	8006390 <__malloc_lock>
 80061d0:	4a1d      	ldr	r2, [pc, #116]	@ (8006248 <_free_r+0x90>)
 80061d2:	6813      	ldr	r3, [r2, #0]
 80061d4:	b933      	cbnz	r3, 80061e4 <_free_r+0x2c>
 80061d6:	6063      	str	r3, [r4, #4]
 80061d8:	6014      	str	r4, [r2, #0]
 80061da:	4628      	mov	r0, r5
 80061dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80061e0:	f000 b8dc 	b.w	800639c <__malloc_unlock>
 80061e4:	42a3      	cmp	r3, r4
 80061e6:	d908      	bls.n	80061fa <_free_r+0x42>
 80061e8:	6820      	ldr	r0, [r4, #0]
 80061ea:	1821      	adds	r1, r4, r0
 80061ec:	428b      	cmp	r3, r1
 80061ee:	bf01      	itttt	eq
 80061f0:	6819      	ldreq	r1, [r3, #0]
 80061f2:	685b      	ldreq	r3, [r3, #4]
 80061f4:	1809      	addeq	r1, r1, r0
 80061f6:	6021      	streq	r1, [r4, #0]
 80061f8:	e7ed      	b.n	80061d6 <_free_r+0x1e>
 80061fa:	461a      	mov	r2, r3
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	b10b      	cbz	r3, 8006204 <_free_r+0x4c>
 8006200:	42a3      	cmp	r3, r4
 8006202:	d9fa      	bls.n	80061fa <_free_r+0x42>
 8006204:	6811      	ldr	r1, [r2, #0]
 8006206:	1850      	adds	r0, r2, r1
 8006208:	42a0      	cmp	r0, r4
 800620a:	d10b      	bne.n	8006224 <_free_r+0x6c>
 800620c:	6820      	ldr	r0, [r4, #0]
 800620e:	4401      	add	r1, r0
 8006210:	1850      	adds	r0, r2, r1
 8006212:	4283      	cmp	r3, r0
 8006214:	6011      	str	r1, [r2, #0]
 8006216:	d1e0      	bne.n	80061da <_free_r+0x22>
 8006218:	6818      	ldr	r0, [r3, #0]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	6053      	str	r3, [r2, #4]
 800621e:	4408      	add	r0, r1
 8006220:	6010      	str	r0, [r2, #0]
 8006222:	e7da      	b.n	80061da <_free_r+0x22>
 8006224:	d902      	bls.n	800622c <_free_r+0x74>
 8006226:	230c      	movs	r3, #12
 8006228:	602b      	str	r3, [r5, #0]
 800622a:	e7d6      	b.n	80061da <_free_r+0x22>
 800622c:	6820      	ldr	r0, [r4, #0]
 800622e:	1821      	adds	r1, r4, r0
 8006230:	428b      	cmp	r3, r1
 8006232:	bf04      	itt	eq
 8006234:	6819      	ldreq	r1, [r3, #0]
 8006236:	685b      	ldreq	r3, [r3, #4]
 8006238:	6063      	str	r3, [r4, #4]
 800623a:	bf04      	itt	eq
 800623c:	1809      	addeq	r1, r1, r0
 800623e:	6021      	streq	r1, [r4, #0]
 8006240:	6054      	str	r4, [r2, #4]
 8006242:	e7ca      	b.n	80061da <_free_r+0x22>
 8006244:	bd38      	pop	{r3, r4, r5, pc}
 8006246:	bf00      	nop
 8006248:	20000488 	.word	0x20000488

0800624c <sbrk_aligned>:
 800624c:	b570      	push	{r4, r5, r6, lr}
 800624e:	4e0f      	ldr	r6, [pc, #60]	@ (800628c <sbrk_aligned+0x40>)
 8006250:	460c      	mov	r4, r1
 8006252:	6831      	ldr	r1, [r6, #0]
 8006254:	4605      	mov	r5, r0
 8006256:	b911      	cbnz	r1, 800625e <sbrk_aligned+0x12>
 8006258:	f000 f9d6 	bl	8006608 <_sbrk_r>
 800625c:	6030      	str	r0, [r6, #0]
 800625e:	4621      	mov	r1, r4
 8006260:	4628      	mov	r0, r5
 8006262:	f000 f9d1 	bl	8006608 <_sbrk_r>
 8006266:	1c43      	adds	r3, r0, #1
 8006268:	d103      	bne.n	8006272 <sbrk_aligned+0x26>
 800626a:	f04f 34ff 	mov.w	r4, #4294967295
 800626e:	4620      	mov	r0, r4
 8006270:	bd70      	pop	{r4, r5, r6, pc}
 8006272:	1cc4      	adds	r4, r0, #3
 8006274:	f024 0403 	bic.w	r4, r4, #3
 8006278:	42a0      	cmp	r0, r4
 800627a:	d0f8      	beq.n	800626e <sbrk_aligned+0x22>
 800627c:	1a21      	subs	r1, r4, r0
 800627e:	4628      	mov	r0, r5
 8006280:	f000 f9c2 	bl	8006608 <_sbrk_r>
 8006284:	3001      	adds	r0, #1
 8006286:	d1f2      	bne.n	800626e <sbrk_aligned+0x22>
 8006288:	e7ef      	b.n	800626a <sbrk_aligned+0x1e>
 800628a:	bf00      	nop
 800628c:	20000484 	.word	0x20000484

08006290 <_malloc_r>:
 8006290:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006294:	1ccd      	adds	r5, r1, #3
 8006296:	f025 0503 	bic.w	r5, r5, #3
 800629a:	3508      	adds	r5, #8
 800629c:	2d0c      	cmp	r5, #12
 800629e:	bf38      	it	cc
 80062a0:	250c      	movcc	r5, #12
 80062a2:	2d00      	cmp	r5, #0
 80062a4:	4606      	mov	r6, r0
 80062a6:	db01      	blt.n	80062ac <_malloc_r+0x1c>
 80062a8:	42a9      	cmp	r1, r5
 80062aa:	d904      	bls.n	80062b6 <_malloc_r+0x26>
 80062ac:	230c      	movs	r3, #12
 80062ae:	6033      	str	r3, [r6, #0]
 80062b0:	2000      	movs	r0, #0
 80062b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800638c <_malloc_r+0xfc>
 80062ba:	f000 f869 	bl	8006390 <__malloc_lock>
 80062be:	f8d8 3000 	ldr.w	r3, [r8]
 80062c2:	461c      	mov	r4, r3
 80062c4:	bb44      	cbnz	r4, 8006318 <_malloc_r+0x88>
 80062c6:	4629      	mov	r1, r5
 80062c8:	4630      	mov	r0, r6
 80062ca:	f7ff ffbf 	bl	800624c <sbrk_aligned>
 80062ce:	1c43      	adds	r3, r0, #1
 80062d0:	4604      	mov	r4, r0
 80062d2:	d158      	bne.n	8006386 <_malloc_r+0xf6>
 80062d4:	f8d8 4000 	ldr.w	r4, [r8]
 80062d8:	4627      	mov	r7, r4
 80062da:	2f00      	cmp	r7, #0
 80062dc:	d143      	bne.n	8006366 <_malloc_r+0xd6>
 80062de:	2c00      	cmp	r4, #0
 80062e0:	d04b      	beq.n	800637a <_malloc_r+0xea>
 80062e2:	6823      	ldr	r3, [r4, #0]
 80062e4:	4639      	mov	r1, r7
 80062e6:	4630      	mov	r0, r6
 80062e8:	eb04 0903 	add.w	r9, r4, r3
 80062ec:	f000 f98c 	bl	8006608 <_sbrk_r>
 80062f0:	4581      	cmp	r9, r0
 80062f2:	d142      	bne.n	800637a <_malloc_r+0xea>
 80062f4:	6821      	ldr	r1, [r4, #0]
 80062f6:	1a6d      	subs	r5, r5, r1
 80062f8:	4629      	mov	r1, r5
 80062fa:	4630      	mov	r0, r6
 80062fc:	f7ff ffa6 	bl	800624c <sbrk_aligned>
 8006300:	3001      	adds	r0, #1
 8006302:	d03a      	beq.n	800637a <_malloc_r+0xea>
 8006304:	6823      	ldr	r3, [r4, #0]
 8006306:	442b      	add	r3, r5
 8006308:	6023      	str	r3, [r4, #0]
 800630a:	f8d8 3000 	ldr.w	r3, [r8]
 800630e:	685a      	ldr	r2, [r3, #4]
 8006310:	bb62      	cbnz	r2, 800636c <_malloc_r+0xdc>
 8006312:	f8c8 7000 	str.w	r7, [r8]
 8006316:	e00f      	b.n	8006338 <_malloc_r+0xa8>
 8006318:	6822      	ldr	r2, [r4, #0]
 800631a:	1b52      	subs	r2, r2, r5
 800631c:	d420      	bmi.n	8006360 <_malloc_r+0xd0>
 800631e:	2a0b      	cmp	r2, #11
 8006320:	d917      	bls.n	8006352 <_malloc_r+0xc2>
 8006322:	1961      	adds	r1, r4, r5
 8006324:	42a3      	cmp	r3, r4
 8006326:	6025      	str	r5, [r4, #0]
 8006328:	bf18      	it	ne
 800632a:	6059      	strne	r1, [r3, #4]
 800632c:	6863      	ldr	r3, [r4, #4]
 800632e:	bf08      	it	eq
 8006330:	f8c8 1000 	streq.w	r1, [r8]
 8006334:	5162      	str	r2, [r4, r5]
 8006336:	604b      	str	r3, [r1, #4]
 8006338:	4630      	mov	r0, r6
 800633a:	f000 f82f 	bl	800639c <__malloc_unlock>
 800633e:	f104 000b 	add.w	r0, r4, #11
 8006342:	1d23      	adds	r3, r4, #4
 8006344:	f020 0007 	bic.w	r0, r0, #7
 8006348:	1ac2      	subs	r2, r0, r3
 800634a:	bf1c      	itt	ne
 800634c:	1a1b      	subne	r3, r3, r0
 800634e:	50a3      	strne	r3, [r4, r2]
 8006350:	e7af      	b.n	80062b2 <_malloc_r+0x22>
 8006352:	6862      	ldr	r2, [r4, #4]
 8006354:	42a3      	cmp	r3, r4
 8006356:	bf0c      	ite	eq
 8006358:	f8c8 2000 	streq.w	r2, [r8]
 800635c:	605a      	strne	r2, [r3, #4]
 800635e:	e7eb      	b.n	8006338 <_malloc_r+0xa8>
 8006360:	4623      	mov	r3, r4
 8006362:	6864      	ldr	r4, [r4, #4]
 8006364:	e7ae      	b.n	80062c4 <_malloc_r+0x34>
 8006366:	463c      	mov	r4, r7
 8006368:	687f      	ldr	r7, [r7, #4]
 800636a:	e7b6      	b.n	80062da <_malloc_r+0x4a>
 800636c:	461a      	mov	r2, r3
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	42a3      	cmp	r3, r4
 8006372:	d1fb      	bne.n	800636c <_malloc_r+0xdc>
 8006374:	2300      	movs	r3, #0
 8006376:	6053      	str	r3, [r2, #4]
 8006378:	e7de      	b.n	8006338 <_malloc_r+0xa8>
 800637a:	230c      	movs	r3, #12
 800637c:	6033      	str	r3, [r6, #0]
 800637e:	4630      	mov	r0, r6
 8006380:	f000 f80c 	bl	800639c <__malloc_unlock>
 8006384:	e794      	b.n	80062b0 <_malloc_r+0x20>
 8006386:	6005      	str	r5, [r0, #0]
 8006388:	e7d6      	b.n	8006338 <_malloc_r+0xa8>
 800638a:	bf00      	nop
 800638c:	20000488 	.word	0x20000488

08006390 <__malloc_lock>:
 8006390:	4801      	ldr	r0, [pc, #4]	@ (8006398 <__malloc_lock+0x8>)
 8006392:	f7ff bf0e 	b.w	80061b2 <__retarget_lock_acquire_recursive>
 8006396:	bf00      	nop
 8006398:	20000480 	.word	0x20000480

0800639c <__malloc_unlock>:
 800639c:	4801      	ldr	r0, [pc, #4]	@ (80063a4 <__malloc_unlock+0x8>)
 800639e:	f7ff bf09 	b.w	80061b4 <__retarget_lock_release_recursive>
 80063a2:	bf00      	nop
 80063a4:	20000480 	.word	0x20000480

080063a8 <__sflush_r>:
 80063a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80063ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063b0:	0716      	lsls	r6, r2, #28
 80063b2:	4605      	mov	r5, r0
 80063b4:	460c      	mov	r4, r1
 80063b6:	d454      	bmi.n	8006462 <__sflush_r+0xba>
 80063b8:	684b      	ldr	r3, [r1, #4]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	dc02      	bgt.n	80063c4 <__sflush_r+0x1c>
 80063be:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	dd48      	ble.n	8006456 <__sflush_r+0xae>
 80063c4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80063c6:	2e00      	cmp	r6, #0
 80063c8:	d045      	beq.n	8006456 <__sflush_r+0xae>
 80063ca:	2300      	movs	r3, #0
 80063cc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80063d0:	682f      	ldr	r7, [r5, #0]
 80063d2:	6a21      	ldr	r1, [r4, #32]
 80063d4:	602b      	str	r3, [r5, #0]
 80063d6:	d030      	beq.n	800643a <__sflush_r+0x92>
 80063d8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80063da:	89a3      	ldrh	r3, [r4, #12]
 80063dc:	0759      	lsls	r1, r3, #29
 80063de:	d505      	bpl.n	80063ec <__sflush_r+0x44>
 80063e0:	6863      	ldr	r3, [r4, #4]
 80063e2:	1ad2      	subs	r2, r2, r3
 80063e4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80063e6:	b10b      	cbz	r3, 80063ec <__sflush_r+0x44>
 80063e8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80063ea:	1ad2      	subs	r2, r2, r3
 80063ec:	2300      	movs	r3, #0
 80063ee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80063f0:	6a21      	ldr	r1, [r4, #32]
 80063f2:	4628      	mov	r0, r5
 80063f4:	47b0      	blx	r6
 80063f6:	1c43      	adds	r3, r0, #1
 80063f8:	89a3      	ldrh	r3, [r4, #12]
 80063fa:	d106      	bne.n	800640a <__sflush_r+0x62>
 80063fc:	6829      	ldr	r1, [r5, #0]
 80063fe:	291d      	cmp	r1, #29
 8006400:	d82b      	bhi.n	800645a <__sflush_r+0xb2>
 8006402:	4a2a      	ldr	r2, [pc, #168]	@ (80064ac <__sflush_r+0x104>)
 8006404:	410a      	asrs	r2, r1
 8006406:	07d6      	lsls	r6, r2, #31
 8006408:	d427      	bmi.n	800645a <__sflush_r+0xb2>
 800640a:	2200      	movs	r2, #0
 800640c:	6062      	str	r2, [r4, #4]
 800640e:	04d9      	lsls	r1, r3, #19
 8006410:	6922      	ldr	r2, [r4, #16]
 8006412:	6022      	str	r2, [r4, #0]
 8006414:	d504      	bpl.n	8006420 <__sflush_r+0x78>
 8006416:	1c42      	adds	r2, r0, #1
 8006418:	d101      	bne.n	800641e <__sflush_r+0x76>
 800641a:	682b      	ldr	r3, [r5, #0]
 800641c:	b903      	cbnz	r3, 8006420 <__sflush_r+0x78>
 800641e:	6560      	str	r0, [r4, #84]	@ 0x54
 8006420:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006422:	602f      	str	r7, [r5, #0]
 8006424:	b1b9      	cbz	r1, 8006456 <__sflush_r+0xae>
 8006426:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800642a:	4299      	cmp	r1, r3
 800642c:	d002      	beq.n	8006434 <__sflush_r+0x8c>
 800642e:	4628      	mov	r0, r5
 8006430:	f7ff fec2 	bl	80061b8 <_free_r>
 8006434:	2300      	movs	r3, #0
 8006436:	6363      	str	r3, [r4, #52]	@ 0x34
 8006438:	e00d      	b.n	8006456 <__sflush_r+0xae>
 800643a:	2301      	movs	r3, #1
 800643c:	4628      	mov	r0, r5
 800643e:	47b0      	blx	r6
 8006440:	4602      	mov	r2, r0
 8006442:	1c50      	adds	r0, r2, #1
 8006444:	d1c9      	bne.n	80063da <__sflush_r+0x32>
 8006446:	682b      	ldr	r3, [r5, #0]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d0c6      	beq.n	80063da <__sflush_r+0x32>
 800644c:	2b1d      	cmp	r3, #29
 800644e:	d001      	beq.n	8006454 <__sflush_r+0xac>
 8006450:	2b16      	cmp	r3, #22
 8006452:	d11e      	bne.n	8006492 <__sflush_r+0xea>
 8006454:	602f      	str	r7, [r5, #0]
 8006456:	2000      	movs	r0, #0
 8006458:	e022      	b.n	80064a0 <__sflush_r+0xf8>
 800645a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800645e:	b21b      	sxth	r3, r3
 8006460:	e01b      	b.n	800649a <__sflush_r+0xf2>
 8006462:	690f      	ldr	r7, [r1, #16]
 8006464:	2f00      	cmp	r7, #0
 8006466:	d0f6      	beq.n	8006456 <__sflush_r+0xae>
 8006468:	0793      	lsls	r3, r2, #30
 800646a:	680e      	ldr	r6, [r1, #0]
 800646c:	bf08      	it	eq
 800646e:	694b      	ldreq	r3, [r1, #20]
 8006470:	600f      	str	r7, [r1, #0]
 8006472:	bf18      	it	ne
 8006474:	2300      	movne	r3, #0
 8006476:	eba6 0807 	sub.w	r8, r6, r7
 800647a:	608b      	str	r3, [r1, #8]
 800647c:	f1b8 0f00 	cmp.w	r8, #0
 8006480:	dde9      	ble.n	8006456 <__sflush_r+0xae>
 8006482:	6a21      	ldr	r1, [r4, #32]
 8006484:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006486:	4643      	mov	r3, r8
 8006488:	463a      	mov	r2, r7
 800648a:	4628      	mov	r0, r5
 800648c:	47b0      	blx	r6
 800648e:	2800      	cmp	r0, #0
 8006490:	dc08      	bgt.n	80064a4 <__sflush_r+0xfc>
 8006492:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006496:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800649a:	81a3      	strh	r3, [r4, #12]
 800649c:	f04f 30ff 	mov.w	r0, #4294967295
 80064a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064a4:	4407      	add	r7, r0
 80064a6:	eba8 0800 	sub.w	r8, r8, r0
 80064aa:	e7e7      	b.n	800647c <__sflush_r+0xd4>
 80064ac:	dfbffffe 	.word	0xdfbffffe

080064b0 <_fflush_r>:
 80064b0:	b538      	push	{r3, r4, r5, lr}
 80064b2:	690b      	ldr	r3, [r1, #16]
 80064b4:	4605      	mov	r5, r0
 80064b6:	460c      	mov	r4, r1
 80064b8:	b913      	cbnz	r3, 80064c0 <_fflush_r+0x10>
 80064ba:	2500      	movs	r5, #0
 80064bc:	4628      	mov	r0, r5
 80064be:	bd38      	pop	{r3, r4, r5, pc}
 80064c0:	b118      	cbz	r0, 80064ca <_fflush_r+0x1a>
 80064c2:	6a03      	ldr	r3, [r0, #32]
 80064c4:	b90b      	cbnz	r3, 80064ca <_fflush_r+0x1a>
 80064c6:	f7ff fc8f 	bl	8005de8 <__sinit>
 80064ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d0f3      	beq.n	80064ba <_fflush_r+0xa>
 80064d2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80064d4:	07d0      	lsls	r0, r2, #31
 80064d6:	d404      	bmi.n	80064e2 <_fflush_r+0x32>
 80064d8:	0599      	lsls	r1, r3, #22
 80064da:	d402      	bmi.n	80064e2 <_fflush_r+0x32>
 80064dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80064de:	f7ff fe68 	bl	80061b2 <__retarget_lock_acquire_recursive>
 80064e2:	4628      	mov	r0, r5
 80064e4:	4621      	mov	r1, r4
 80064e6:	f7ff ff5f 	bl	80063a8 <__sflush_r>
 80064ea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80064ec:	07da      	lsls	r2, r3, #31
 80064ee:	4605      	mov	r5, r0
 80064f0:	d4e4      	bmi.n	80064bc <_fflush_r+0xc>
 80064f2:	89a3      	ldrh	r3, [r4, #12]
 80064f4:	059b      	lsls	r3, r3, #22
 80064f6:	d4e1      	bmi.n	80064bc <_fflush_r+0xc>
 80064f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80064fa:	f7ff fe5b 	bl	80061b4 <__retarget_lock_release_recursive>
 80064fe:	e7dd      	b.n	80064bc <_fflush_r+0xc>

08006500 <__swhatbuf_r>:
 8006500:	b570      	push	{r4, r5, r6, lr}
 8006502:	460c      	mov	r4, r1
 8006504:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006508:	2900      	cmp	r1, #0
 800650a:	b096      	sub	sp, #88	@ 0x58
 800650c:	4615      	mov	r5, r2
 800650e:	461e      	mov	r6, r3
 8006510:	da0d      	bge.n	800652e <__swhatbuf_r+0x2e>
 8006512:	89a3      	ldrh	r3, [r4, #12]
 8006514:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006518:	f04f 0100 	mov.w	r1, #0
 800651c:	bf14      	ite	ne
 800651e:	2340      	movne	r3, #64	@ 0x40
 8006520:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006524:	2000      	movs	r0, #0
 8006526:	6031      	str	r1, [r6, #0]
 8006528:	602b      	str	r3, [r5, #0]
 800652a:	b016      	add	sp, #88	@ 0x58
 800652c:	bd70      	pop	{r4, r5, r6, pc}
 800652e:	466a      	mov	r2, sp
 8006530:	f000 f848 	bl	80065c4 <_fstat_r>
 8006534:	2800      	cmp	r0, #0
 8006536:	dbec      	blt.n	8006512 <__swhatbuf_r+0x12>
 8006538:	9901      	ldr	r1, [sp, #4]
 800653a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800653e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006542:	4259      	negs	r1, r3
 8006544:	4159      	adcs	r1, r3
 8006546:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800654a:	e7eb      	b.n	8006524 <__swhatbuf_r+0x24>

0800654c <__smakebuf_r>:
 800654c:	898b      	ldrh	r3, [r1, #12]
 800654e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006550:	079d      	lsls	r5, r3, #30
 8006552:	4606      	mov	r6, r0
 8006554:	460c      	mov	r4, r1
 8006556:	d507      	bpl.n	8006568 <__smakebuf_r+0x1c>
 8006558:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800655c:	6023      	str	r3, [r4, #0]
 800655e:	6123      	str	r3, [r4, #16]
 8006560:	2301      	movs	r3, #1
 8006562:	6163      	str	r3, [r4, #20]
 8006564:	b003      	add	sp, #12
 8006566:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006568:	ab01      	add	r3, sp, #4
 800656a:	466a      	mov	r2, sp
 800656c:	f7ff ffc8 	bl	8006500 <__swhatbuf_r>
 8006570:	9f00      	ldr	r7, [sp, #0]
 8006572:	4605      	mov	r5, r0
 8006574:	4639      	mov	r1, r7
 8006576:	4630      	mov	r0, r6
 8006578:	f7ff fe8a 	bl	8006290 <_malloc_r>
 800657c:	b948      	cbnz	r0, 8006592 <__smakebuf_r+0x46>
 800657e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006582:	059a      	lsls	r2, r3, #22
 8006584:	d4ee      	bmi.n	8006564 <__smakebuf_r+0x18>
 8006586:	f023 0303 	bic.w	r3, r3, #3
 800658a:	f043 0302 	orr.w	r3, r3, #2
 800658e:	81a3      	strh	r3, [r4, #12]
 8006590:	e7e2      	b.n	8006558 <__smakebuf_r+0xc>
 8006592:	89a3      	ldrh	r3, [r4, #12]
 8006594:	6020      	str	r0, [r4, #0]
 8006596:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800659a:	81a3      	strh	r3, [r4, #12]
 800659c:	9b01      	ldr	r3, [sp, #4]
 800659e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80065a2:	b15b      	cbz	r3, 80065bc <__smakebuf_r+0x70>
 80065a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80065a8:	4630      	mov	r0, r6
 80065aa:	f000 f81d 	bl	80065e8 <_isatty_r>
 80065ae:	b128      	cbz	r0, 80065bc <__smakebuf_r+0x70>
 80065b0:	89a3      	ldrh	r3, [r4, #12]
 80065b2:	f023 0303 	bic.w	r3, r3, #3
 80065b6:	f043 0301 	orr.w	r3, r3, #1
 80065ba:	81a3      	strh	r3, [r4, #12]
 80065bc:	89a3      	ldrh	r3, [r4, #12]
 80065be:	431d      	orrs	r5, r3
 80065c0:	81a5      	strh	r5, [r4, #12]
 80065c2:	e7cf      	b.n	8006564 <__smakebuf_r+0x18>

080065c4 <_fstat_r>:
 80065c4:	b538      	push	{r3, r4, r5, lr}
 80065c6:	4d07      	ldr	r5, [pc, #28]	@ (80065e4 <_fstat_r+0x20>)
 80065c8:	2300      	movs	r3, #0
 80065ca:	4604      	mov	r4, r0
 80065cc:	4608      	mov	r0, r1
 80065ce:	4611      	mov	r1, r2
 80065d0:	602b      	str	r3, [r5, #0]
 80065d2:	f7fa ff40 	bl	8001456 <_fstat>
 80065d6:	1c43      	adds	r3, r0, #1
 80065d8:	d102      	bne.n	80065e0 <_fstat_r+0x1c>
 80065da:	682b      	ldr	r3, [r5, #0]
 80065dc:	b103      	cbz	r3, 80065e0 <_fstat_r+0x1c>
 80065de:	6023      	str	r3, [r4, #0]
 80065e0:	bd38      	pop	{r3, r4, r5, pc}
 80065e2:	bf00      	nop
 80065e4:	2000047c 	.word	0x2000047c

080065e8 <_isatty_r>:
 80065e8:	b538      	push	{r3, r4, r5, lr}
 80065ea:	4d06      	ldr	r5, [pc, #24]	@ (8006604 <_isatty_r+0x1c>)
 80065ec:	2300      	movs	r3, #0
 80065ee:	4604      	mov	r4, r0
 80065f0:	4608      	mov	r0, r1
 80065f2:	602b      	str	r3, [r5, #0]
 80065f4:	f7fa ff3f 	bl	8001476 <_isatty>
 80065f8:	1c43      	adds	r3, r0, #1
 80065fa:	d102      	bne.n	8006602 <_isatty_r+0x1a>
 80065fc:	682b      	ldr	r3, [r5, #0]
 80065fe:	b103      	cbz	r3, 8006602 <_isatty_r+0x1a>
 8006600:	6023      	str	r3, [r4, #0]
 8006602:	bd38      	pop	{r3, r4, r5, pc}
 8006604:	2000047c 	.word	0x2000047c

08006608 <_sbrk_r>:
 8006608:	b538      	push	{r3, r4, r5, lr}
 800660a:	4d06      	ldr	r5, [pc, #24]	@ (8006624 <_sbrk_r+0x1c>)
 800660c:	2300      	movs	r3, #0
 800660e:	4604      	mov	r4, r0
 8006610:	4608      	mov	r0, r1
 8006612:	602b      	str	r3, [r5, #0]
 8006614:	f7fa ff48 	bl	80014a8 <_sbrk>
 8006618:	1c43      	adds	r3, r0, #1
 800661a:	d102      	bne.n	8006622 <_sbrk_r+0x1a>
 800661c:	682b      	ldr	r3, [r5, #0]
 800661e:	b103      	cbz	r3, 8006622 <_sbrk_r+0x1a>
 8006620:	6023      	str	r3, [r4, #0]
 8006622:	bd38      	pop	{r3, r4, r5, pc}
 8006624:	2000047c 	.word	0x2000047c

08006628 <_init>:
 8006628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800662a:	bf00      	nop
 800662c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800662e:	bc08      	pop	{r3}
 8006630:	469e      	mov	lr, r3
 8006632:	4770      	bx	lr

08006634 <_fini>:
 8006634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006636:	bf00      	nop
 8006638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800663a:	bc08      	pop	{r3}
 800663c:	469e      	mov	lr, r3
 800663e:	4770      	bx	lr
