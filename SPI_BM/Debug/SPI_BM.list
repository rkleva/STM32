
SPI_BM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002928  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002ab0  08002ab0  00003ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ac0  08002ac0  00004018  2**0
                  CONTENTS
  4 .ARM          00000008  08002ac0  08002ac0  00003ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002ac8  08002ac8  00004018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ac8  08002ac8  00003ac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002acc  08002acc  00003acc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08002ad0  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00004018  2**0
                  CONTENTS
 10 .bss          00000228  20000018  20000018  00004018  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000240  20000240  00004018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00004018  2**0
                  CONTENTS, READONLY
 13 .debug_info   00005df0  00000000  00000000  00004048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000012d6  00000000  00000000  00009e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000668  00000000  00000000  0000b110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000004c5  00000000  00000000  0000b778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f2ff  00000000  00000000  0000bc3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00006d5c  00000000  00000000  0002af3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000be68d  00000000  00000000  00031c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f0325  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000193c  00000000  00000000  000f0368  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005e  00000000  00000000  000f1ca4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002a98 	.word	0x08002a98

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	08002a98 	.word	0x08002a98

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <word_to_binary_array>:
#define PEC10_READ    2
void word_to_binary_array10_data_PEC(uint16_t word, uint16_t binary_array[16]);
void byte_array_to_bit_array10_data_PEC(uint8_t *data, int data_len, uint8_t *bit_array, uint8_t *expanded_array);


void word_to_binary_array(uint16_t word, uint16_t binary_array[16]) {
 80004b8:	b480      	push	{r7}
 80004ba:	b085      	sub	sp, #20
 80004bc:	af00      	add	r7, sp, #0
 80004be:	4603      	mov	r3, r0
 80004c0:	6039      	str	r1, [r7, #0]
 80004c2:	80fb      	strh	r3, [r7, #6]
    // Loop through each bit in the 16-bit word, starting from LSB
    for (int i = 0; i < 16; i++) {
 80004c4:	2300      	movs	r3, #0
 80004c6:	60fb      	str	r3, [r7, #12]
 80004c8:	e00f      	b.n	80004ea <word_to_binary_array+0x32>
        // Extract the i-th bit and store it in the array
        binary_array[i] = (word >> i) & 1;
 80004ca:	88fa      	ldrh	r2, [r7, #6]
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	fa42 f303 	asr.w	r3, r2, r3
 80004d2:	b29a      	uxth	r2, r3
 80004d4:	68fb      	ldr	r3, [r7, #12]
 80004d6:	005b      	lsls	r3, r3, #1
 80004d8:	6839      	ldr	r1, [r7, #0]
 80004da:	440b      	add	r3, r1
 80004dc:	f002 0201 	and.w	r2, r2, #1
 80004e0:	b292      	uxth	r2, r2
 80004e2:	801a      	strh	r2, [r3, #0]
    for (int i = 0; i < 16; i++) {
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	3301      	adds	r3, #1
 80004e8:	60fb      	str	r3, [r7, #12]
 80004ea:	68fb      	ldr	r3, [r7, #12]
 80004ec:	2b0f      	cmp	r3, #15
 80004ee:	ddec      	ble.n	80004ca <word_to_binary_array+0x12>
    }
}
 80004f0:	bf00      	nop
 80004f2:	bf00      	nop
 80004f4:	3714      	adds	r7, #20
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr

080004fe <binary_array_to_word>:


uint16_t binary_array_to_word(uint16_t binary_array[16]) {
 80004fe:	b480      	push	{r7}
 8000500:	b085      	sub	sp, #20
 8000502:	af00      	add	r7, sp, #0
 8000504:	6078      	str	r0, [r7, #4]
    uint16_t word = 0;
 8000506:	2300      	movs	r3, #0
 8000508:	81fb      	strh	r3, [r7, #14]

    // Iterate through each bit in the binary array
    for (int i = 0; i < 16; i++) {
 800050a:	2300      	movs	r3, #0
 800050c:	60bb      	str	r3, [r7, #8]
 800050e:	e011      	b.n	8000534 <binary_array_to_word+0x36>
        // Shift the current word to the left and add the current bit
        word |= (binary_array[i] << i);
 8000510:	68bb      	ldr	r3, [r7, #8]
 8000512:	005b      	lsls	r3, r3, #1
 8000514:	687a      	ldr	r2, [r7, #4]
 8000516:	4413      	add	r3, r2
 8000518:	881b      	ldrh	r3, [r3, #0]
 800051a:	461a      	mov	r2, r3
 800051c:	68bb      	ldr	r3, [r7, #8]
 800051e:	fa02 f303 	lsl.w	r3, r2, r3
 8000522:	b21a      	sxth	r2, r3
 8000524:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000528:	4313      	orrs	r3, r2
 800052a:	b21b      	sxth	r3, r3
 800052c:	81fb      	strh	r3, [r7, #14]
    for (int i = 0; i < 16; i++) {
 800052e:	68bb      	ldr	r3, [r7, #8]
 8000530:	3301      	adds	r3, #1
 8000532:	60bb      	str	r3, [r7, #8]
 8000534:	68bb      	ldr	r3, [r7, #8]
 8000536:	2b0f      	cmp	r3, #15
 8000538:	ddea      	ble.n	8000510 <binary_array_to_word+0x12>
    }

    return word;
 800053a:	89fb      	ldrh	r3, [r7, #14]
}
 800053c:	4618      	mov	r0, r3
 800053e:	3714      	adds	r7, #20
 8000540:	46bd      	mov	sp, r7
 8000542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000546:	4770      	bx	lr

08000548 <cmdPec>:

    return word;  // Return the 10-bit word (stored in a 16-bit variable)
}


uint16_t cmdPec(uint16_t command) {
 8000548:	b580      	push	{r7, lr}
 800054a:	b084      	sub	sp, #16
 800054c:	af00      	add	r7, sp, #0
 800054e:	4603      	mov	r3, r0
 8000550:	80fb      	strh	r3, [r7, #6]

    word_to_binary_array(init_PEC, converted_PEC_15);
 8000552:	4b49      	ldr	r3, [pc, #292]	@ (8000678 <cmdPec+0x130>)
 8000554:	881b      	ldrh	r3, [r3, #0]
 8000556:	4949      	ldr	r1, [pc, #292]	@ (800067c <cmdPec+0x134>)
 8000558:	4618      	mov	r0, r3
 800055a:	f7ff ffad 	bl	80004b8 <word_to_binary_array>
    word_to_binary_array(command, converted_Cmd);
 800055e:	88fb      	ldrh	r3, [r7, #6]
 8000560:	4947      	ldr	r1, [pc, #284]	@ (8000680 <cmdPec+0x138>)
 8000562:	4618      	mov	r0, r3
 8000564:	f7ff ffa8 	bl	80004b8 <word_to_binary_array>

	 for(int i = 15;i > -1;i--) {
 8000568:	230f      	movs	r3, #15
 800056a:	60fb      	str	r3, [r7, #12]
 800056c:	e078      	b.n	8000660 <cmdPec+0x118>

	    in[0] = converted_Cmd[i] ^ converted_PEC_15[14];
 800056e:	4a44      	ldr	r2, [pc, #272]	@ (8000680 <cmdPec+0x138>)
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000576:	4b41      	ldr	r3, [pc, #260]	@ (800067c <cmdPec+0x134>)
 8000578:	8b9b      	ldrh	r3, [r3, #28]
 800057a:	4053      	eors	r3, r2
 800057c:	b29a      	uxth	r2, r3
 800057e:	4b41      	ldr	r3, [pc, #260]	@ (8000684 <cmdPec+0x13c>)
 8000580:	801a      	strh	r2, [r3, #0]
	    in[3] = in[0] ^ converted_PEC_15[2];
 8000582:	4b40      	ldr	r3, [pc, #256]	@ (8000684 <cmdPec+0x13c>)
 8000584:	881a      	ldrh	r2, [r3, #0]
 8000586:	4b3d      	ldr	r3, [pc, #244]	@ (800067c <cmdPec+0x134>)
 8000588:	889b      	ldrh	r3, [r3, #4]
 800058a:	4053      	eors	r3, r2
 800058c:	b29a      	uxth	r2, r3
 800058e:	4b3d      	ldr	r3, [pc, #244]	@ (8000684 <cmdPec+0x13c>)
 8000590:	80da      	strh	r2, [r3, #6]
	    in[4] = in[0] ^ converted_PEC_15[3];
 8000592:	4b3c      	ldr	r3, [pc, #240]	@ (8000684 <cmdPec+0x13c>)
 8000594:	881a      	ldrh	r2, [r3, #0]
 8000596:	4b39      	ldr	r3, [pc, #228]	@ (800067c <cmdPec+0x134>)
 8000598:	88db      	ldrh	r3, [r3, #6]
 800059a:	4053      	eors	r3, r2
 800059c:	b29a      	uxth	r2, r3
 800059e:	4b39      	ldr	r3, [pc, #228]	@ (8000684 <cmdPec+0x13c>)
 80005a0:	811a      	strh	r2, [r3, #8]
	    in[7] = in[0] ^ converted_PEC_15[6];
 80005a2:	4b38      	ldr	r3, [pc, #224]	@ (8000684 <cmdPec+0x13c>)
 80005a4:	881a      	ldrh	r2, [r3, #0]
 80005a6:	4b35      	ldr	r3, [pc, #212]	@ (800067c <cmdPec+0x134>)
 80005a8:	899b      	ldrh	r3, [r3, #12]
 80005aa:	4053      	eors	r3, r2
 80005ac:	b29a      	uxth	r2, r3
 80005ae:	4b35      	ldr	r3, [pc, #212]	@ (8000684 <cmdPec+0x13c>)
 80005b0:	81da      	strh	r2, [r3, #14]
	    in[8] = in[0] ^ converted_PEC_15[7];
 80005b2:	4b34      	ldr	r3, [pc, #208]	@ (8000684 <cmdPec+0x13c>)
 80005b4:	881a      	ldrh	r2, [r3, #0]
 80005b6:	4b31      	ldr	r3, [pc, #196]	@ (800067c <cmdPec+0x134>)
 80005b8:	89db      	ldrh	r3, [r3, #14]
 80005ba:	4053      	eors	r3, r2
 80005bc:	b29a      	uxth	r2, r3
 80005be:	4b31      	ldr	r3, [pc, #196]	@ (8000684 <cmdPec+0x13c>)
 80005c0:	821a      	strh	r2, [r3, #16]
	    in[10] = in[0] ^ converted_PEC_15[9];
 80005c2:	4b30      	ldr	r3, [pc, #192]	@ (8000684 <cmdPec+0x13c>)
 80005c4:	881a      	ldrh	r2, [r3, #0]
 80005c6:	4b2d      	ldr	r3, [pc, #180]	@ (800067c <cmdPec+0x134>)
 80005c8:	8a5b      	ldrh	r3, [r3, #18]
 80005ca:	4053      	eors	r3, r2
 80005cc:	b29a      	uxth	r2, r3
 80005ce:	4b2d      	ldr	r3, [pc, #180]	@ (8000684 <cmdPec+0x13c>)
 80005d0:	829a      	strh	r2, [r3, #20]
	    in[14] = in[0] ^ converted_PEC_15[13];
 80005d2:	4b2c      	ldr	r3, [pc, #176]	@ (8000684 <cmdPec+0x13c>)
 80005d4:	881a      	ldrh	r2, [r3, #0]
 80005d6:	4b29      	ldr	r3, [pc, #164]	@ (800067c <cmdPec+0x134>)
 80005d8:	8b5b      	ldrh	r3, [r3, #26]
 80005da:	4053      	eors	r3, r2
 80005dc:	b29a      	uxth	r2, r3
 80005de:	4b29      	ldr	r3, [pc, #164]	@ (8000684 <cmdPec+0x13c>)
 80005e0:	839a      	strh	r2, [r3, #28]

	    converted_PEC_15[14] = in[14];
 80005e2:	4b28      	ldr	r3, [pc, #160]	@ (8000684 <cmdPec+0x13c>)
 80005e4:	8b9a      	ldrh	r2, [r3, #28]
 80005e6:	4b25      	ldr	r3, [pc, #148]	@ (800067c <cmdPec+0x134>)
 80005e8:	839a      	strh	r2, [r3, #28]
	    converted_PEC_15[13] = converted_PEC_15[12];
 80005ea:	4b24      	ldr	r3, [pc, #144]	@ (800067c <cmdPec+0x134>)
 80005ec:	8b1a      	ldrh	r2, [r3, #24]
 80005ee:	4b23      	ldr	r3, [pc, #140]	@ (800067c <cmdPec+0x134>)
 80005f0:	835a      	strh	r2, [r3, #26]
	    converted_PEC_15[12] = converted_PEC_15[11];
 80005f2:	4b22      	ldr	r3, [pc, #136]	@ (800067c <cmdPec+0x134>)
 80005f4:	8ada      	ldrh	r2, [r3, #22]
 80005f6:	4b21      	ldr	r3, [pc, #132]	@ (800067c <cmdPec+0x134>)
 80005f8:	831a      	strh	r2, [r3, #24]
	    converted_PEC_15[11] = converted_PEC_15[10];
 80005fa:	4b20      	ldr	r3, [pc, #128]	@ (800067c <cmdPec+0x134>)
 80005fc:	8a9a      	ldrh	r2, [r3, #20]
 80005fe:	4b1f      	ldr	r3, [pc, #124]	@ (800067c <cmdPec+0x134>)
 8000600:	82da      	strh	r2, [r3, #22]
	    converted_PEC_15[10] = in[10];
 8000602:	4b20      	ldr	r3, [pc, #128]	@ (8000684 <cmdPec+0x13c>)
 8000604:	8a9a      	ldrh	r2, [r3, #20]
 8000606:	4b1d      	ldr	r3, [pc, #116]	@ (800067c <cmdPec+0x134>)
 8000608:	829a      	strh	r2, [r3, #20]
	    converted_PEC_15[9] = converted_PEC_15[8];
 800060a:	4b1c      	ldr	r3, [pc, #112]	@ (800067c <cmdPec+0x134>)
 800060c:	8a1a      	ldrh	r2, [r3, #16]
 800060e:	4b1b      	ldr	r3, [pc, #108]	@ (800067c <cmdPec+0x134>)
 8000610:	825a      	strh	r2, [r3, #18]
	    converted_PEC_15[8] = in[8];
 8000612:	4b1c      	ldr	r3, [pc, #112]	@ (8000684 <cmdPec+0x13c>)
 8000614:	8a1a      	ldrh	r2, [r3, #16]
 8000616:	4b19      	ldr	r3, [pc, #100]	@ (800067c <cmdPec+0x134>)
 8000618:	821a      	strh	r2, [r3, #16]
	    converted_PEC_15[7] = in[7];
 800061a:	4b1a      	ldr	r3, [pc, #104]	@ (8000684 <cmdPec+0x13c>)
 800061c:	89da      	ldrh	r2, [r3, #14]
 800061e:	4b17      	ldr	r3, [pc, #92]	@ (800067c <cmdPec+0x134>)
 8000620:	81da      	strh	r2, [r3, #14]
	    converted_PEC_15[6] = converted_PEC_15[5];
 8000622:	4b16      	ldr	r3, [pc, #88]	@ (800067c <cmdPec+0x134>)
 8000624:	895a      	ldrh	r2, [r3, #10]
 8000626:	4b15      	ldr	r3, [pc, #84]	@ (800067c <cmdPec+0x134>)
 8000628:	819a      	strh	r2, [r3, #12]
	    converted_PEC_15[5] = converted_PEC_15[4];
 800062a:	4b14      	ldr	r3, [pc, #80]	@ (800067c <cmdPec+0x134>)
 800062c:	891a      	ldrh	r2, [r3, #8]
 800062e:	4b13      	ldr	r3, [pc, #76]	@ (800067c <cmdPec+0x134>)
 8000630:	815a      	strh	r2, [r3, #10]
	    converted_PEC_15[4] = in[4];
 8000632:	4b14      	ldr	r3, [pc, #80]	@ (8000684 <cmdPec+0x13c>)
 8000634:	891a      	ldrh	r2, [r3, #8]
 8000636:	4b11      	ldr	r3, [pc, #68]	@ (800067c <cmdPec+0x134>)
 8000638:	811a      	strh	r2, [r3, #8]
	    converted_PEC_15[3] = in[3];
 800063a:	4b12      	ldr	r3, [pc, #72]	@ (8000684 <cmdPec+0x13c>)
 800063c:	88da      	ldrh	r2, [r3, #6]
 800063e:	4b0f      	ldr	r3, [pc, #60]	@ (800067c <cmdPec+0x134>)
 8000640:	80da      	strh	r2, [r3, #6]
	    converted_PEC_15[2] = converted_PEC_15[1];
 8000642:	4b0e      	ldr	r3, [pc, #56]	@ (800067c <cmdPec+0x134>)
 8000644:	885a      	ldrh	r2, [r3, #2]
 8000646:	4b0d      	ldr	r3, [pc, #52]	@ (800067c <cmdPec+0x134>)
 8000648:	809a      	strh	r2, [r3, #4]
	    converted_PEC_15[1] = converted_PEC_15[0];
 800064a:	4b0c      	ldr	r3, [pc, #48]	@ (800067c <cmdPec+0x134>)
 800064c:	881a      	ldrh	r2, [r3, #0]
 800064e:	4b0b      	ldr	r3, [pc, #44]	@ (800067c <cmdPec+0x134>)
 8000650:	805a      	strh	r2, [r3, #2]
	    converted_PEC_15[0] = in[0];
 8000652:	4b0c      	ldr	r3, [pc, #48]	@ (8000684 <cmdPec+0x13c>)
 8000654:	881a      	ldrh	r2, [r3, #0]
 8000656:	4b09      	ldr	r3, [pc, #36]	@ (800067c <cmdPec+0x134>)
 8000658:	801a      	strh	r2, [r3, #0]
	 for(int i = 15;i > -1;i--) {
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	3b01      	subs	r3, #1
 800065e:	60fb      	str	r3, [r7, #12]
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	2b00      	cmp	r3, #0
 8000664:	da83      	bge.n	800056e <cmdPec+0x26>

	    }

	 return binary_array_to_word(converted_PEC_15);
 8000666:	4805      	ldr	r0, [pc, #20]	@ (800067c <cmdPec+0x134>)
 8000668:	f7ff ff49 	bl	80004fe <binary_array_to_word>
 800066c:	4603      	mov	r3, r0

}
 800066e:	4618      	mov	r0, r3
 8000670:	3710      	adds	r7, #16
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	20000000 	.word	0x20000000
 800067c:	2000008c 	.word	0x2000008c
 8000680:	200000ec 	.word	0x200000ec
 8000684:	200000cc 	.word	0x200000cc

08000688 <dataPec>:


uint16_t dataPec(uint8_t bytes, uint8_t *data) {
 8000688:	b580      	push	{r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	6039      	str	r1, [r7, #0]
 8000692:	71fb      	strb	r3, [r7, #7]




    byte_array_to_bit_array10_data_PEC(data, 6, binary_array,expanded_array);
 8000694:	4b37      	ldr	r3, [pc, #220]	@ (8000774 <dataPec+0xec>)
 8000696:	4a38      	ldr	r2, [pc, #224]	@ (8000778 <dataPec+0xf0>)
 8000698:	2106      	movs	r1, #6
 800069a:	6838      	ldr	r0, [r7, #0]
 800069c:	f000 f9ae 	bl	80009fc <byte_array_to_bit_array10_data_PEC>
    word_to_binary_array10_data_PEC(init_PEC,converted_PEC_10);
 80006a0:	4b36      	ldr	r3, [pc, #216]	@ (800077c <dataPec+0xf4>)
 80006a2:	881b      	ldrh	r3, [r3, #0]
 80006a4:	4936      	ldr	r1, [pc, #216]	@ (8000780 <dataPec+0xf8>)
 80006a6:	4618      	mov	r0, r3
 80006a8:	f000 f9fc 	bl	8000aa4 <word_to_binary_array10_data_PEC>


    for (int i = 53; i > -1; i--) {
 80006ac:	2335      	movs	r3, #53	@ 0x35
 80006ae:	60fb      	str	r3, [r7, #12]
 80006b0:	e055      	b.n	800075e <dataPec+0xd6>

        in[0] = expanded_array[i] ^ converted_PEC_10[9];
 80006b2:	4a30      	ldr	r2, [pc, #192]	@ (8000774 <dataPec+0xec>)
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	4413      	add	r3, r2
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	461a      	mov	r2, r3
 80006bc:	4b30      	ldr	r3, [pc, #192]	@ (8000780 <dataPec+0xf8>)
 80006be:	8a5b      	ldrh	r3, [r3, #18]
 80006c0:	4053      	eors	r3, r2
 80006c2:	b29a      	uxth	r2, r3
 80006c4:	4b2f      	ldr	r3, [pc, #188]	@ (8000784 <dataPec+0xfc>)
 80006c6:	801a      	strh	r2, [r3, #0]
        in[1] = in[0] ^ converted_PEC_10[0];
 80006c8:	4b2e      	ldr	r3, [pc, #184]	@ (8000784 <dataPec+0xfc>)
 80006ca:	881a      	ldrh	r2, [r3, #0]
 80006cc:	4b2c      	ldr	r3, [pc, #176]	@ (8000780 <dataPec+0xf8>)
 80006ce:	881b      	ldrh	r3, [r3, #0]
 80006d0:	4053      	eors	r3, r2
 80006d2:	b29a      	uxth	r2, r3
 80006d4:	4b2b      	ldr	r3, [pc, #172]	@ (8000784 <dataPec+0xfc>)
 80006d6:	805a      	strh	r2, [r3, #2]
        in[2] = in[0] ^ converted_PEC_10[1];
 80006d8:	4b2a      	ldr	r3, [pc, #168]	@ (8000784 <dataPec+0xfc>)
 80006da:	881a      	ldrh	r2, [r3, #0]
 80006dc:	4b28      	ldr	r3, [pc, #160]	@ (8000780 <dataPec+0xf8>)
 80006de:	885b      	ldrh	r3, [r3, #2]
 80006e0:	4053      	eors	r3, r2
 80006e2:	b29a      	uxth	r2, r3
 80006e4:	4b27      	ldr	r3, [pc, #156]	@ (8000784 <dataPec+0xfc>)
 80006e6:	809a      	strh	r2, [r3, #4]
        in[3] = in[0] ^ converted_PEC_10[2];
 80006e8:	4b26      	ldr	r3, [pc, #152]	@ (8000784 <dataPec+0xfc>)
 80006ea:	881a      	ldrh	r2, [r3, #0]
 80006ec:	4b24      	ldr	r3, [pc, #144]	@ (8000780 <dataPec+0xf8>)
 80006ee:	889b      	ldrh	r3, [r3, #4]
 80006f0:	4053      	eors	r3, r2
 80006f2:	b29a      	uxth	r2, r3
 80006f4:	4b23      	ldr	r3, [pc, #140]	@ (8000784 <dataPec+0xfc>)
 80006f6:	80da      	strh	r2, [r3, #6]
        in[7] = in[0] ^ converted_PEC_10[6];
 80006f8:	4b22      	ldr	r3, [pc, #136]	@ (8000784 <dataPec+0xfc>)
 80006fa:	881a      	ldrh	r2, [r3, #0]
 80006fc:	4b20      	ldr	r3, [pc, #128]	@ (8000780 <dataPec+0xf8>)
 80006fe:	899b      	ldrh	r3, [r3, #12]
 8000700:	4053      	eors	r3, r2
 8000702:	b29a      	uxth	r2, r3
 8000704:	4b1f      	ldr	r3, [pc, #124]	@ (8000784 <dataPec+0xfc>)
 8000706:	81da      	strh	r2, [r3, #14]

        converted_PEC_10[9] = converted_PEC_10[8];
 8000708:	4b1d      	ldr	r3, [pc, #116]	@ (8000780 <dataPec+0xf8>)
 800070a:	8a1a      	ldrh	r2, [r3, #16]
 800070c:	4b1c      	ldr	r3, [pc, #112]	@ (8000780 <dataPec+0xf8>)
 800070e:	825a      	strh	r2, [r3, #18]
        converted_PEC_10[8] = converted_PEC_10[7];
 8000710:	4b1b      	ldr	r3, [pc, #108]	@ (8000780 <dataPec+0xf8>)
 8000712:	89da      	ldrh	r2, [r3, #14]
 8000714:	4b1a      	ldr	r3, [pc, #104]	@ (8000780 <dataPec+0xf8>)
 8000716:	821a      	strh	r2, [r3, #16]
        converted_PEC_10[7] = in[7];
 8000718:	4b1a      	ldr	r3, [pc, #104]	@ (8000784 <dataPec+0xfc>)
 800071a:	89da      	ldrh	r2, [r3, #14]
 800071c:	4b18      	ldr	r3, [pc, #96]	@ (8000780 <dataPec+0xf8>)
 800071e:	81da      	strh	r2, [r3, #14]
        converted_PEC_10[6] = converted_PEC_10[5];
 8000720:	4b17      	ldr	r3, [pc, #92]	@ (8000780 <dataPec+0xf8>)
 8000722:	895a      	ldrh	r2, [r3, #10]
 8000724:	4b16      	ldr	r3, [pc, #88]	@ (8000780 <dataPec+0xf8>)
 8000726:	819a      	strh	r2, [r3, #12]
        converted_PEC_10[5] = converted_PEC_10[4];
 8000728:	4b15      	ldr	r3, [pc, #84]	@ (8000780 <dataPec+0xf8>)
 800072a:	891a      	ldrh	r2, [r3, #8]
 800072c:	4b14      	ldr	r3, [pc, #80]	@ (8000780 <dataPec+0xf8>)
 800072e:	815a      	strh	r2, [r3, #10]
        converted_PEC_10[4] = converted_PEC_10[3];
 8000730:	4b13      	ldr	r3, [pc, #76]	@ (8000780 <dataPec+0xf8>)
 8000732:	88da      	ldrh	r2, [r3, #6]
 8000734:	4b12      	ldr	r3, [pc, #72]	@ (8000780 <dataPec+0xf8>)
 8000736:	811a      	strh	r2, [r3, #8]
        converted_PEC_10[3] = in[3];
 8000738:	4b12      	ldr	r3, [pc, #72]	@ (8000784 <dataPec+0xfc>)
 800073a:	88da      	ldrh	r2, [r3, #6]
 800073c:	4b10      	ldr	r3, [pc, #64]	@ (8000780 <dataPec+0xf8>)
 800073e:	80da      	strh	r2, [r3, #6]
        converted_PEC_10[2] = in[2];
 8000740:	4b10      	ldr	r3, [pc, #64]	@ (8000784 <dataPec+0xfc>)
 8000742:	889a      	ldrh	r2, [r3, #4]
 8000744:	4b0e      	ldr	r3, [pc, #56]	@ (8000780 <dataPec+0xf8>)
 8000746:	809a      	strh	r2, [r3, #4]
        converted_PEC_10[1] = in[1];
 8000748:	4b0e      	ldr	r3, [pc, #56]	@ (8000784 <dataPec+0xfc>)
 800074a:	885a      	ldrh	r2, [r3, #2]
 800074c:	4b0c      	ldr	r3, [pc, #48]	@ (8000780 <dataPec+0xf8>)
 800074e:	805a      	strh	r2, [r3, #2]
        converted_PEC_10[0] = in[0];
 8000750:	4b0c      	ldr	r3, [pc, #48]	@ (8000784 <dataPec+0xfc>)
 8000752:	881a      	ldrh	r2, [r3, #0]
 8000754:	4b0a      	ldr	r3, [pc, #40]	@ (8000780 <dataPec+0xf8>)
 8000756:	801a      	strh	r2, [r3, #0]
    for (int i = 53; i > -1; i--) {
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	3b01      	subs	r3, #1
 800075c:	60fb      	str	r3, [r7, #12]
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	2b00      	cmp	r3, #0
 8000762:	daa6      	bge.n	80006b2 <dataPec+0x2a>


    }


    return binary_array_to_word(converted_PEC_10);
 8000764:	4806      	ldr	r0, [pc, #24]	@ (8000780 <dataPec+0xf8>)
 8000766:	f7ff feca 	bl	80004fe <binary_array_to_word>
 800076a:	4603      	mov	r3, r0

}
 800076c:	4618      	mov	r0, r3
 800076e:	3710      	adds	r7, #16
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	20000204 	.word	0x20000204
 8000778:	200001d4 	.word	0x200001d4
 800077c:	20000000 	.word	0x20000000
 8000780:	200000ac 	.word	0x200000ac
 8000784:	200000cc 	.word	0x200000cc

08000788 <construct_spi_write_frame>:
/*
 * instruction - 0 => COMMAND SPI FRAME
 * instruction - 1 => WRITE DATA SPI FRAME
 * instruction - 2 => READ DATA SPI FRAME
 * */
void construct_spi_write_frame(uint16_t command, uint8_t *spi_frame, uint16_t instruction, uint8_t *data, uint8_t data_size) {
 8000788:	b580      	push	{r7, lr}
 800078a:	b088      	sub	sp, #32
 800078c:	af00      	add	r7, sp, #0
 800078e:	60b9      	str	r1, [r7, #8]
 8000790:	607b      	str	r3, [r7, #4]
 8000792:	4603      	mov	r3, r0
 8000794:	81fb      	strh	r3, [r7, #14]
 8000796:	4613      	mov	r3, r2
 8000798:	81bb      	strh	r3, [r7, #12]
    // Construct the 32-bit frame
    uint32_t frame = 0;
 800079a:	2300      	movs	r3, #0
 800079c:	617b      	str	r3, [r7, #20]
    uint16_t pec = cmdPec(command);  // Calculate the 15-bit PEC
 800079e:	89fb      	ldrh	r3, [r7, #14]
 80007a0:	4618      	mov	r0, r3
 80007a2:	f7ff fed1 	bl	8000548 <cmdPec>
 80007a6:	4603      	mov	r3, r0
 80007a8:	827b      	strh	r3, [r7, #18]
    uint8_t frame_counter = 0;  // Start counting from 0 for the frame
 80007aa:	2300      	movs	r3, #0
 80007ac:	77fb      	strb	r3, [r7, #31]
    // 5 bits of 00000 (shifted left 27 bits)
    // 11 bits of command (shifted left 16 bits)
    // 15 bits of PEC (shifted left 1 bit)
    // 1 bit of 0
    frame |= (0x00 << 27);               // 5-bit prefix 00000
    frame |= ((command & 0x7FF) << 16);  // 11-bit command
 80007ae:	89fb      	ldrh	r3, [r7, #14]
 80007b0:	041a      	lsls	r2, r3, #16
 80007b2:	4b40      	ldr	r3, [pc, #256]	@ (80008b4 <construct_spi_write_frame+0x12c>)
 80007b4:	4013      	ands	r3, r2
 80007b6:	697a      	ldr	r2, [r7, #20]
 80007b8:	4313      	orrs	r3, r2
 80007ba:	617b      	str	r3, [r7, #20]
    frame |= ((pec & 0x7FFF) << 1);      // 15-bit PEC
 80007bc:	8a7b      	ldrh	r3, [r7, #18]
 80007be:	005b      	lsls	r3, r3, #1
 80007c0:	b29b      	uxth	r3, r3
 80007c2:	697a      	ldr	r2, [r7, #20]
 80007c4:	4313      	orrs	r3, r2
 80007c6:	617b      	str	r3, [r7, #20]
    frame |= 0x00;                       // 1-bit suffix 0

    // Break the 32-bit frame into 4 bytes to send via SPI
    spi_frame[frame_counter++] = (frame >> 24) & 0xFF;
 80007c8:	697b      	ldr	r3, [r7, #20]
 80007ca:	0e1a      	lsrs	r2, r3, #24
 80007cc:	7ffb      	ldrb	r3, [r7, #31]
 80007ce:	1c59      	adds	r1, r3, #1
 80007d0:	77f9      	strb	r1, [r7, #31]
 80007d2:	4619      	mov	r1, r3
 80007d4:	68bb      	ldr	r3, [r7, #8]
 80007d6:	440b      	add	r3, r1
 80007d8:	b2d2      	uxtb	r2, r2
 80007da:	701a      	strb	r2, [r3, #0]
    spi_frame[frame_counter++] = (frame >> 16) & 0xFF;
 80007dc:	697b      	ldr	r3, [r7, #20]
 80007de:	0c1a      	lsrs	r2, r3, #16
 80007e0:	7ffb      	ldrb	r3, [r7, #31]
 80007e2:	1c59      	adds	r1, r3, #1
 80007e4:	77f9      	strb	r1, [r7, #31]
 80007e6:	4619      	mov	r1, r3
 80007e8:	68bb      	ldr	r3, [r7, #8]
 80007ea:	440b      	add	r3, r1
 80007ec:	b2d2      	uxtb	r2, r2
 80007ee:	701a      	strb	r2, [r3, #0]
    spi_frame[frame_counter++] = (frame >> 8) & 0xFF;
 80007f0:	697b      	ldr	r3, [r7, #20]
 80007f2:	0a1a      	lsrs	r2, r3, #8
 80007f4:	7ffb      	ldrb	r3, [r7, #31]
 80007f6:	1c59      	adds	r1, r3, #1
 80007f8:	77f9      	strb	r1, [r7, #31]
 80007fa:	4619      	mov	r1, r3
 80007fc:	68bb      	ldr	r3, [r7, #8]
 80007fe:	440b      	add	r3, r1
 8000800:	b2d2      	uxtb	r2, r2
 8000802:	701a      	strb	r2, [r3, #0]
    spi_frame[frame_counter++] = (frame) & 0xFF;
 8000804:	7ffb      	ldrb	r3, [r7, #31]
 8000806:	1c5a      	adds	r2, r3, #1
 8000808:	77fa      	strb	r2, [r7, #31]
 800080a:	461a      	mov	r2, r3
 800080c:	68bb      	ldr	r3, [r7, #8]
 800080e:	4413      	add	r3, r2
 8000810:	697a      	ldr	r2, [r7, #20]
 8000812:	b2d2      	uxtb	r2, r2
 8000814:	701a      	strb	r2, [r3, #0]

    // If it's just a command, return here
    if (instruction == 0) {
 8000816:	89bb      	ldrh	r3, [r7, #12]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d046      	beq.n	80008aa <construct_spi_write_frame+0x122>
        return;
    }

    // Otherwise, add the data for a write instruction
    if (instruction == 1 && data != NULL && data_size > 0) {
 800081c:	89bb      	ldrh	r3, [r7, #12]
 800081e:	2b01      	cmp	r3, #1
 8000820:	d139      	bne.n	8000896 <construct_spi_write_frame+0x10e>
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	2b00      	cmp	r3, #0
 8000826:	d036      	beq.n	8000896 <construct_spi_write_frame+0x10e>
 8000828:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800082c:	2b00      	cmp	r3, #0
 800082e:	d032      	beq.n	8000896 <construct_spi_write_frame+0x10e>
        // Add the data bytes
        for (int i = 0; i < data_size; i++) {
 8000830:	2300      	movs	r3, #0
 8000832:	61bb      	str	r3, [r7, #24]
 8000834:	e00d      	b.n	8000852 <construct_spi_write_frame+0xca>
            spi_frame[frame_counter++] = data[i];
 8000836:	69bb      	ldr	r3, [r7, #24]
 8000838:	687a      	ldr	r2, [r7, #4]
 800083a:	441a      	add	r2, r3
 800083c:	7ffb      	ldrb	r3, [r7, #31]
 800083e:	1c59      	adds	r1, r3, #1
 8000840:	77f9      	strb	r1, [r7, #31]
 8000842:	4619      	mov	r1, r3
 8000844:	68bb      	ldr	r3, [r7, #8]
 8000846:	440b      	add	r3, r1
 8000848:	7812      	ldrb	r2, [r2, #0]
 800084a:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < data_size; i++) {
 800084c:	69bb      	ldr	r3, [r7, #24]
 800084e:	3301      	adds	r3, #1
 8000850:	61bb      	str	r3, [r7, #24]
 8000852:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000856:	69ba      	ldr	r2, [r7, #24]
 8000858:	429a      	cmp	r2, r3
 800085a:	dbec      	blt.n	8000836 <construct_spi_write_frame+0xae>
        }

        // Calculate data PEC (implement your PEC calculation for data)
        //uint8_t data_PEC = pec10_calc(data,1);  // Replace with actual data PEC calculation
        uint16_t dPEC = dataPec(data_size, data);
 800085c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000860:	6879      	ldr	r1, [r7, #4]
 8000862:	4618      	mov	r0, r3
 8000864:	f7ff ff10 	bl	8000688 <dataPec>
 8000868:	4603      	mov	r3, r0
 800086a:	823b      	strh	r3, [r7, #16]
        // Add the data PEC to the frame (10-bit PEC in 2 bytes)
        spi_frame[frame_counter++] = (dPEC >> 8) & 0xFF;  // High byte of PEC
 800086c:	8a3b      	ldrh	r3, [r7, #16]
 800086e:	0a1b      	lsrs	r3, r3, #8
 8000870:	b29a      	uxth	r2, r3
 8000872:	7ffb      	ldrb	r3, [r7, #31]
 8000874:	1c59      	adds	r1, r3, #1
 8000876:	77f9      	strb	r1, [r7, #31]
 8000878:	4619      	mov	r1, r3
 800087a:	68bb      	ldr	r3, [r7, #8]
 800087c:	440b      	add	r3, r1
 800087e:	b2d2      	uxtb	r2, r2
 8000880:	701a      	strb	r2, [r3, #0]
        spi_frame[frame_counter++] = dPEC & 0xFF;         // Low byte of PEC
 8000882:	7ffb      	ldrb	r3, [r7, #31]
 8000884:	1c5a      	adds	r2, r3, #1
 8000886:	77fa      	strb	r2, [r7, #31]
 8000888:	461a      	mov	r2, r3
 800088a:	68bb      	ldr	r3, [r7, #8]
 800088c:	4413      	add	r3, r2
 800088e:	8a3a      	ldrh	r2, [r7, #16]
 8000890:	b2d2      	uxtb	r2, r2
 8000892:	701a      	strb	r2, [r3, #0]
    if (instruction == 1 && data != NULL && data_size > 0) {
 8000894:	e00a      	b.n	80008ac <construct_spi_write_frame+0x124>
    }

    else if (instruction == 2 && data == NULL && data_size == 0) {
 8000896:	89bb      	ldrh	r3, [r7, #12]
 8000898:	2b02      	cmp	r3, #2
 800089a:	d107      	bne.n	80008ac <construct_spi_write_frame+0x124>
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d104      	bne.n	80008ac <construct_spi_write_frame+0x124>
 80008a2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	e000      	b.n	80008ac <construct_spi_write_frame+0x124>
        return;
 80008aa:	bf00      	nop
    	return;



    }
}
 80008ac:	3720      	adds	r7, #32
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	07ff0000 	.word	0x07ff0000

080008b8 <BMS_read_SPI>:

	void BMS_read_SPI(uint16_t command, uint8_t *spi_frame, uint8_t *read_frame) {
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b086      	sub	sp, #24
 80008bc:	af02      	add	r7, sp, #8
 80008be:	4603      	mov	r3, r0
 80008c0:	60b9      	str	r1, [r7, #8]
 80008c2:	607a      	str	r2, [r7, #4]
 80008c4:	81fb      	strh	r3, [r7, #14]
		construct_spi_write_frame(command, spi_frame, 2, NULL, 0);
 80008c6:	89f8      	ldrh	r0, [r7, #14]
 80008c8:	2300      	movs	r3, #0
 80008ca:	9300      	str	r3, [sp, #0]
 80008cc:	2300      	movs	r3, #0
 80008ce:	2202      	movs	r2, #2
 80008d0:	68b9      	ldr	r1, [r7, #8]
 80008d2:	f7ff ff59 	bl	8000788 <construct_spi_write_frame>
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3, GPIO_PIN_RESET);
 80008d6:	2200      	movs	r2, #0
 80008d8:	2108      	movs	r1, #8
 80008da:	480c      	ldr	r0, [pc, #48]	@ (800090c <BMS_read_SPI+0x54>)
 80008dc:	f000 fe60 	bl	80015a0 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, spi_frame, 4, 10);
 80008e0:	230a      	movs	r3, #10
 80008e2:	2204      	movs	r2, #4
 80008e4:	68b9      	ldr	r1, [r7, #8]
 80008e6:	480a      	ldr	r0, [pc, #40]	@ (8000910 <BMS_read_SPI+0x58>)
 80008e8:	f001 fb61 	bl	8001fae <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, read_frame, 8, 10);
 80008ec:	230a      	movs	r3, #10
 80008ee:	2208      	movs	r2, #8
 80008f0:	6879      	ldr	r1, [r7, #4]
 80008f2:	4807      	ldr	r0, [pc, #28]	@ (8000910 <BMS_read_SPI+0x58>)
 80008f4:	f001 fc9f 	bl	8002236 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3, GPIO_PIN_SET);
 80008f8:	2201      	movs	r2, #1
 80008fa:	2108      	movs	r1, #8
 80008fc:	4803      	ldr	r0, [pc, #12]	@ (800090c <BMS_read_SPI+0x54>)
 80008fe:	f000 fe4f 	bl	80015a0 <HAL_GPIO_WritePin>
	}
 8000902:	bf00      	nop
 8000904:	3710      	adds	r7, #16
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	40021000 	.word	0x40021000
 8000910:	20000034 	.word	0x20000034

08000914 <BMS_command_SPI>:

	void BMS_command_SPI(uint16_t command) {
 8000914:	b580      	push	{r7, lr}
 8000916:	b084      	sub	sp, #16
 8000918:	af02      	add	r7, sp, #8
 800091a:	4603      	mov	r3, r0
 800091c:	80fb      	strh	r3, [r7, #6]
		construct_spi_write_frame(command, spi_frame, 0, NULL, 0);
 800091e:	88f8      	ldrh	r0, [r7, #6]
 8000920:	2300      	movs	r3, #0
 8000922:	9300      	str	r3, [sp, #0]
 8000924:	2300      	movs	r3, #0
 8000926:	2200      	movs	r2, #0
 8000928:	490b      	ldr	r1, [pc, #44]	@ (8000958 <BMS_command_SPI+0x44>)
 800092a:	f7ff ff2d 	bl	8000788 <construct_spi_write_frame>
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3, GPIO_PIN_RESET);
 800092e:	2200      	movs	r2, #0
 8000930:	2108      	movs	r1, #8
 8000932:	480a      	ldr	r0, [pc, #40]	@ (800095c <BMS_command_SPI+0x48>)
 8000934:	f000 fe34 	bl	80015a0 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, spi_frame, 4, 10);
 8000938:	230a      	movs	r3, #10
 800093a:	2204      	movs	r2, #4
 800093c:	4906      	ldr	r1, [pc, #24]	@ (8000958 <BMS_command_SPI+0x44>)
 800093e:	4808      	ldr	r0, [pc, #32]	@ (8000960 <BMS_command_SPI+0x4c>)
 8000940:	f001 fb35 	bl	8001fae <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3, GPIO_PIN_SET);
 8000944:	2201      	movs	r2, #1
 8000946:	2108      	movs	r1, #8
 8000948:	4804      	ldr	r0, [pc, #16]	@ (800095c <BMS_command_SPI+0x48>)
 800094a:	f000 fe29 	bl	80015a0 <HAL_GPIO_WritePin>

	}
 800094e:	bf00      	nop
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	2000014c 	.word	0x2000014c
 800095c:	40021000 	.word	0x40021000
 8000960:	20000034 	.word	0x20000034

08000964 <BMS_write_SPI>:

	void BMS_write_SPI(uint16_t command, uint8_t *spi_frame, uint8_t *data, uint8_t data_size) {
 8000964:	b580      	push	{r7, lr}
 8000966:	b086      	sub	sp, #24
 8000968:	af02      	add	r7, sp, #8
 800096a:	60b9      	str	r1, [r7, #8]
 800096c:	607a      	str	r2, [r7, #4]
 800096e:	461a      	mov	r2, r3
 8000970:	4603      	mov	r3, r0
 8000972:	81fb      	strh	r3, [r7, #14]
 8000974:	4613      	mov	r3, r2
 8000976:	737b      	strb	r3, [r7, #13]
		construct_spi_write_frame(command, spi_frame, 1, data, data_size);
 8000978:	89f8      	ldrh	r0, [r7, #14]
 800097a:	7b7b      	ldrb	r3, [r7, #13]
 800097c:	9300      	str	r3, [sp, #0]
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	2201      	movs	r2, #1
 8000982:	68b9      	ldr	r1, [r7, #8]
 8000984:	f7ff ff00 	bl	8000788 <construct_spi_write_frame>
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3, GPIO_PIN_RESET);
 8000988:	2200      	movs	r2, #0
 800098a:	2108      	movs	r1, #8
 800098c:	480a      	ldr	r0, [pc, #40]	@ (80009b8 <BMS_write_SPI+0x54>)
 800098e:	f000 fe07 	bl	80015a0 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, spi_frame, data_size + 4 + 2, 10);
 8000992:	7b7b      	ldrb	r3, [r7, #13]
 8000994:	b29b      	uxth	r3, r3
 8000996:	3306      	adds	r3, #6
 8000998:	b29a      	uxth	r2, r3
 800099a:	230a      	movs	r3, #10
 800099c:	68b9      	ldr	r1, [r7, #8]
 800099e:	4807      	ldr	r0, [pc, #28]	@ (80009bc <BMS_write_SPI+0x58>)
 80009a0:	f001 fb05 	bl	8001fae <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3, GPIO_PIN_SET);
 80009a4:	2201      	movs	r2, #1
 80009a6:	2108      	movs	r1, #8
 80009a8:	4803      	ldr	r0, [pc, #12]	@ (80009b8 <BMS_write_SPI+0x54>)
 80009aa:	f000 fdf9 	bl	80015a0 <HAL_GPIO_WritePin>
	}
 80009ae:	bf00      	nop
 80009b0:	3710      	adds	r7, #16
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	40021000 	.word	0x40021000
 80009bc:	20000034 	.word	0x20000034

080009c0 <wakeup_dummy>:




	void wakeup_dummy() {
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
	    HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3, GPIO_PIN_RESET);
 80009c4:	2200      	movs	r2, #0
 80009c6:	2108      	movs	r1, #8
 80009c8:	4809      	ldr	r0, [pc, #36]	@ (80009f0 <wakeup_dummy+0x30>)
 80009ca:	f000 fde9 	bl	80015a0 <HAL_GPIO_WritePin>
	    HAL_SPI_Transmit(&hspi2, dummy_wakeup, 120, 10);
 80009ce:	230a      	movs	r3, #10
 80009d0:	2278      	movs	r2, #120	@ 0x78
 80009d2:	4908      	ldr	r1, [pc, #32]	@ (80009f4 <wakeup_dummy+0x34>)
 80009d4:	4808      	ldr	r0, [pc, #32]	@ (80009f8 <wakeup_dummy+0x38>)
 80009d6:	f001 faea 	bl	8001fae <HAL_SPI_Transmit>
	    HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3, GPIO_PIN_SET); //Send a dummy byte to trigger IC
 80009da:	2201      	movs	r2, #1
 80009dc:	2108      	movs	r1, #8
 80009de:	4804      	ldr	r0, [pc, #16]	@ (80009f0 <wakeup_dummy+0x30>)
 80009e0:	f000 fdde 	bl	80015a0 <HAL_GPIO_WritePin>
	    HAL_Delay(1.5);
 80009e4:	2001      	movs	r0, #1
 80009e6:	f000 fb35 	bl	8001054 <HAL_Delay>
	}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40021000 	.word	0x40021000
 80009f4:	2000015c 	.word	0x2000015c
 80009f8:	20000034 	.word	0x20000034

080009fc <byte_array_to_bit_array10_data_PEC>:

	}


	// Function to convert an array of bytes into an array of bits
	void byte_array_to_bit_array10_data_PEC(uint8_t *data, int data_len, uint8_t *bit_array, uint8_t *expanded_array) {
 80009fc:	b480      	push	{r7}
 80009fe:	b089      	sub	sp, #36	@ 0x24
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	60f8      	str	r0, [r7, #12]
 8000a04:	60b9      	str	r1, [r7, #8]
 8000a06:	607a      	str	r2, [r7, #4]
 8000a08:	603b      	str	r3, [r7, #0]
	    int j = -1;
 8000a0a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000a0e:	61fb      	str	r3, [r7, #28]
	    // Iterate through each byte in the data array
	    for (int i = data_len; i > 0; i--) {
 8000a10:	68bb      	ldr	r3, [r7, #8]
 8000a12:	61bb      	str	r3, [r7, #24]
 8000a14:	e02a      	b.n	8000a6c <byte_array_to_bit_array10_data_PEC+0x70>
	        // Extract each bit from the current byte and store it in the bit array
	        j++;
 8000a16:	69fb      	ldr	r3, [r7, #28]
 8000a18:	3301      	adds	r3, #1
 8000a1a:	61fb      	str	r3, [r7, #28]
	        for ( int bit = 0; bit < 8; bit++) {
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	617b      	str	r3, [r7, #20]
 8000a20:	e01e      	b.n	8000a60 <byte_array_to_bit_array10_data_PEC+0x64>
	            bit_array[j*8+bit] = (data[i-1] & 1);
 8000a22:	69bb      	ldr	r3, [r7, #24]
 8000a24:	3b01      	subs	r3, #1
 8000a26:	68fa      	ldr	r2, [r7, #12]
 8000a28:	4413      	add	r3, r2
 8000a2a:	781a      	ldrb	r2, [r3, #0]
 8000a2c:	69fb      	ldr	r3, [r7, #28]
 8000a2e:	00d9      	lsls	r1, r3, #3
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	440b      	add	r3, r1
 8000a34:	4619      	mov	r1, r3
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	440b      	add	r3, r1
 8000a3a:	f002 0201 	and.w	r2, r2, #1
 8000a3e:	b2d2      	uxtb	r2, r2
 8000a40:	701a      	strb	r2, [r3, #0]
	            data[i-1] = data[i-1] >> 1;
 8000a42:	69bb      	ldr	r3, [r7, #24]
 8000a44:	3b01      	subs	r3, #1
 8000a46:	68fa      	ldr	r2, [r7, #12]
 8000a48:	4413      	add	r3, r2
 8000a4a:	781a      	ldrb	r2, [r3, #0]
 8000a4c:	69bb      	ldr	r3, [r7, #24]
 8000a4e:	3b01      	subs	r3, #1
 8000a50:	68f9      	ldr	r1, [r7, #12]
 8000a52:	440b      	add	r3, r1
 8000a54:	0852      	lsrs	r2, r2, #1
 8000a56:	b2d2      	uxtb	r2, r2
 8000a58:	701a      	strb	r2, [r3, #0]
	        for ( int bit = 0; bit < 8; bit++) {
 8000a5a:	697b      	ldr	r3, [r7, #20]
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	617b      	str	r3, [r7, #20]
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	2b07      	cmp	r3, #7
 8000a64:	dddd      	ble.n	8000a22 <byte_array_to_bit_array10_data_PEC+0x26>
	    for (int i = data_len; i > 0; i--) {
 8000a66:	69bb      	ldr	r3, [r7, #24]
 8000a68:	3b01      	subs	r3, #1
 8000a6a:	61bb      	str	r3, [r7, #24]
 8000a6c:	69bb      	ldr	r3, [r7, #24]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	dcd1      	bgt.n	8000a16 <byte_array_to_bit_array10_data_PEC+0x1a>

	        }


	    }
	    for (int i = 6; i < 54; i++) {
 8000a72:	2306      	movs	r3, #6
 8000a74:	613b      	str	r3, [r7, #16]
 8000a76:	e00b      	b.n	8000a90 <byte_array_to_bit_array10_data_PEC+0x94>
	        expanded_array[i] = bit_array[i-6];
 8000a78:	693b      	ldr	r3, [r7, #16]
 8000a7a:	3b06      	subs	r3, #6
 8000a7c:	687a      	ldr	r2, [r7, #4]
 8000a7e:	441a      	add	r2, r3
 8000a80:	693b      	ldr	r3, [r7, #16]
 8000a82:	6839      	ldr	r1, [r7, #0]
 8000a84:	440b      	add	r3, r1
 8000a86:	7812      	ldrb	r2, [r2, #0]
 8000a88:	701a      	strb	r2, [r3, #0]
	    for (int i = 6; i < 54; i++) {
 8000a8a:	693b      	ldr	r3, [r7, #16]
 8000a8c:	3301      	adds	r3, #1
 8000a8e:	613b      	str	r3, [r7, #16]
 8000a90:	693b      	ldr	r3, [r7, #16]
 8000a92:	2b35      	cmp	r3, #53	@ 0x35
 8000a94:	ddf0      	ble.n	8000a78 <byte_array_to_bit_array10_data_PEC+0x7c>
	    }

	}
 8000a96:	bf00      	nop
 8000a98:	bf00      	nop
 8000a9a:	3724      	adds	r7, #36	@ 0x24
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr

08000aa4 <word_to_binary_array10_data_PEC>:

	void word_to_binary_array10_data_PEC(uint16_t word, uint16_t binary_array[16]) {
 8000aa4:	b480      	push	{r7}
 8000aa6:	b085      	sub	sp, #20
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	4603      	mov	r3, r0
 8000aac:	6039      	str	r1, [r7, #0]
 8000aae:	80fb      	strh	r3, [r7, #6]
	    // Loop through each bit in the 16-bit word, starting from LSB
	    for (int i = 0; i < 10; i++) {
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	e00f      	b.n	8000ad6 <word_to_binary_array10_data_PEC+0x32>
	        // Extract the i-th bit and store it in the array
	        binary_array[i] = (word >> i) & 1;
 8000ab6:	88fa      	ldrh	r2, [r7, #6]
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	fa42 f303 	asr.w	r3, r2, r3
 8000abe:	b29a      	uxth	r2, r3
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	005b      	lsls	r3, r3, #1
 8000ac4:	6839      	ldr	r1, [r7, #0]
 8000ac6:	440b      	add	r3, r1
 8000ac8:	f002 0201 	and.w	r2, r2, #1
 8000acc:	b292      	uxth	r2, r2
 8000ace:	801a      	strh	r2, [r3, #0]
	    for (int i = 0; i < 10; i++) {
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	3301      	adds	r3, #1
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	2b09      	cmp	r3, #9
 8000ada:	ddec      	ble.n	8000ab6 <word_to_binary_array10_data_PEC+0x12>
	    }
	}
 8000adc:	bf00      	nop
 8000ade:	bf00      	nop
 8000ae0:	3714      	adds	r7, #20
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
	...

08000aec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000af2:	f000 fa3d 	bl	8000f70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000af6:	f000 f83b 	bl	8000b70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000afa:	f000 f8d9 	bl	8000cb0 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000afe:	f000 f8a1 	bl	8000c44 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  for(int i= 0; i < 120; i++ ) {
 8000b02:	2300      	movs	r3, #0
 8000b04:	607b      	str	r3, [r7, #4]
 8000b06:	e007      	b.n	8000b18 <main+0x2c>

	  dummy_wakeup[i] = 0xFF;
 8000b08:	4a15      	ldr	r2, [pc, #84]	@ (8000b60 <main+0x74>)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	4413      	add	r3, r2
 8000b0e:	22ff      	movs	r2, #255	@ 0xff
 8000b10:	701a      	strb	r2, [r3, #0]
  for(int i= 0; i < 120; i++ ) {
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	3301      	adds	r3, #1
 8000b16:	607b      	str	r3, [r7, #4]
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	2b77      	cmp	r3, #119	@ 0x77
 8000b1c:	ddf4      	ble.n	8000b08 <main+0x1c>
  }


  wakeup_dummy();
 8000b1e:	f7ff ff4f 	bl	80009c0 <wakeup_dummy>
  HAL_Delay(10);
 8000b22:	200a      	movs	r0, #10
 8000b24:	f000 fa96 	bl	8001054 <HAL_Delay>



  BMS_command_SPI(0x02F0); //Start ADC conversion without redundancy
 8000b28:	f44f 703c 	mov.w	r0, #752	@ 0x2f0
 8000b2c:	f7ff fef2 	bl	8000914 <BMS_command_SPI>

  HAL_Delay(200);
 8000b30:	20c8      	movs	r0, #200	@ 0xc8
 8000b32:	f000 fa8f 	bl	8001054 <HAL_Delay>


  BMS_write_SPI(WRCFGB, spi_frame, write_data_B, 6);
 8000b36:	2306      	movs	r3, #6
 8000b38:	4a0a      	ldr	r2, [pc, #40]	@ (8000b64 <main+0x78>)
 8000b3a:	490b      	ldr	r1, [pc, #44]	@ (8000b68 <main+0x7c>)
 8000b3c:	2024      	movs	r0, #36	@ 0x24
 8000b3e:	f7ff ff11 	bl	8000964 <BMS_write_SPI>
  HAL_Delay(1);
 8000b42:	2001      	movs	r0, #1
 8000b44:	f000 fa86 	bl	8001054 <HAL_Delay>

  BMS_read_SPI(RDCFGB, spi_frame, data_read);
 8000b48:	4a08      	ldr	r2, [pc, #32]	@ (8000b6c <main+0x80>)
 8000b4a:	4907      	ldr	r1, [pc, #28]	@ (8000b68 <main+0x7c>)
 8000b4c:	2026      	movs	r0, #38	@ 0x26
 8000b4e:	f7ff feb3 	bl	80008b8 <BMS_read_SPI>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  BMS_read_SPI(0x0044, spi_frame, data_read);
 8000b52:	4a06      	ldr	r2, [pc, #24]	@ (8000b6c <main+0x80>)
 8000b54:	4904      	ldr	r1, [pc, #16]	@ (8000b68 <main+0x7c>)
 8000b56:	2044      	movs	r0, #68	@ 0x44
 8000b58:	f7ff feae 	bl	80008b8 <BMS_read_SPI>
 8000b5c:	e7f9      	b.n	8000b52 <main+0x66>
 8000b5e:	bf00      	nop
 8000b60:	2000015c 	.word	0x2000015c
 8000b64:	20000004 	.word	0x20000004
 8000b68:	2000014c 	.word	0x2000014c
 8000b6c:	2000010c 	.word	0x2000010c

08000b70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b094      	sub	sp, #80	@ 0x50
 8000b74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b76:	f107 0320 	add.w	r3, r7, #32
 8000b7a:	2230      	movs	r2, #48	@ 0x30
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f001 ff5e 	bl	8002a40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b84:	f107 030c 	add.w	r3, r7, #12
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
 8000b8e:	609a      	str	r2, [r3, #8]
 8000b90:	60da      	str	r2, [r3, #12]
 8000b92:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b94:	2300      	movs	r3, #0
 8000b96:	60bb      	str	r3, [r7, #8]
 8000b98:	4b28      	ldr	r3, [pc, #160]	@ (8000c3c <SystemClock_Config+0xcc>)
 8000b9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b9c:	4a27      	ldr	r2, [pc, #156]	@ (8000c3c <SystemClock_Config+0xcc>)
 8000b9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ba2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ba4:	4b25      	ldr	r3, [pc, #148]	@ (8000c3c <SystemClock_Config+0xcc>)
 8000ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ba8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bac:	60bb      	str	r3, [r7, #8]
 8000bae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	607b      	str	r3, [r7, #4]
 8000bb4:	4b22      	ldr	r3, [pc, #136]	@ (8000c40 <SystemClock_Config+0xd0>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a21      	ldr	r2, [pc, #132]	@ (8000c40 <SystemClock_Config+0xd0>)
 8000bba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bbe:	6013      	str	r3, [r2, #0]
 8000bc0:	4b1f      	ldr	r3, [pc, #124]	@ (8000c40 <SystemClock_Config+0xd0>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bc8:	607b      	str	r3, [r7, #4]
 8000bca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bd0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000bd4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bda:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000bde:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000be0:	2304      	movs	r3, #4
 8000be2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000be4:	2340      	movs	r3, #64	@ 0x40
 8000be6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000be8:	2302      	movs	r3, #2
 8000bea:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000bec:	2307      	movs	r3, #7
 8000bee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bf0:	f107 0320 	add.w	r3, r7, #32
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f000 fced 	bl	80015d4 <HAL_RCC_OscConfig>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c00:	f000 f8b4 	bl	8000d6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c04:	230f      	movs	r3, #15
 8000c06:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000c0c:	2380      	movs	r3, #128	@ 0x80
 8000c0e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 8000c10:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000c14:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 8000c16:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000c1a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c1c:	f107 030c 	add.w	r3, r7, #12
 8000c20:	2101      	movs	r1, #1
 8000c22:	4618      	mov	r0, r3
 8000c24:	f000 ff4e 	bl	8001ac4 <HAL_RCC_ClockConfig>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000c2e:	f000 f89d 	bl	8000d6c <Error_Handler>
  }
}
 8000c32:	bf00      	nop
 8000c34:	3750      	adds	r7, #80	@ 0x50
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40023800 	.word	0x40023800
 8000c40:	40007000 	.word	0x40007000

08000c44 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000c48:	4b17      	ldr	r3, [pc, #92]	@ (8000ca8 <MX_SPI2_Init+0x64>)
 8000c4a:	4a18      	ldr	r2, [pc, #96]	@ (8000cac <MX_SPI2_Init+0x68>)
 8000c4c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000c4e:	4b16      	ldr	r3, [pc, #88]	@ (8000ca8 <MX_SPI2_Init+0x64>)
 8000c50:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000c54:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000c56:	4b14      	ldr	r3, [pc, #80]	@ (8000ca8 <MX_SPI2_Init+0x64>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c5c:	4b12      	ldr	r3, [pc, #72]	@ (8000ca8 <MX_SPI2_Init+0x64>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c62:	4b11      	ldr	r3, [pc, #68]	@ (8000ca8 <MX_SPI2_Init+0x64>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c68:	4b0f      	ldr	r3, [pc, #60]	@ (8000ca8 <MX_SPI2_Init+0x64>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000c6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ca8 <MX_SPI2_Init+0x64>)
 8000c70:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c74:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c76:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca8 <MX_SPI2_Init+0x64>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c7c:	4b0a      	ldr	r3, [pc, #40]	@ (8000ca8 <MX_SPI2_Init+0x64>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c82:	4b09      	ldr	r3, [pc, #36]	@ (8000ca8 <MX_SPI2_Init+0x64>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c88:	4b07      	ldr	r3, [pc, #28]	@ (8000ca8 <MX_SPI2_Init+0x64>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000c8e:	4b06      	ldr	r3, [pc, #24]	@ (8000ca8 <MX_SPI2_Init+0x64>)
 8000c90:	220a      	movs	r2, #10
 8000c92:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000c94:	4804      	ldr	r0, [pc, #16]	@ (8000ca8 <MX_SPI2_Init+0x64>)
 8000c96:	f001 f901 	bl	8001e9c <HAL_SPI_Init>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000ca0:	f000 f864 	bl	8000d6c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000ca4:	bf00      	nop
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	20000034 	.word	0x20000034
 8000cac:	40003800 	.word	0x40003800

08000cb0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b08a      	sub	sp, #40	@ 0x28
 8000cb4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb6:	f107 0314 	add.w	r3, r7, #20
 8000cba:	2200      	movs	r2, #0
 8000cbc:	601a      	str	r2, [r3, #0]
 8000cbe:	605a      	str	r2, [r3, #4]
 8000cc0:	609a      	str	r2, [r3, #8]
 8000cc2:	60da      	str	r2, [r3, #12]
 8000cc4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	613b      	str	r3, [r7, #16]
 8000cca:	4b26      	ldr	r3, [pc, #152]	@ (8000d64 <MX_GPIO_Init+0xb4>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cce:	4a25      	ldr	r2, [pc, #148]	@ (8000d64 <MX_GPIO_Init+0xb4>)
 8000cd0:	f043 0310 	orr.w	r3, r3, #16
 8000cd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cd6:	4b23      	ldr	r3, [pc, #140]	@ (8000d64 <MX_GPIO_Init+0xb4>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cda:	f003 0310 	and.w	r3, r3, #16
 8000cde:	613b      	str	r3, [r7, #16]
 8000ce0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	60fb      	str	r3, [r7, #12]
 8000ce6:	4b1f      	ldr	r3, [pc, #124]	@ (8000d64 <MX_GPIO_Init+0xb4>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cea:	4a1e      	ldr	r2, [pc, #120]	@ (8000d64 <MX_GPIO_Init+0xb4>)
 8000cec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000cf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cf2:	4b1c      	ldr	r3, [pc, #112]	@ (8000d64 <MX_GPIO_Init+0xb4>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	60bb      	str	r3, [r7, #8]
 8000d02:	4b18      	ldr	r3, [pc, #96]	@ (8000d64 <MX_GPIO_Init+0xb4>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d06:	4a17      	ldr	r2, [pc, #92]	@ (8000d64 <MX_GPIO_Init+0xb4>)
 8000d08:	f043 0304 	orr.w	r3, r3, #4
 8000d0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d0e:	4b15      	ldr	r3, [pc, #84]	@ (8000d64 <MX_GPIO_Init+0xb4>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d12:	f003 0304 	and.w	r3, r3, #4
 8000d16:	60bb      	str	r3, [r7, #8]
 8000d18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	607b      	str	r3, [r7, #4]
 8000d1e:	4b11      	ldr	r3, [pc, #68]	@ (8000d64 <MX_GPIO_Init+0xb4>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d22:	4a10      	ldr	r2, [pc, #64]	@ (8000d64 <MX_GPIO_Init+0xb4>)
 8000d24:	f043 0302 	orr.w	r3, r3, #2
 8000d28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d64 <MX_GPIO_Init+0xb4>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2e:	f003 0302 	and.w	r3, r3, #2
 8000d32:	607b      	str	r3, [r7, #4]
 8000d34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8000d36:	2201      	movs	r2, #1
 8000d38:	2108      	movs	r1, #8
 8000d3a:	480b      	ldr	r0, [pc, #44]	@ (8000d68 <MX_GPIO_Init+0xb8>)
 8000d3c:	f000 fc30 	bl	80015a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d40:	2308      	movs	r3, #8
 8000d42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d44:	2301      	movs	r3, #1
 8000d46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d50:	f107 0314 	add.w	r3, r7, #20
 8000d54:	4619      	mov	r1, r3
 8000d56:	4804      	ldr	r0, [pc, #16]	@ (8000d68 <MX_GPIO_Init+0xb8>)
 8000d58:	f000 fa86 	bl	8001268 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d5c:	bf00      	nop
 8000d5e:	3728      	adds	r7, #40	@ 0x28
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	40023800 	.word	0x40023800
 8000d68:	40021000 	.word	0x40021000

08000d6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d70:	b672      	cpsid	i
}
 8000d72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d74:	bf00      	nop
 8000d76:	e7fd      	b.n	8000d74 <Error_Handler+0x8>

08000d78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d7e:	2300      	movs	r3, #0
 8000d80:	607b      	str	r3, [r7, #4]
 8000d82:	4b10      	ldr	r3, [pc, #64]	@ (8000dc4 <HAL_MspInit+0x4c>)
 8000d84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d86:	4a0f      	ldr	r2, [pc, #60]	@ (8000dc4 <HAL_MspInit+0x4c>)
 8000d88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d8e:	4b0d      	ldr	r3, [pc, #52]	@ (8000dc4 <HAL_MspInit+0x4c>)
 8000d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d96:	607b      	str	r3, [r7, #4]
 8000d98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	603b      	str	r3, [r7, #0]
 8000d9e:	4b09      	ldr	r3, [pc, #36]	@ (8000dc4 <HAL_MspInit+0x4c>)
 8000da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000da2:	4a08      	ldr	r2, [pc, #32]	@ (8000dc4 <HAL_MspInit+0x4c>)
 8000da4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000da8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000daa:	4b06      	ldr	r3, [pc, #24]	@ (8000dc4 <HAL_MspInit+0x4c>)
 8000dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000db2:	603b      	str	r3, [r7, #0]
 8000db4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000db6:	2007      	movs	r0, #7
 8000db8:	f000 fa22 	bl	8001200 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dbc:	bf00      	nop
 8000dbe:	3708      	adds	r7, #8
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	40023800 	.word	0x40023800

08000dc8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b08a      	sub	sp, #40	@ 0x28
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd0:	f107 0314 	add.w	r3, r7, #20
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
 8000dda:	609a      	str	r2, [r3, #8]
 8000ddc:	60da      	str	r2, [r3, #12]
 8000dde:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a28      	ldr	r2, [pc, #160]	@ (8000e88 <HAL_SPI_MspInit+0xc0>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d14a      	bne.n	8000e80 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	613b      	str	r3, [r7, #16]
 8000dee:	4b27      	ldr	r3, [pc, #156]	@ (8000e8c <HAL_SPI_MspInit+0xc4>)
 8000df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000df2:	4a26      	ldr	r2, [pc, #152]	@ (8000e8c <HAL_SPI_MspInit+0xc4>)
 8000df4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000df8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dfa:	4b24      	ldr	r3, [pc, #144]	@ (8000e8c <HAL_SPI_MspInit+0xc4>)
 8000dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dfe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e02:	613b      	str	r3, [r7, #16]
 8000e04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	60fb      	str	r3, [r7, #12]
 8000e0a:	4b20      	ldr	r3, [pc, #128]	@ (8000e8c <HAL_SPI_MspInit+0xc4>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e0e:	4a1f      	ldr	r2, [pc, #124]	@ (8000e8c <HAL_SPI_MspInit+0xc4>)
 8000e10:	f043 0304 	orr.w	r3, r3, #4
 8000e14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e16:	4b1d      	ldr	r3, [pc, #116]	@ (8000e8c <HAL_SPI_MspInit+0xc4>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e1a:	f003 0304 	and.w	r3, r3, #4
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	60bb      	str	r3, [r7, #8]
 8000e26:	4b19      	ldr	r3, [pc, #100]	@ (8000e8c <HAL_SPI_MspInit+0xc4>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2a:	4a18      	ldr	r2, [pc, #96]	@ (8000e8c <HAL_SPI_MspInit+0xc4>)
 8000e2c:	f043 0302 	orr.w	r3, r3, #2
 8000e30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e32:	4b16      	ldr	r3, [pc, #88]	@ (8000e8c <HAL_SPI_MspInit+0xc4>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e36:	f003 0302 	and.w	r3, r3, #2
 8000e3a:	60bb      	str	r3, [r7, #8]
 8000e3c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e3e:	230c      	movs	r3, #12
 8000e40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e42:	2302      	movs	r3, #2
 8000e44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e46:	2300      	movs	r3, #0
 8000e48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e4a:	2303      	movs	r3, #3
 8000e4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e4e:	2305      	movs	r3, #5
 8000e50:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e52:	f107 0314 	add.w	r3, r7, #20
 8000e56:	4619      	mov	r1, r3
 8000e58:	480d      	ldr	r0, [pc, #52]	@ (8000e90 <HAL_SPI_MspInit+0xc8>)
 8000e5a:	f000 fa05 	bl	8001268 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e64:	2302      	movs	r3, #2
 8000e66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e6c:	2303      	movs	r3, #3
 8000e6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e70:	2305      	movs	r3, #5
 8000e72:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e74:	f107 0314 	add.w	r3, r7, #20
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4806      	ldr	r0, [pc, #24]	@ (8000e94 <HAL_SPI_MspInit+0xcc>)
 8000e7c:	f000 f9f4 	bl	8001268 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000e80:	bf00      	nop
 8000e82:	3728      	adds	r7, #40	@ 0x28
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	40003800 	.word	0x40003800
 8000e8c:	40023800 	.word	0x40023800
 8000e90:	40020800 	.word	0x40020800
 8000e94:	40020400 	.word	0x40020400

08000e98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e9c:	bf00      	nop
 8000e9e:	e7fd      	b.n	8000e9c <NMI_Handler+0x4>

08000ea0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ea4:	bf00      	nop
 8000ea6:	e7fd      	b.n	8000ea4 <HardFault_Handler+0x4>

08000ea8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eac:	bf00      	nop
 8000eae:	e7fd      	b.n	8000eac <MemManage_Handler+0x4>

08000eb0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eb4:	bf00      	nop
 8000eb6:	e7fd      	b.n	8000eb4 <BusFault_Handler+0x4>

08000eb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ebc:	bf00      	nop
 8000ebe:	e7fd      	b.n	8000ebc <UsageFault_Handler+0x4>

08000ec0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr

08000ece <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr

08000edc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr

08000eea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eea:	b580      	push	{r7, lr}
 8000eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eee:	f000 f891 	bl	8001014 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
	...

08000ef8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000efc:	4b06      	ldr	r3, [pc, #24]	@ (8000f18 <SystemInit+0x20>)
 8000efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f02:	4a05      	ldr	r2, [pc, #20]	@ (8000f18 <SystemInit+0x20>)
 8000f04:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f08:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f1c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f54 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000f20:	f7ff ffea 	bl	8000ef8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f24:	480c      	ldr	r0, [pc, #48]	@ (8000f58 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f26:	490d      	ldr	r1, [pc, #52]	@ (8000f5c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f28:	4a0d      	ldr	r2, [pc, #52]	@ (8000f60 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f2c:	e002      	b.n	8000f34 <LoopCopyDataInit>

08000f2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f32:	3304      	adds	r3, #4

08000f34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f38:	d3f9      	bcc.n	8000f2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000f64 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f3c:	4c0a      	ldr	r4, [pc, #40]	@ (8000f68 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f40:	e001      	b.n	8000f46 <LoopFillZerobss>

08000f42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f44:	3204      	adds	r2, #4

08000f46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f48:	d3fb      	bcc.n	8000f42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f4a:	f001 fd81 	bl	8002a50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f4e:	f7ff fdcd 	bl	8000aec <main>
  bx  lr    
 8000f52:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f5c:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000f60:	08002ad0 	.word	0x08002ad0
  ldr r2, =_sbss
 8000f64:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000f68:	20000240 	.word	0x20000240

08000f6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f6c:	e7fe      	b.n	8000f6c <ADC_IRQHandler>
	...

08000f70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f74:	4b0e      	ldr	r3, [pc, #56]	@ (8000fb0 <HAL_Init+0x40>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a0d      	ldr	r2, [pc, #52]	@ (8000fb0 <HAL_Init+0x40>)
 8000f7a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f80:	4b0b      	ldr	r3, [pc, #44]	@ (8000fb0 <HAL_Init+0x40>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a0a      	ldr	r2, [pc, #40]	@ (8000fb0 <HAL_Init+0x40>)
 8000f86:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f8c:	4b08      	ldr	r3, [pc, #32]	@ (8000fb0 <HAL_Init+0x40>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a07      	ldr	r2, [pc, #28]	@ (8000fb0 <HAL_Init+0x40>)
 8000f92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f98:	2003      	movs	r0, #3
 8000f9a:	f000 f931 	bl	8001200 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f9e:	2000      	movs	r0, #0
 8000fa0:	f000 f808 	bl	8000fb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fa4:	f7ff fee8 	bl	8000d78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fa8:	2300      	movs	r3, #0
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	40023c00 	.word	0x40023c00

08000fb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fbc:	4b12      	ldr	r3, [pc, #72]	@ (8001008 <HAL_InitTick+0x54>)
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	4b12      	ldr	r3, [pc, #72]	@ (800100c <HAL_InitTick+0x58>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fca:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fce:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f000 f93b 	bl	800124e <HAL_SYSTICK_Config>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e00e      	b.n	8001000 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2b0f      	cmp	r3, #15
 8000fe6:	d80a      	bhi.n	8000ffe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fe8:	2200      	movs	r2, #0
 8000fea:	6879      	ldr	r1, [r7, #4]
 8000fec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ff0:	f000 f911 	bl	8001216 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ff4:	4a06      	ldr	r2, [pc, #24]	@ (8001010 <HAL_InitTick+0x5c>)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	e000      	b.n	8001000 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
}
 8001000:	4618      	mov	r0, r3
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	2000000c 	.word	0x2000000c
 800100c:	20000014 	.word	0x20000014
 8001010:	20000010 	.word	0x20000010

08001014 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001018:	4b06      	ldr	r3, [pc, #24]	@ (8001034 <HAL_IncTick+0x20>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	461a      	mov	r2, r3
 800101e:	4b06      	ldr	r3, [pc, #24]	@ (8001038 <HAL_IncTick+0x24>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4413      	add	r3, r2
 8001024:	4a04      	ldr	r2, [pc, #16]	@ (8001038 <HAL_IncTick+0x24>)
 8001026:	6013      	str	r3, [r2, #0]
}
 8001028:	bf00      	nop
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	20000014 	.word	0x20000014
 8001038:	2000023c 	.word	0x2000023c

0800103c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  return uwTick;
 8001040:	4b03      	ldr	r3, [pc, #12]	@ (8001050 <HAL_GetTick+0x14>)
 8001042:	681b      	ldr	r3, [r3, #0]
}
 8001044:	4618      	mov	r0, r3
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	2000023c 	.word	0x2000023c

08001054 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800105c:	f7ff ffee 	bl	800103c <HAL_GetTick>
 8001060:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800106c:	d005      	beq.n	800107a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800106e:	4b0a      	ldr	r3, [pc, #40]	@ (8001098 <HAL_Delay+0x44>)
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	461a      	mov	r2, r3
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	4413      	add	r3, r2
 8001078:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800107a:	bf00      	nop
 800107c:	f7ff ffde 	bl	800103c <HAL_GetTick>
 8001080:	4602      	mov	r2, r0
 8001082:	68bb      	ldr	r3, [r7, #8]
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	68fa      	ldr	r2, [r7, #12]
 8001088:	429a      	cmp	r2, r3
 800108a:	d8f7      	bhi.n	800107c <HAL_Delay+0x28>
  {
  }
}
 800108c:	bf00      	nop
 800108e:	bf00      	nop
 8001090:	3710      	adds	r7, #16
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	20000014 	.word	0x20000014

0800109c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800109c:	b480      	push	{r7}
 800109e:	b085      	sub	sp, #20
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	f003 0307 	and.w	r3, r3, #7
 80010aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010ac:	4b0c      	ldr	r3, [pc, #48]	@ (80010e0 <__NVIC_SetPriorityGrouping+0x44>)
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010b2:	68ba      	ldr	r2, [r7, #8]
 80010b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010b8:	4013      	ands	r3, r2
 80010ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ce:	4a04      	ldr	r2, [pc, #16]	@ (80010e0 <__NVIC_SetPriorityGrouping+0x44>)
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	60d3      	str	r3, [r2, #12]
}
 80010d4:	bf00      	nop
 80010d6:	3714      	adds	r7, #20
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	e000ed00 	.word	0xe000ed00

080010e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010e8:	4b04      	ldr	r3, [pc, #16]	@ (80010fc <__NVIC_GetPriorityGrouping+0x18>)
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	0a1b      	lsrs	r3, r3, #8
 80010ee:	f003 0307 	and.w	r3, r3, #7
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	e000ed00 	.word	0xe000ed00

08001100 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	6039      	str	r1, [r7, #0]
 800110a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800110c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001110:	2b00      	cmp	r3, #0
 8001112:	db0a      	blt.n	800112a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	b2da      	uxtb	r2, r3
 8001118:	490c      	ldr	r1, [pc, #48]	@ (800114c <__NVIC_SetPriority+0x4c>)
 800111a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111e:	0112      	lsls	r2, r2, #4
 8001120:	b2d2      	uxtb	r2, r2
 8001122:	440b      	add	r3, r1
 8001124:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001128:	e00a      	b.n	8001140 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	b2da      	uxtb	r2, r3
 800112e:	4908      	ldr	r1, [pc, #32]	@ (8001150 <__NVIC_SetPriority+0x50>)
 8001130:	79fb      	ldrb	r3, [r7, #7]
 8001132:	f003 030f 	and.w	r3, r3, #15
 8001136:	3b04      	subs	r3, #4
 8001138:	0112      	lsls	r2, r2, #4
 800113a:	b2d2      	uxtb	r2, r2
 800113c:	440b      	add	r3, r1
 800113e:	761a      	strb	r2, [r3, #24]
}
 8001140:	bf00      	nop
 8001142:	370c      	adds	r7, #12
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr
 800114c:	e000e100 	.word	0xe000e100
 8001150:	e000ed00 	.word	0xe000ed00

08001154 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001154:	b480      	push	{r7}
 8001156:	b089      	sub	sp, #36	@ 0x24
 8001158:	af00      	add	r7, sp, #0
 800115a:	60f8      	str	r0, [r7, #12]
 800115c:	60b9      	str	r1, [r7, #8]
 800115e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	f003 0307 	and.w	r3, r3, #7
 8001166:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	f1c3 0307 	rsb	r3, r3, #7
 800116e:	2b04      	cmp	r3, #4
 8001170:	bf28      	it	cs
 8001172:	2304      	movcs	r3, #4
 8001174:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	3304      	adds	r3, #4
 800117a:	2b06      	cmp	r3, #6
 800117c:	d902      	bls.n	8001184 <NVIC_EncodePriority+0x30>
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	3b03      	subs	r3, #3
 8001182:	e000      	b.n	8001186 <NVIC_EncodePriority+0x32>
 8001184:	2300      	movs	r3, #0
 8001186:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001188:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800118c:	69bb      	ldr	r3, [r7, #24]
 800118e:	fa02 f303 	lsl.w	r3, r2, r3
 8001192:	43da      	mvns	r2, r3
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	401a      	ands	r2, r3
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800119c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	fa01 f303 	lsl.w	r3, r1, r3
 80011a6:	43d9      	mvns	r1, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011ac:	4313      	orrs	r3, r2
         );
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3724      	adds	r7, #36	@ 0x24
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
	...

080011bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	3b01      	subs	r3, #1
 80011c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011cc:	d301      	bcc.n	80011d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011ce:	2301      	movs	r3, #1
 80011d0:	e00f      	b.n	80011f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011d2:	4a0a      	ldr	r2, [pc, #40]	@ (80011fc <SysTick_Config+0x40>)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	3b01      	subs	r3, #1
 80011d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011da:	210f      	movs	r1, #15
 80011dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80011e0:	f7ff ff8e 	bl	8001100 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011e4:	4b05      	ldr	r3, [pc, #20]	@ (80011fc <SysTick_Config+0x40>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ea:	4b04      	ldr	r3, [pc, #16]	@ (80011fc <SysTick_Config+0x40>)
 80011ec:	2207      	movs	r2, #7
 80011ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011f0:	2300      	movs	r3, #0
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	e000e010 	.word	0xe000e010

08001200 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f7ff ff47 	bl	800109c <__NVIC_SetPriorityGrouping>
}
 800120e:	bf00      	nop
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001216:	b580      	push	{r7, lr}
 8001218:	b086      	sub	sp, #24
 800121a:	af00      	add	r7, sp, #0
 800121c:	4603      	mov	r3, r0
 800121e:	60b9      	str	r1, [r7, #8]
 8001220:	607a      	str	r2, [r7, #4]
 8001222:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001224:	2300      	movs	r3, #0
 8001226:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001228:	f7ff ff5c 	bl	80010e4 <__NVIC_GetPriorityGrouping>
 800122c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800122e:	687a      	ldr	r2, [r7, #4]
 8001230:	68b9      	ldr	r1, [r7, #8]
 8001232:	6978      	ldr	r0, [r7, #20]
 8001234:	f7ff ff8e 	bl	8001154 <NVIC_EncodePriority>
 8001238:	4602      	mov	r2, r0
 800123a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800123e:	4611      	mov	r1, r2
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff ff5d 	bl	8001100 <__NVIC_SetPriority>
}
 8001246:	bf00      	nop
 8001248:	3718      	adds	r7, #24
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}

0800124e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800124e:	b580      	push	{r7, lr}
 8001250:	b082      	sub	sp, #8
 8001252:	af00      	add	r7, sp, #0
 8001254:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f7ff ffb0 	bl	80011bc <SysTick_Config>
 800125c:	4603      	mov	r3, r0
}
 800125e:	4618      	mov	r0, r3
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
	...

08001268 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001268:	b480      	push	{r7}
 800126a:	b089      	sub	sp, #36	@ 0x24
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001272:	2300      	movs	r3, #0
 8001274:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001276:	2300      	movs	r3, #0
 8001278:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800127a:	2300      	movs	r3, #0
 800127c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800127e:	2300      	movs	r3, #0
 8001280:	61fb      	str	r3, [r7, #28]
 8001282:	e16b      	b.n	800155c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001284:	2201      	movs	r2, #1
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	697a      	ldr	r2, [r7, #20]
 8001294:	4013      	ands	r3, r2
 8001296:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001298:	693a      	ldr	r2, [r7, #16]
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	429a      	cmp	r2, r3
 800129e:	f040 815a 	bne.w	8001556 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f003 0303 	and.w	r3, r3, #3
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d005      	beq.n	80012ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012b6:	2b02      	cmp	r3, #2
 80012b8:	d130      	bne.n	800131c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	2203      	movs	r2, #3
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	43db      	mvns	r3, r3
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	4013      	ands	r3, r2
 80012d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	68da      	ldr	r2, [r3, #12]
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	fa02 f303 	lsl.w	r3, r2, r3
 80012de:	69ba      	ldr	r2, [r7, #24]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012f0:	2201      	movs	r2, #1
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	43db      	mvns	r3, r3
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	4013      	ands	r3, r2
 80012fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	091b      	lsrs	r3, r3, #4
 8001306:	f003 0201 	and.w	r2, r3, #1
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	4313      	orrs	r3, r2
 8001314:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f003 0303 	and.w	r3, r3, #3
 8001324:	2b03      	cmp	r3, #3
 8001326:	d017      	beq.n	8001358 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	2203      	movs	r2, #3
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	43db      	mvns	r3, r3
 800133a:	69ba      	ldr	r2, [r7, #24]
 800133c:	4013      	ands	r3, r2
 800133e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	689a      	ldr	r2, [r3, #8]
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	4313      	orrs	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f003 0303 	and.w	r3, r3, #3
 8001360:	2b02      	cmp	r3, #2
 8001362:	d123      	bne.n	80013ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	08da      	lsrs	r2, r3, #3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	3208      	adds	r2, #8
 800136c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001370:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	f003 0307 	and.w	r3, r3, #7
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	220f      	movs	r2, #15
 800137c:	fa02 f303 	lsl.w	r3, r2, r3
 8001380:	43db      	mvns	r3, r3
 8001382:	69ba      	ldr	r2, [r7, #24]
 8001384:	4013      	ands	r3, r2
 8001386:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	691a      	ldr	r2, [r3, #16]
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	f003 0307 	and.w	r3, r3, #7
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	fa02 f303 	lsl.w	r3, r2, r3
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	4313      	orrs	r3, r2
 800139c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	08da      	lsrs	r2, r3, #3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	3208      	adds	r2, #8
 80013a6:	69b9      	ldr	r1, [r7, #24]
 80013a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	2203      	movs	r2, #3
 80013b8:	fa02 f303 	lsl.w	r3, r2, r3
 80013bc:	43db      	mvns	r3, r3
 80013be:	69ba      	ldr	r2, [r7, #24]
 80013c0:	4013      	ands	r3, r2
 80013c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f003 0203 	and.w	r2, r3, #3
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	005b      	lsls	r3, r3, #1
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	f000 80b4 	beq.w	8001556 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	60fb      	str	r3, [r7, #12]
 80013f2:	4b60      	ldr	r3, [pc, #384]	@ (8001574 <HAL_GPIO_Init+0x30c>)
 80013f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013f6:	4a5f      	ldr	r2, [pc, #380]	@ (8001574 <HAL_GPIO_Init+0x30c>)
 80013f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80013fe:	4b5d      	ldr	r3, [pc, #372]	@ (8001574 <HAL_GPIO_Init+0x30c>)
 8001400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001402:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001406:	60fb      	str	r3, [r7, #12]
 8001408:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800140a:	4a5b      	ldr	r2, [pc, #364]	@ (8001578 <HAL_GPIO_Init+0x310>)
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	089b      	lsrs	r3, r3, #2
 8001410:	3302      	adds	r3, #2
 8001412:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001416:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	f003 0303 	and.w	r3, r3, #3
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	220f      	movs	r2, #15
 8001422:	fa02 f303 	lsl.w	r3, r2, r3
 8001426:	43db      	mvns	r3, r3
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	4013      	ands	r3, r2
 800142c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4a52      	ldr	r2, [pc, #328]	@ (800157c <HAL_GPIO_Init+0x314>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d02b      	beq.n	800148e <HAL_GPIO_Init+0x226>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4a51      	ldr	r2, [pc, #324]	@ (8001580 <HAL_GPIO_Init+0x318>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d025      	beq.n	800148a <HAL_GPIO_Init+0x222>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4a50      	ldr	r2, [pc, #320]	@ (8001584 <HAL_GPIO_Init+0x31c>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d01f      	beq.n	8001486 <HAL_GPIO_Init+0x21e>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4a4f      	ldr	r2, [pc, #316]	@ (8001588 <HAL_GPIO_Init+0x320>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d019      	beq.n	8001482 <HAL_GPIO_Init+0x21a>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4a4e      	ldr	r2, [pc, #312]	@ (800158c <HAL_GPIO_Init+0x324>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d013      	beq.n	800147e <HAL_GPIO_Init+0x216>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4a4d      	ldr	r2, [pc, #308]	@ (8001590 <HAL_GPIO_Init+0x328>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d00d      	beq.n	800147a <HAL_GPIO_Init+0x212>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4a4c      	ldr	r2, [pc, #304]	@ (8001594 <HAL_GPIO_Init+0x32c>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d007      	beq.n	8001476 <HAL_GPIO_Init+0x20e>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4a4b      	ldr	r2, [pc, #300]	@ (8001598 <HAL_GPIO_Init+0x330>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d101      	bne.n	8001472 <HAL_GPIO_Init+0x20a>
 800146e:	2307      	movs	r3, #7
 8001470:	e00e      	b.n	8001490 <HAL_GPIO_Init+0x228>
 8001472:	2308      	movs	r3, #8
 8001474:	e00c      	b.n	8001490 <HAL_GPIO_Init+0x228>
 8001476:	2306      	movs	r3, #6
 8001478:	e00a      	b.n	8001490 <HAL_GPIO_Init+0x228>
 800147a:	2305      	movs	r3, #5
 800147c:	e008      	b.n	8001490 <HAL_GPIO_Init+0x228>
 800147e:	2304      	movs	r3, #4
 8001480:	e006      	b.n	8001490 <HAL_GPIO_Init+0x228>
 8001482:	2303      	movs	r3, #3
 8001484:	e004      	b.n	8001490 <HAL_GPIO_Init+0x228>
 8001486:	2302      	movs	r3, #2
 8001488:	e002      	b.n	8001490 <HAL_GPIO_Init+0x228>
 800148a:	2301      	movs	r3, #1
 800148c:	e000      	b.n	8001490 <HAL_GPIO_Init+0x228>
 800148e:	2300      	movs	r3, #0
 8001490:	69fa      	ldr	r2, [r7, #28]
 8001492:	f002 0203 	and.w	r2, r2, #3
 8001496:	0092      	lsls	r2, r2, #2
 8001498:	4093      	lsls	r3, r2
 800149a:	69ba      	ldr	r2, [r7, #24]
 800149c:	4313      	orrs	r3, r2
 800149e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014a0:	4935      	ldr	r1, [pc, #212]	@ (8001578 <HAL_GPIO_Init+0x310>)
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	089b      	lsrs	r3, r3, #2
 80014a6:	3302      	adds	r3, #2
 80014a8:	69ba      	ldr	r2, [r7, #24]
 80014aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014ae:	4b3b      	ldr	r3, [pc, #236]	@ (800159c <HAL_GPIO_Init+0x334>)
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	43db      	mvns	r3, r3
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	4013      	ands	r3, r2
 80014bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d003      	beq.n	80014d2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80014ca:	69ba      	ldr	r2, [r7, #24]
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	4313      	orrs	r3, r2
 80014d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014d2:	4a32      	ldr	r2, [pc, #200]	@ (800159c <HAL_GPIO_Init+0x334>)
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014d8:	4b30      	ldr	r3, [pc, #192]	@ (800159c <HAL_GPIO_Init+0x334>)
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	43db      	mvns	r3, r3
 80014e2:	69ba      	ldr	r2, [r7, #24]
 80014e4:	4013      	ands	r3, r2
 80014e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d003      	beq.n	80014fc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80014f4:	69ba      	ldr	r2, [r7, #24]
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	4313      	orrs	r3, r2
 80014fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014fc:	4a27      	ldr	r2, [pc, #156]	@ (800159c <HAL_GPIO_Init+0x334>)
 80014fe:	69bb      	ldr	r3, [r7, #24]
 8001500:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001502:	4b26      	ldr	r3, [pc, #152]	@ (800159c <HAL_GPIO_Init+0x334>)
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	43db      	mvns	r3, r3
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	4013      	ands	r3, r2
 8001510:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d003      	beq.n	8001526 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800151e:	69ba      	ldr	r2, [r7, #24]
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	4313      	orrs	r3, r2
 8001524:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001526:	4a1d      	ldr	r2, [pc, #116]	@ (800159c <HAL_GPIO_Init+0x334>)
 8001528:	69bb      	ldr	r3, [r7, #24]
 800152a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800152c:	4b1b      	ldr	r3, [pc, #108]	@ (800159c <HAL_GPIO_Init+0x334>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	43db      	mvns	r3, r3
 8001536:	69ba      	ldr	r2, [r7, #24]
 8001538:	4013      	ands	r3, r2
 800153a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001544:	2b00      	cmp	r3, #0
 8001546:	d003      	beq.n	8001550 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	4313      	orrs	r3, r2
 800154e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001550:	4a12      	ldr	r2, [pc, #72]	@ (800159c <HAL_GPIO_Init+0x334>)
 8001552:	69bb      	ldr	r3, [r7, #24]
 8001554:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	3301      	adds	r3, #1
 800155a:	61fb      	str	r3, [r7, #28]
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	2b0f      	cmp	r3, #15
 8001560:	f67f ae90 	bls.w	8001284 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001564:	bf00      	nop
 8001566:	bf00      	nop
 8001568:	3724      	adds	r7, #36	@ 0x24
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	40023800 	.word	0x40023800
 8001578:	40013800 	.word	0x40013800
 800157c:	40020000 	.word	0x40020000
 8001580:	40020400 	.word	0x40020400
 8001584:	40020800 	.word	0x40020800
 8001588:	40020c00 	.word	0x40020c00
 800158c:	40021000 	.word	0x40021000
 8001590:	40021400 	.word	0x40021400
 8001594:	40021800 	.word	0x40021800
 8001598:	40021c00 	.word	0x40021c00
 800159c:	40013c00 	.word	0x40013c00

080015a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	460b      	mov	r3, r1
 80015aa:	807b      	strh	r3, [r7, #2]
 80015ac:	4613      	mov	r3, r2
 80015ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015b0:	787b      	ldrb	r3, [r7, #1]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d003      	beq.n	80015be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015b6:	887a      	ldrh	r2, [r7, #2]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015bc:	e003      	b.n	80015c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015be:	887b      	ldrh	r3, [r7, #2]
 80015c0:	041a      	lsls	r2, r3, #16
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	619a      	str	r2, [r3, #24]
}
 80015c6:	bf00      	nop
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
	...

080015d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b086      	sub	sp, #24
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d101      	bne.n	80015e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e267      	b.n	8001ab6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0301 	and.w	r3, r3, #1
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d075      	beq.n	80016de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80015f2:	4b88      	ldr	r3, [pc, #544]	@ (8001814 <HAL_RCC_OscConfig+0x240>)
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	f003 030c 	and.w	r3, r3, #12
 80015fa:	2b04      	cmp	r3, #4
 80015fc:	d00c      	beq.n	8001618 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015fe:	4b85      	ldr	r3, [pc, #532]	@ (8001814 <HAL_RCC_OscConfig+0x240>)
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001606:	2b08      	cmp	r3, #8
 8001608:	d112      	bne.n	8001630 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800160a:	4b82      	ldr	r3, [pc, #520]	@ (8001814 <HAL_RCC_OscConfig+0x240>)
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001612:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001616:	d10b      	bne.n	8001630 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001618:	4b7e      	ldr	r3, [pc, #504]	@ (8001814 <HAL_RCC_OscConfig+0x240>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001620:	2b00      	cmp	r3, #0
 8001622:	d05b      	beq.n	80016dc <HAL_RCC_OscConfig+0x108>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d157      	bne.n	80016dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	e242      	b.n	8001ab6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001638:	d106      	bne.n	8001648 <HAL_RCC_OscConfig+0x74>
 800163a:	4b76      	ldr	r3, [pc, #472]	@ (8001814 <HAL_RCC_OscConfig+0x240>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a75      	ldr	r2, [pc, #468]	@ (8001814 <HAL_RCC_OscConfig+0x240>)
 8001640:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001644:	6013      	str	r3, [r2, #0]
 8001646:	e01d      	b.n	8001684 <HAL_RCC_OscConfig+0xb0>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001650:	d10c      	bne.n	800166c <HAL_RCC_OscConfig+0x98>
 8001652:	4b70      	ldr	r3, [pc, #448]	@ (8001814 <HAL_RCC_OscConfig+0x240>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a6f      	ldr	r2, [pc, #444]	@ (8001814 <HAL_RCC_OscConfig+0x240>)
 8001658:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800165c:	6013      	str	r3, [r2, #0]
 800165e:	4b6d      	ldr	r3, [pc, #436]	@ (8001814 <HAL_RCC_OscConfig+0x240>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a6c      	ldr	r2, [pc, #432]	@ (8001814 <HAL_RCC_OscConfig+0x240>)
 8001664:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001668:	6013      	str	r3, [r2, #0]
 800166a:	e00b      	b.n	8001684 <HAL_RCC_OscConfig+0xb0>
 800166c:	4b69      	ldr	r3, [pc, #420]	@ (8001814 <HAL_RCC_OscConfig+0x240>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a68      	ldr	r2, [pc, #416]	@ (8001814 <HAL_RCC_OscConfig+0x240>)
 8001672:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001676:	6013      	str	r3, [r2, #0]
 8001678:	4b66      	ldr	r3, [pc, #408]	@ (8001814 <HAL_RCC_OscConfig+0x240>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a65      	ldr	r2, [pc, #404]	@ (8001814 <HAL_RCC_OscConfig+0x240>)
 800167e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001682:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d013      	beq.n	80016b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800168c:	f7ff fcd6 	bl	800103c <HAL_GetTick>
 8001690:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001692:	e008      	b.n	80016a6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001694:	f7ff fcd2 	bl	800103c <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	2b64      	cmp	r3, #100	@ 0x64
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e207      	b.n	8001ab6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016a6:	4b5b      	ldr	r3, [pc, #364]	@ (8001814 <HAL_RCC_OscConfig+0x240>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d0f0      	beq.n	8001694 <HAL_RCC_OscConfig+0xc0>
 80016b2:	e014      	b.n	80016de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b4:	f7ff fcc2 	bl	800103c <HAL_GetTick>
 80016b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ba:	e008      	b.n	80016ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016bc:	f7ff fcbe 	bl	800103c <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	2b64      	cmp	r3, #100	@ 0x64
 80016c8:	d901      	bls.n	80016ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e1f3      	b.n	8001ab6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ce:	4b51      	ldr	r3, [pc, #324]	@ (8001814 <HAL_RCC_OscConfig+0x240>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d1f0      	bne.n	80016bc <HAL_RCC_OscConfig+0xe8>
 80016da:	e000      	b.n	80016de <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0302 	and.w	r3, r3, #2
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d063      	beq.n	80017b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80016ea:	4b4a      	ldr	r3, [pc, #296]	@ (8001814 <HAL_RCC_OscConfig+0x240>)
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	f003 030c 	and.w	r3, r3, #12
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d00b      	beq.n	800170e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016f6:	4b47      	ldr	r3, [pc, #284]	@ (8001814 <HAL_RCC_OscConfig+0x240>)
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80016fe:	2b08      	cmp	r3, #8
 8001700:	d11c      	bne.n	800173c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001702:	4b44      	ldr	r3, [pc, #272]	@ (8001814 <HAL_RCC_OscConfig+0x240>)
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d116      	bne.n	800173c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800170e:	4b41      	ldr	r3, [pc, #260]	@ (8001814 <HAL_RCC_OscConfig+0x240>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0302 	and.w	r3, r3, #2
 8001716:	2b00      	cmp	r3, #0
 8001718:	d005      	beq.n	8001726 <HAL_RCC_OscConfig+0x152>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	68db      	ldr	r3, [r3, #12]
 800171e:	2b01      	cmp	r3, #1
 8001720:	d001      	beq.n	8001726 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e1c7      	b.n	8001ab6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001726:	4b3b      	ldr	r3, [pc, #236]	@ (8001814 <HAL_RCC_OscConfig+0x240>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	691b      	ldr	r3, [r3, #16]
 8001732:	00db      	lsls	r3, r3, #3
 8001734:	4937      	ldr	r1, [pc, #220]	@ (8001814 <HAL_RCC_OscConfig+0x240>)
 8001736:	4313      	orrs	r3, r2
 8001738:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800173a:	e03a      	b.n	80017b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d020      	beq.n	8001786 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001744:	4b34      	ldr	r3, [pc, #208]	@ (8001818 <HAL_RCC_OscConfig+0x244>)
 8001746:	2201      	movs	r2, #1
 8001748:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800174a:	f7ff fc77 	bl	800103c <HAL_GetTick>
 800174e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001750:	e008      	b.n	8001764 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001752:	f7ff fc73 	bl	800103c <HAL_GetTick>
 8001756:	4602      	mov	r2, r0
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	2b02      	cmp	r3, #2
 800175e:	d901      	bls.n	8001764 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001760:	2303      	movs	r3, #3
 8001762:	e1a8      	b.n	8001ab6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001764:	4b2b      	ldr	r3, [pc, #172]	@ (8001814 <HAL_RCC_OscConfig+0x240>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 0302 	and.w	r3, r3, #2
 800176c:	2b00      	cmp	r3, #0
 800176e:	d0f0      	beq.n	8001752 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001770:	4b28      	ldr	r3, [pc, #160]	@ (8001814 <HAL_RCC_OscConfig+0x240>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	691b      	ldr	r3, [r3, #16]
 800177c:	00db      	lsls	r3, r3, #3
 800177e:	4925      	ldr	r1, [pc, #148]	@ (8001814 <HAL_RCC_OscConfig+0x240>)
 8001780:	4313      	orrs	r3, r2
 8001782:	600b      	str	r3, [r1, #0]
 8001784:	e015      	b.n	80017b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001786:	4b24      	ldr	r3, [pc, #144]	@ (8001818 <HAL_RCC_OscConfig+0x244>)
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800178c:	f7ff fc56 	bl	800103c <HAL_GetTick>
 8001790:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001792:	e008      	b.n	80017a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001794:	f7ff fc52 	bl	800103c <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d901      	bls.n	80017a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e187      	b.n	8001ab6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017a6:	4b1b      	ldr	r3, [pc, #108]	@ (8001814 <HAL_RCC_OscConfig+0x240>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0302 	and.w	r3, r3, #2
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d1f0      	bne.n	8001794 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0308 	and.w	r3, r3, #8
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d036      	beq.n	800182c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	695b      	ldr	r3, [r3, #20]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d016      	beq.n	80017f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017c6:	4b15      	ldr	r3, [pc, #84]	@ (800181c <HAL_RCC_OscConfig+0x248>)
 80017c8:	2201      	movs	r2, #1
 80017ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017cc:	f7ff fc36 	bl	800103c <HAL_GetTick>
 80017d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017d2:	e008      	b.n	80017e6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017d4:	f7ff fc32 	bl	800103c <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d901      	bls.n	80017e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e167      	b.n	8001ab6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001814 <HAL_RCC_OscConfig+0x240>)
 80017e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80017ea:	f003 0302 	and.w	r3, r3, #2
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d0f0      	beq.n	80017d4 <HAL_RCC_OscConfig+0x200>
 80017f2:	e01b      	b.n	800182c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017f4:	4b09      	ldr	r3, [pc, #36]	@ (800181c <HAL_RCC_OscConfig+0x248>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017fa:	f7ff fc1f 	bl	800103c <HAL_GetTick>
 80017fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001800:	e00e      	b.n	8001820 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001802:	f7ff fc1b 	bl	800103c <HAL_GetTick>
 8001806:	4602      	mov	r2, r0
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	2b02      	cmp	r3, #2
 800180e:	d907      	bls.n	8001820 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001810:	2303      	movs	r3, #3
 8001812:	e150      	b.n	8001ab6 <HAL_RCC_OscConfig+0x4e2>
 8001814:	40023800 	.word	0x40023800
 8001818:	42470000 	.word	0x42470000
 800181c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001820:	4b88      	ldr	r3, [pc, #544]	@ (8001a44 <HAL_RCC_OscConfig+0x470>)
 8001822:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001824:	f003 0302 	and.w	r3, r3, #2
 8001828:	2b00      	cmp	r3, #0
 800182a:	d1ea      	bne.n	8001802 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 0304 	and.w	r3, r3, #4
 8001834:	2b00      	cmp	r3, #0
 8001836:	f000 8097 	beq.w	8001968 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800183a:	2300      	movs	r3, #0
 800183c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800183e:	4b81      	ldr	r3, [pc, #516]	@ (8001a44 <HAL_RCC_OscConfig+0x470>)
 8001840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001842:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d10f      	bne.n	800186a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800184a:	2300      	movs	r3, #0
 800184c:	60bb      	str	r3, [r7, #8]
 800184e:	4b7d      	ldr	r3, [pc, #500]	@ (8001a44 <HAL_RCC_OscConfig+0x470>)
 8001850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001852:	4a7c      	ldr	r2, [pc, #496]	@ (8001a44 <HAL_RCC_OscConfig+0x470>)
 8001854:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001858:	6413      	str	r3, [r2, #64]	@ 0x40
 800185a:	4b7a      	ldr	r3, [pc, #488]	@ (8001a44 <HAL_RCC_OscConfig+0x470>)
 800185c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800185e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001862:	60bb      	str	r3, [r7, #8]
 8001864:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001866:	2301      	movs	r3, #1
 8001868:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800186a:	4b77      	ldr	r3, [pc, #476]	@ (8001a48 <HAL_RCC_OscConfig+0x474>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001872:	2b00      	cmp	r3, #0
 8001874:	d118      	bne.n	80018a8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001876:	4b74      	ldr	r3, [pc, #464]	@ (8001a48 <HAL_RCC_OscConfig+0x474>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a73      	ldr	r2, [pc, #460]	@ (8001a48 <HAL_RCC_OscConfig+0x474>)
 800187c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001880:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001882:	f7ff fbdb 	bl	800103c <HAL_GetTick>
 8001886:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001888:	e008      	b.n	800189c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800188a:	f7ff fbd7 	bl	800103c <HAL_GetTick>
 800188e:	4602      	mov	r2, r0
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	2b02      	cmp	r3, #2
 8001896:	d901      	bls.n	800189c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001898:	2303      	movs	r3, #3
 800189a:	e10c      	b.n	8001ab6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800189c:	4b6a      	ldr	r3, [pc, #424]	@ (8001a48 <HAL_RCC_OscConfig+0x474>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d0f0      	beq.n	800188a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d106      	bne.n	80018be <HAL_RCC_OscConfig+0x2ea>
 80018b0:	4b64      	ldr	r3, [pc, #400]	@ (8001a44 <HAL_RCC_OscConfig+0x470>)
 80018b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018b4:	4a63      	ldr	r2, [pc, #396]	@ (8001a44 <HAL_RCC_OscConfig+0x470>)
 80018b6:	f043 0301 	orr.w	r3, r3, #1
 80018ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80018bc:	e01c      	b.n	80018f8 <HAL_RCC_OscConfig+0x324>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	2b05      	cmp	r3, #5
 80018c4:	d10c      	bne.n	80018e0 <HAL_RCC_OscConfig+0x30c>
 80018c6:	4b5f      	ldr	r3, [pc, #380]	@ (8001a44 <HAL_RCC_OscConfig+0x470>)
 80018c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018ca:	4a5e      	ldr	r2, [pc, #376]	@ (8001a44 <HAL_RCC_OscConfig+0x470>)
 80018cc:	f043 0304 	orr.w	r3, r3, #4
 80018d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80018d2:	4b5c      	ldr	r3, [pc, #368]	@ (8001a44 <HAL_RCC_OscConfig+0x470>)
 80018d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018d6:	4a5b      	ldr	r2, [pc, #364]	@ (8001a44 <HAL_RCC_OscConfig+0x470>)
 80018d8:	f043 0301 	orr.w	r3, r3, #1
 80018dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80018de:	e00b      	b.n	80018f8 <HAL_RCC_OscConfig+0x324>
 80018e0:	4b58      	ldr	r3, [pc, #352]	@ (8001a44 <HAL_RCC_OscConfig+0x470>)
 80018e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018e4:	4a57      	ldr	r2, [pc, #348]	@ (8001a44 <HAL_RCC_OscConfig+0x470>)
 80018e6:	f023 0301 	bic.w	r3, r3, #1
 80018ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80018ec:	4b55      	ldr	r3, [pc, #340]	@ (8001a44 <HAL_RCC_OscConfig+0x470>)
 80018ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018f0:	4a54      	ldr	r2, [pc, #336]	@ (8001a44 <HAL_RCC_OscConfig+0x470>)
 80018f2:	f023 0304 	bic.w	r3, r3, #4
 80018f6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d015      	beq.n	800192c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001900:	f7ff fb9c 	bl	800103c <HAL_GetTick>
 8001904:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001906:	e00a      	b.n	800191e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001908:	f7ff fb98 	bl	800103c <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001916:	4293      	cmp	r3, r2
 8001918:	d901      	bls.n	800191e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e0cb      	b.n	8001ab6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800191e:	4b49      	ldr	r3, [pc, #292]	@ (8001a44 <HAL_RCC_OscConfig+0x470>)
 8001920:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001922:	f003 0302 	and.w	r3, r3, #2
 8001926:	2b00      	cmp	r3, #0
 8001928:	d0ee      	beq.n	8001908 <HAL_RCC_OscConfig+0x334>
 800192a:	e014      	b.n	8001956 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800192c:	f7ff fb86 	bl	800103c <HAL_GetTick>
 8001930:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001932:	e00a      	b.n	800194a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001934:	f7ff fb82 	bl	800103c <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001942:	4293      	cmp	r3, r2
 8001944:	d901      	bls.n	800194a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e0b5      	b.n	8001ab6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800194a:	4b3e      	ldr	r3, [pc, #248]	@ (8001a44 <HAL_RCC_OscConfig+0x470>)
 800194c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	2b00      	cmp	r3, #0
 8001954:	d1ee      	bne.n	8001934 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001956:	7dfb      	ldrb	r3, [r7, #23]
 8001958:	2b01      	cmp	r3, #1
 800195a:	d105      	bne.n	8001968 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800195c:	4b39      	ldr	r3, [pc, #228]	@ (8001a44 <HAL_RCC_OscConfig+0x470>)
 800195e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001960:	4a38      	ldr	r2, [pc, #224]	@ (8001a44 <HAL_RCC_OscConfig+0x470>)
 8001962:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001966:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	699b      	ldr	r3, [r3, #24]
 800196c:	2b00      	cmp	r3, #0
 800196e:	f000 80a1 	beq.w	8001ab4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001972:	4b34      	ldr	r3, [pc, #208]	@ (8001a44 <HAL_RCC_OscConfig+0x470>)
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	f003 030c 	and.w	r3, r3, #12
 800197a:	2b08      	cmp	r3, #8
 800197c:	d05c      	beq.n	8001a38 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	699b      	ldr	r3, [r3, #24]
 8001982:	2b02      	cmp	r3, #2
 8001984:	d141      	bne.n	8001a0a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001986:	4b31      	ldr	r3, [pc, #196]	@ (8001a4c <HAL_RCC_OscConfig+0x478>)
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800198c:	f7ff fb56 	bl	800103c <HAL_GetTick>
 8001990:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001992:	e008      	b.n	80019a6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001994:	f7ff fb52 	bl	800103c <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e087      	b.n	8001ab6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019a6:	4b27      	ldr	r3, [pc, #156]	@ (8001a44 <HAL_RCC_OscConfig+0x470>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d1f0      	bne.n	8001994 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	69da      	ldr	r2, [r3, #28]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6a1b      	ldr	r3, [r3, #32]
 80019ba:	431a      	orrs	r2, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019c0:	019b      	lsls	r3, r3, #6
 80019c2:	431a      	orrs	r2, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019c8:	085b      	lsrs	r3, r3, #1
 80019ca:	3b01      	subs	r3, #1
 80019cc:	041b      	lsls	r3, r3, #16
 80019ce:	431a      	orrs	r2, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019d4:	061b      	lsls	r3, r3, #24
 80019d6:	491b      	ldr	r1, [pc, #108]	@ (8001a44 <HAL_RCC_OscConfig+0x470>)
 80019d8:	4313      	orrs	r3, r2
 80019da:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019dc:	4b1b      	ldr	r3, [pc, #108]	@ (8001a4c <HAL_RCC_OscConfig+0x478>)
 80019de:	2201      	movs	r2, #1
 80019e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e2:	f7ff fb2b 	bl	800103c <HAL_GetTick>
 80019e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019e8:	e008      	b.n	80019fc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019ea:	f7ff fb27 	bl	800103c <HAL_GetTick>
 80019ee:	4602      	mov	r2, r0
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d901      	bls.n	80019fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80019f8:	2303      	movs	r3, #3
 80019fa:	e05c      	b.n	8001ab6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019fc:	4b11      	ldr	r3, [pc, #68]	@ (8001a44 <HAL_RCC_OscConfig+0x470>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d0f0      	beq.n	80019ea <HAL_RCC_OscConfig+0x416>
 8001a08:	e054      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a0a:	4b10      	ldr	r3, [pc, #64]	@ (8001a4c <HAL_RCC_OscConfig+0x478>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a10:	f7ff fb14 	bl	800103c <HAL_GetTick>
 8001a14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a16:	e008      	b.n	8001a2a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a18:	f7ff fb10 	bl	800103c <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d901      	bls.n	8001a2a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001a26:	2303      	movs	r3, #3
 8001a28:	e045      	b.n	8001ab6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a2a:	4b06      	ldr	r3, [pc, #24]	@ (8001a44 <HAL_RCC_OscConfig+0x470>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d1f0      	bne.n	8001a18 <HAL_RCC_OscConfig+0x444>
 8001a36:	e03d      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	699b      	ldr	r3, [r3, #24]
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d107      	bne.n	8001a50 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e038      	b.n	8001ab6 <HAL_RCC_OscConfig+0x4e2>
 8001a44:	40023800 	.word	0x40023800
 8001a48:	40007000 	.word	0x40007000
 8001a4c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a50:	4b1b      	ldr	r3, [pc, #108]	@ (8001ac0 <HAL_RCC_OscConfig+0x4ec>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	699b      	ldr	r3, [r3, #24]
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d028      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d121      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d11a      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a7a:	68fa      	ldr	r2, [r7, #12]
 8001a7c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001a80:	4013      	ands	r3, r2
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001a86:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d111      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a96:	085b      	lsrs	r3, r3, #1
 8001a98:	3b01      	subs	r3, #1
 8001a9a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d107      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aaa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d001      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e000      	b.n	8001ab6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3718      	adds	r7, #24
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	40023800 	.word	0x40023800

08001ac4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d101      	bne.n	8001ad8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e0cc      	b.n	8001c72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ad8:	4b68      	ldr	r3, [pc, #416]	@ (8001c7c <HAL_RCC_ClockConfig+0x1b8>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0307 	and.w	r3, r3, #7
 8001ae0:	683a      	ldr	r2, [r7, #0]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d90c      	bls.n	8001b00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ae6:	4b65      	ldr	r3, [pc, #404]	@ (8001c7c <HAL_RCC_ClockConfig+0x1b8>)
 8001ae8:	683a      	ldr	r2, [r7, #0]
 8001aea:	b2d2      	uxtb	r2, r2
 8001aec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aee:	4b63      	ldr	r3, [pc, #396]	@ (8001c7c <HAL_RCC_ClockConfig+0x1b8>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0307 	and.w	r3, r3, #7
 8001af6:	683a      	ldr	r2, [r7, #0]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d001      	beq.n	8001b00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e0b8      	b.n	8001c72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0302 	and.w	r3, r3, #2
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d020      	beq.n	8001b4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0304 	and.w	r3, r3, #4
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d005      	beq.n	8001b24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b18:	4b59      	ldr	r3, [pc, #356]	@ (8001c80 <HAL_RCC_ClockConfig+0x1bc>)
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	4a58      	ldr	r2, [pc, #352]	@ (8001c80 <HAL_RCC_ClockConfig+0x1bc>)
 8001b1e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001b22:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0308 	and.w	r3, r3, #8
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d005      	beq.n	8001b3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b30:	4b53      	ldr	r3, [pc, #332]	@ (8001c80 <HAL_RCC_ClockConfig+0x1bc>)
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	4a52      	ldr	r2, [pc, #328]	@ (8001c80 <HAL_RCC_ClockConfig+0x1bc>)
 8001b36:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001b3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b3c:	4b50      	ldr	r3, [pc, #320]	@ (8001c80 <HAL_RCC_ClockConfig+0x1bc>)
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	494d      	ldr	r1, [pc, #308]	@ (8001c80 <HAL_RCC_ClockConfig+0x1bc>)
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0301 	and.w	r3, r3, #1
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d044      	beq.n	8001be4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d107      	bne.n	8001b72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b62:	4b47      	ldr	r3, [pc, #284]	@ (8001c80 <HAL_RCC_ClockConfig+0x1bc>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d119      	bne.n	8001ba2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e07f      	b.n	8001c72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d003      	beq.n	8001b82 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b7e:	2b03      	cmp	r3, #3
 8001b80:	d107      	bne.n	8001b92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b82:	4b3f      	ldr	r3, [pc, #252]	@ (8001c80 <HAL_RCC_ClockConfig+0x1bc>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d109      	bne.n	8001ba2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e06f      	b.n	8001c72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b92:	4b3b      	ldr	r3, [pc, #236]	@ (8001c80 <HAL_RCC_ClockConfig+0x1bc>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d101      	bne.n	8001ba2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e067      	b.n	8001c72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ba2:	4b37      	ldr	r3, [pc, #220]	@ (8001c80 <HAL_RCC_ClockConfig+0x1bc>)
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	f023 0203 	bic.w	r2, r3, #3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	4934      	ldr	r1, [pc, #208]	@ (8001c80 <HAL_RCC_ClockConfig+0x1bc>)
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bb4:	f7ff fa42 	bl	800103c <HAL_GetTick>
 8001bb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bba:	e00a      	b.n	8001bd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bbc:	f7ff fa3e 	bl	800103c <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d901      	bls.n	8001bd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e04f      	b.n	8001c72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bd2:	4b2b      	ldr	r3, [pc, #172]	@ (8001c80 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	f003 020c 	and.w	r2, r3, #12
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d1eb      	bne.n	8001bbc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001be4:	4b25      	ldr	r3, [pc, #148]	@ (8001c7c <HAL_RCC_ClockConfig+0x1b8>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 0307 	and.w	r3, r3, #7
 8001bec:	683a      	ldr	r2, [r7, #0]
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d20c      	bcs.n	8001c0c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bf2:	4b22      	ldr	r3, [pc, #136]	@ (8001c7c <HAL_RCC_ClockConfig+0x1b8>)
 8001bf4:	683a      	ldr	r2, [r7, #0]
 8001bf6:	b2d2      	uxtb	r2, r2
 8001bf8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bfa:	4b20      	ldr	r3, [pc, #128]	@ (8001c7c <HAL_RCC_ClockConfig+0x1b8>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0307 	and.w	r3, r3, #7
 8001c02:	683a      	ldr	r2, [r7, #0]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d001      	beq.n	8001c0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e032      	b.n	8001c72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0304 	and.w	r3, r3, #4
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d008      	beq.n	8001c2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c18:	4b19      	ldr	r3, [pc, #100]	@ (8001c80 <HAL_RCC_ClockConfig+0x1bc>)
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	4916      	ldr	r1, [pc, #88]	@ (8001c80 <HAL_RCC_ClockConfig+0x1bc>)
 8001c26:	4313      	orrs	r3, r2
 8001c28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0308 	and.w	r3, r3, #8
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d009      	beq.n	8001c4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c36:	4b12      	ldr	r3, [pc, #72]	@ (8001c80 <HAL_RCC_ClockConfig+0x1bc>)
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	691b      	ldr	r3, [r3, #16]
 8001c42:	00db      	lsls	r3, r3, #3
 8001c44:	490e      	ldr	r1, [pc, #56]	@ (8001c80 <HAL_RCC_ClockConfig+0x1bc>)
 8001c46:	4313      	orrs	r3, r2
 8001c48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c4a:	f000 f821 	bl	8001c90 <HAL_RCC_GetSysClockFreq>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	4b0b      	ldr	r3, [pc, #44]	@ (8001c80 <HAL_RCC_ClockConfig+0x1bc>)
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	091b      	lsrs	r3, r3, #4
 8001c56:	f003 030f 	and.w	r3, r3, #15
 8001c5a:	490a      	ldr	r1, [pc, #40]	@ (8001c84 <HAL_RCC_ClockConfig+0x1c0>)
 8001c5c:	5ccb      	ldrb	r3, [r1, r3]
 8001c5e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c62:	4a09      	ldr	r2, [pc, #36]	@ (8001c88 <HAL_RCC_ClockConfig+0x1c4>)
 8001c64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001c66:	4b09      	ldr	r3, [pc, #36]	@ (8001c8c <HAL_RCC_ClockConfig+0x1c8>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7ff f9a2 	bl	8000fb4 <HAL_InitTick>

  return HAL_OK;
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3710      	adds	r7, #16
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	40023c00 	.word	0x40023c00
 8001c80:	40023800 	.word	0x40023800
 8001c84:	08002ab0 	.word	0x08002ab0
 8001c88:	2000000c 	.word	0x2000000c
 8001c8c:	20000010 	.word	0x20000010

08001c90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c94:	b094      	sub	sp, #80	@ 0x50
 8001c96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ca8:	4b79      	ldr	r3, [pc, #484]	@ (8001e90 <HAL_RCC_GetSysClockFreq+0x200>)
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	f003 030c 	and.w	r3, r3, #12
 8001cb0:	2b08      	cmp	r3, #8
 8001cb2:	d00d      	beq.n	8001cd0 <HAL_RCC_GetSysClockFreq+0x40>
 8001cb4:	2b08      	cmp	r3, #8
 8001cb6:	f200 80e1 	bhi.w	8001e7c <HAL_RCC_GetSysClockFreq+0x1ec>
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d002      	beq.n	8001cc4 <HAL_RCC_GetSysClockFreq+0x34>
 8001cbe:	2b04      	cmp	r3, #4
 8001cc0:	d003      	beq.n	8001cca <HAL_RCC_GetSysClockFreq+0x3a>
 8001cc2:	e0db      	b.n	8001e7c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001cc4:	4b73      	ldr	r3, [pc, #460]	@ (8001e94 <HAL_RCC_GetSysClockFreq+0x204>)
 8001cc6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001cc8:	e0db      	b.n	8001e82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001cca:	4b73      	ldr	r3, [pc, #460]	@ (8001e98 <HAL_RCC_GetSysClockFreq+0x208>)
 8001ccc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001cce:	e0d8      	b.n	8001e82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cd0:	4b6f      	ldr	r3, [pc, #444]	@ (8001e90 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001cd8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001cda:	4b6d      	ldr	r3, [pc, #436]	@ (8001e90 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d063      	beq.n	8001dae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ce6:	4b6a      	ldr	r3, [pc, #424]	@ (8001e90 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	099b      	lsrs	r3, r3, #6
 8001cec:	2200      	movs	r2, #0
 8001cee:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001cf0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001cf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001cf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cf8:	633b      	str	r3, [r7, #48]	@ 0x30
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	637b      	str	r3, [r7, #52]	@ 0x34
 8001cfe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001d02:	4622      	mov	r2, r4
 8001d04:	462b      	mov	r3, r5
 8001d06:	f04f 0000 	mov.w	r0, #0
 8001d0a:	f04f 0100 	mov.w	r1, #0
 8001d0e:	0159      	lsls	r1, r3, #5
 8001d10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d14:	0150      	lsls	r0, r2, #5
 8001d16:	4602      	mov	r2, r0
 8001d18:	460b      	mov	r3, r1
 8001d1a:	4621      	mov	r1, r4
 8001d1c:	1a51      	subs	r1, r2, r1
 8001d1e:	6139      	str	r1, [r7, #16]
 8001d20:	4629      	mov	r1, r5
 8001d22:	eb63 0301 	sbc.w	r3, r3, r1
 8001d26:	617b      	str	r3, [r7, #20]
 8001d28:	f04f 0200 	mov.w	r2, #0
 8001d2c:	f04f 0300 	mov.w	r3, #0
 8001d30:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001d34:	4659      	mov	r1, fp
 8001d36:	018b      	lsls	r3, r1, #6
 8001d38:	4651      	mov	r1, sl
 8001d3a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d3e:	4651      	mov	r1, sl
 8001d40:	018a      	lsls	r2, r1, #6
 8001d42:	4651      	mov	r1, sl
 8001d44:	ebb2 0801 	subs.w	r8, r2, r1
 8001d48:	4659      	mov	r1, fp
 8001d4a:	eb63 0901 	sbc.w	r9, r3, r1
 8001d4e:	f04f 0200 	mov.w	r2, #0
 8001d52:	f04f 0300 	mov.w	r3, #0
 8001d56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d62:	4690      	mov	r8, r2
 8001d64:	4699      	mov	r9, r3
 8001d66:	4623      	mov	r3, r4
 8001d68:	eb18 0303 	adds.w	r3, r8, r3
 8001d6c:	60bb      	str	r3, [r7, #8]
 8001d6e:	462b      	mov	r3, r5
 8001d70:	eb49 0303 	adc.w	r3, r9, r3
 8001d74:	60fb      	str	r3, [r7, #12]
 8001d76:	f04f 0200 	mov.w	r2, #0
 8001d7a:	f04f 0300 	mov.w	r3, #0
 8001d7e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001d82:	4629      	mov	r1, r5
 8001d84:	024b      	lsls	r3, r1, #9
 8001d86:	4621      	mov	r1, r4
 8001d88:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001d8c:	4621      	mov	r1, r4
 8001d8e:	024a      	lsls	r2, r1, #9
 8001d90:	4610      	mov	r0, r2
 8001d92:	4619      	mov	r1, r3
 8001d94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d96:	2200      	movs	r2, #0
 8001d98:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d9a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001d9c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001da0:	f7fe fa12 	bl	80001c8 <__aeabi_uldivmod>
 8001da4:	4602      	mov	r2, r0
 8001da6:	460b      	mov	r3, r1
 8001da8:	4613      	mov	r3, r2
 8001daa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001dac:	e058      	b.n	8001e60 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dae:	4b38      	ldr	r3, [pc, #224]	@ (8001e90 <HAL_RCC_GetSysClockFreq+0x200>)
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	099b      	lsrs	r3, r3, #6
 8001db4:	2200      	movs	r2, #0
 8001db6:	4618      	mov	r0, r3
 8001db8:	4611      	mov	r1, r2
 8001dba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001dbe:	623b      	str	r3, [r7, #32]
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001dc4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001dc8:	4642      	mov	r2, r8
 8001dca:	464b      	mov	r3, r9
 8001dcc:	f04f 0000 	mov.w	r0, #0
 8001dd0:	f04f 0100 	mov.w	r1, #0
 8001dd4:	0159      	lsls	r1, r3, #5
 8001dd6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001dda:	0150      	lsls	r0, r2, #5
 8001ddc:	4602      	mov	r2, r0
 8001dde:	460b      	mov	r3, r1
 8001de0:	4641      	mov	r1, r8
 8001de2:	ebb2 0a01 	subs.w	sl, r2, r1
 8001de6:	4649      	mov	r1, r9
 8001de8:	eb63 0b01 	sbc.w	fp, r3, r1
 8001dec:	f04f 0200 	mov.w	r2, #0
 8001df0:	f04f 0300 	mov.w	r3, #0
 8001df4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001df8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001dfc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001e00:	ebb2 040a 	subs.w	r4, r2, sl
 8001e04:	eb63 050b 	sbc.w	r5, r3, fp
 8001e08:	f04f 0200 	mov.w	r2, #0
 8001e0c:	f04f 0300 	mov.w	r3, #0
 8001e10:	00eb      	lsls	r3, r5, #3
 8001e12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e16:	00e2      	lsls	r2, r4, #3
 8001e18:	4614      	mov	r4, r2
 8001e1a:	461d      	mov	r5, r3
 8001e1c:	4643      	mov	r3, r8
 8001e1e:	18e3      	adds	r3, r4, r3
 8001e20:	603b      	str	r3, [r7, #0]
 8001e22:	464b      	mov	r3, r9
 8001e24:	eb45 0303 	adc.w	r3, r5, r3
 8001e28:	607b      	str	r3, [r7, #4]
 8001e2a:	f04f 0200 	mov.w	r2, #0
 8001e2e:	f04f 0300 	mov.w	r3, #0
 8001e32:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e36:	4629      	mov	r1, r5
 8001e38:	028b      	lsls	r3, r1, #10
 8001e3a:	4621      	mov	r1, r4
 8001e3c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e40:	4621      	mov	r1, r4
 8001e42:	028a      	lsls	r2, r1, #10
 8001e44:	4610      	mov	r0, r2
 8001e46:	4619      	mov	r1, r3
 8001e48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	61bb      	str	r3, [r7, #24]
 8001e4e:	61fa      	str	r2, [r7, #28]
 8001e50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e54:	f7fe f9b8 	bl	80001c8 <__aeabi_uldivmod>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	460b      	mov	r3, r1
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001e60:	4b0b      	ldr	r3, [pc, #44]	@ (8001e90 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	0c1b      	lsrs	r3, r3, #16
 8001e66:	f003 0303 	and.w	r3, r3, #3
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001e70:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001e72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e78:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e7a:	e002      	b.n	8001e82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e7c:	4b05      	ldr	r3, [pc, #20]	@ (8001e94 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e7e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3750      	adds	r7, #80	@ 0x50
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e8e:	bf00      	nop
 8001e90:	40023800 	.word	0x40023800
 8001e94:	00f42400 	.word	0x00f42400
 8001e98:	007a1200 	.word	0x007a1200

08001e9c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d101      	bne.n	8001eae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e07b      	b.n	8001fa6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d108      	bne.n	8001ec8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001ebe:	d009      	beq.n	8001ed4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	61da      	str	r2, [r3, #28]
 8001ec6:	e005      	b.n	8001ed4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d106      	bne.n	8001ef4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f7fe ff6a 	bl	8000dc8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2202      	movs	r2, #2
 8001ef8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001f0a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001f1c:	431a      	orrs	r2, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	68db      	ldr	r3, [r3, #12]
 8001f22:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f26:	431a      	orrs	r2, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	691b      	ldr	r3, [r3, #16]
 8001f2c:	f003 0302 	and.w	r3, r3, #2
 8001f30:	431a      	orrs	r2, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	695b      	ldr	r3, [r3, #20]
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	431a      	orrs	r2, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	699b      	ldr	r3, [r3, #24]
 8001f40:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f44:	431a      	orrs	r2, r3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	69db      	ldr	r3, [r3, #28]
 8001f4a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001f4e:	431a      	orrs	r2, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6a1b      	ldr	r3, [r3, #32]
 8001f54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f58:	ea42 0103 	orr.w	r1, r2, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f60:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	430a      	orrs	r2, r1
 8001f6a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	699b      	ldr	r3, [r3, #24]
 8001f70:	0c1b      	lsrs	r3, r3, #16
 8001f72:	f003 0104 	and.w	r1, r3, #4
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f7a:	f003 0210 	and.w	r2, r3, #16
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	430a      	orrs	r2, r1
 8001f84:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	69da      	ldr	r2, [r3, #28]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f94:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}

08001fae <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b088      	sub	sp, #32
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	60f8      	str	r0, [r7, #12]
 8001fb6:	60b9      	str	r1, [r7, #8]
 8001fb8:	603b      	str	r3, [r7, #0]
 8001fba:	4613      	mov	r3, r2
 8001fbc:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001fbe:	f7ff f83d 	bl	800103c <HAL_GetTick>
 8001fc2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8001fc4:	88fb      	ldrh	r3, [r7, #6]
 8001fc6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d001      	beq.n	8001fd8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	e12a      	b.n	800222e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d002      	beq.n	8001fe4 <HAL_SPI_Transmit+0x36>
 8001fde:	88fb      	ldrh	r3, [r7, #6]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d101      	bne.n	8001fe8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e122      	b.n	800222e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d101      	bne.n	8001ff6 <HAL_SPI_Transmit+0x48>
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	e11b      	b.n	800222e <HAL_SPI_Transmit+0x280>
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2203      	movs	r2, #3
 8002002:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2200      	movs	r2, #0
 800200a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	68ba      	ldr	r2, [r7, #8]
 8002010:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	88fa      	ldrh	r2, [r7, #6]
 8002016:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	88fa      	ldrh	r2, [r7, #6]
 800201c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2200      	movs	r2, #0
 8002022:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2200      	movs	r2, #0
 8002028:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2200      	movs	r2, #0
 800202e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2200      	movs	r2, #0
 8002034:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2200      	movs	r2, #0
 800203a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002044:	d10f      	bne.n	8002066 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002054:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002064:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002070:	2b40      	cmp	r3, #64	@ 0x40
 8002072:	d007      	beq.n	8002084 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002082:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800208c:	d152      	bne.n	8002134 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d002      	beq.n	800209c <HAL_SPI_Transmit+0xee>
 8002096:	8b7b      	ldrh	r3, [r7, #26]
 8002098:	2b01      	cmp	r3, #1
 800209a:	d145      	bne.n	8002128 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020a0:	881a      	ldrh	r2, [r3, #0]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ac:	1c9a      	adds	r2, r3, #2
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	3b01      	subs	r3, #1
 80020ba:	b29a      	uxth	r2, r3
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80020c0:	e032      	b.n	8002128 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	f003 0302 	and.w	r3, r3, #2
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d112      	bne.n	80020f6 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020d4:	881a      	ldrh	r2, [r3, #0]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020e0:	1c9a      	adds	r2, r3, #2
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80020ea:	b29b      	uxth	r3, r3
 80020ec:	3b01      	subs	r3, #1
 80020ee:	b29a      	uxth	r2, r3
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	86da      	strh	r2, [r3, #54]	@ 0x36
 80020f4:	e018      	b.n	8002128 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80020f6:	f7fe ffa1 	bl	800103c <HAL_GetTick>
 80020fa:	4602      	mov	r2, r0
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	683a      	ldr	r2, [r7, #0]
 8002102:	429a      	cmp	r2, r3
 8002104:	d803      	bhi.n	800210e <HAL_SPI_Transmit+0x160>
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800210c:	d102      	bne.n	8002114 <HAL_SPI_Transmit+0x166>
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d109      	bne.n	8002128 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2201      	movs	r2, #1
 8002118:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2200      	movs	r2, #0
 8002120:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	e082      	b.n	800222e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800212c:	b29b      	uxth	r3, r3
 800212e:	2b00      	cmp	r3, #0
 8002130:	d1c7      	bne.n	80020c2 <HAL_SPI_Transmit+0x114>
 8002132:	e053      	b.n	80021dc <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d002      	beq.n	8002142 <HAL_SPI_Transmit+0x194>
 800213c:	8b7b      	ldrh	r3, [r7, #26]
 800213e:	2b01      	cmp	r3, #1
 8002140:	d147      	bne.n	80021d2 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	330c      	adds	r3, #12
 800214c:	7812      	ldrb	r2, [r2, #0]
 800214e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002154:	1c5a      	adds	r2, r3, #1
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800215e:	b29b      	uxth	r3, r3
 8002160:	3b01      	subs	r3, #1
 8002162:	b29a      	uxth	r2, r3
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002168:	e033      	b.n	80021d2 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	f003 0302 	and.w	r3, r3, #2
 8002174:	2b02      	cmp	r3, #2
 8002176:	d113      	bne.n	80021a0 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	330c      	adds	r3, #12
 8002182:	7812      	ldrb	r2, [r2, #0]
 8002184:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800218a:	1c5a      	adds	r2, r3, #1
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002194:	b29b      	uxth	r3, r3
 8002196:	3b01      	subs	r3, #1
 8002198:	b29a      	uxth	r2, r3
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800219e:	e018      	b.n	80021d2 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80021a0:	f7fe ff4c 	bl	800103c <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	683a      	ldr	r2, [r7, #0]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d803      	bhi.n	80021b8 <HAL_SPI_Transmit+0x20a>
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80021b6:	d102      	bne.n	80021be <HAL_SPI_Transmit+0x210>
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d109      	bne.n	80021d2 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2201      	movs	r2, #1
 80021c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2200      	movs	r2, #0
 80021ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e02d      	b.n	800222e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d1c6      	bne.n	800216a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80021dc:	69fa      	ldr	r2, [r7, #28]
 80021de:	6839      	ldr	r1, [r7, #0]
 80021e0:	68f8      	ldr	r0, [r7, #12]
 80021e2:	f000 fbd9 	bl	8002998 <SPI_EndRxTxTransaction>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d002      	beq.n	80021f2 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2220      	movs	r2, #32
 80021f0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d10a      	bne.n	8002210 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80021fa:	2300      	movs	r3, #0
 80021fc:	617b      	str	r3, [r7, #20]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	617b      	str	r3, [r7, #20]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	617b      	str	r3, [r7, #20]
 800220e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2200      	movs	r2, #0
 800221c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e000      	b.n	800222e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800222c:	2300      	movs	r3, #0
  }
}
 800222e:	4618      	mov	r0, r3
 8002230:	3720      	adds	r7, #32
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}

08002236 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002236:	b580      	push	{r7, lr}
 8002238:	b088      	sub	sp, #32
 800223a:	af02      	add	r7, sp, #8
 800223c:	60f8      	str	r0, [r7, #12]
 800223e:	60b9      	str	r1, [r7, #8]
 8002240:	603b      	str	r3, [r7, #0]
 8002242:	4613      	mov	r3, r2
 8002244:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800224c:	b2db      	uxtb	r3, r3
 800224e:	2b01      	cmp	r3, #1
 8002250:	d001      	beq.n	8002256 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8002252:	2302      	movs	r3, #2
 8002254:	e104      	b.n	8002460 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800225e:	d112      	bne.n	8002286 <HAL_SPI_Receive+0x50>
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d10e      	bne.n	8002286 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2204      	movs	r2, #4
 800226c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002270:	88fa      	ldrh	r2, [r7, #6]
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	9300      	str	r3, [sp, #0]
 8002276:	4613      	mov	r3, r2
 8002278:	68ba      	ldr	r2, [r7, #8]
 800227a:	68b9      	ldr	r1, [r7, #8]
 800227c:	68f8      	ldr	r0, [r7, #12]
 800227e:	f000 f8f3 	bl	8002468 <HAL_SPI_TransmitReceive>
 8002282:	4603      	mov	r3, r0
 8002284:	e0ec      	b.n	8002460 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002286:	f7fe fed9 	bl	800103c <HAL_GetTick>
 800228a:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d002      	beq.n	8002298 <HAL_SPI_Receive+0x62>
 8002292:	88fb      	ldrh	r3, [r7, #6]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d101      	bne.n	800229c <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e0e1      	b.n	8002460 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d101      	bne.n	80022aa <HAL_SPI_Receive+0x74>
 80022a6:	2302      	movs	r3, #2
 80022a8:	e0da      	b.n	8002460 <HAL_SPI_Receive+0x22a>
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2201      	movs	r2, #1
 80022ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2204      	movs	r2, #4
 80022b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2200      	movs	r2, #0
 80022be:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	68ba      	ldr	r2, [r7, #8]
 80022c4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	88fa      	ldrh	r2, [r7, #6]
 80022ca:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	88fa      	ldrh	r2, [r7, #6]
 80022d0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2200      	movs	r2, #0
 80022d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2200      	movs	r2, #0
 80022dc:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2200      	movs	r2, #0
 80022e2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2200      	movs	r2, #0
 80022e8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2200      	movs	r2, #0
 80022ee:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80022f8:	d10f      	bne.n	800231a <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002308:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002318:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002324:	2b40      	cmp	r3, #64	@ 0x40
 8002326:	d007      	beq.n	8002338 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002336:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d170      	bne.n	8002422 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002340:	e035      	b.n	80023ae <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	f003 0301 	and.w	r3, r3, #1
 800234c:	2b01      	cmp	r3, #1
 800234e:	d115      	bne.n	800237c <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f103 020c 	add.w	r2, r3, #12
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800235c:	7812      	ldrb	r2, [r2, #0]
 800235e:	b2d2      	uxtb	r2, r2
 8002360:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002366:	1c5a      	adds	r2, r3, #1
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002370:	b29b      	uxth	r3, r3
 8002372:	3b01      	subs	r3, #1
 8002374:	b29a      	uxth	r2, r3
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800237a:	e018      	b.n	80023ae <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800237c:	f7fe fe5e 	bl	800103c <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	683a      	ldr	r2, [r7, #0]
 8002388:	429a      	cmp	r2, r3
 800238a:	d803      	bhi.n	8002394 <HAL_SPI_Receive+0x15e>
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002392:	d102      	bne.n	800239a <HAL_SPI_Receive+0x164>
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d109      	bne.n	80023ae <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2201      	movs	r2, #1
 800239e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2200      	movs	r2, #0
 80023a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e058      	b.n	8002460 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d1c4      	bne.n	8002342 <HAL_SPI_Receive+0x10c>
 80023b8:	e038      	b.n	800242c <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	f003 0301 	and.w	r3, r3, #1
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d113      	bne.n	80023f0 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	68da      	ldr	r2, [r3, #12]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023d2:	b292      	uxth	r2, r2
 80023d4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023da:	1c9a      	adds	r2, r3, #2
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	3b01      	subs	r3, #1
 80023e8:	b29a      	uxth	r2, r3
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80023ee:	e018      	b.n	8002422 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80023f0:	f7fe fe24 	bl	800103c <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	683a      	ldr	r2, [r7, #0]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d803      	bhi.n	8002408 <HAL_SPI_Receive+0x1d2>
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002406:	d102      	bne.n	800240e <HAL_SPI_Receive+0x1d8>
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d109      	bne.n	8002422 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2201      	movs	r2, #1
 8002412:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2200      	movs	r2, #0
 800241a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e01e      	b.n	8002460 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002426:	b29b      	uxth	r3, r3
 8002428:	2b00      	cmp	r3, #0
 800242a:	d1c6      	bne.n	80023ba <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800242c:	697a      	ldr	r2, [r7, #20]
 800242e:	6839      	ldr	r1, [r7, #0]
 8002430:	68f8      	ldr	r0, [r7, #12]
 8002432:	f000 fa4b 	bl	80028cc <SPI_EndRxTransaction>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d002      	beq.n	8002442 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2220      	movs	r2, #32
 8002440:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2201      	movs	r2, #1
 8002446:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2200      	movs	r2, #0
 800244e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e000      	b.n	8002460 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800245e:	2300      	movs	r3, #0
  }
}
 8002460:	4618      	mov	r0, r3
 8002462:	3718      	adds	r7, #24
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}

08002468 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b08a      	sub	sp, #40	@ 0x28
 800246c:	af00      	add	r7, sp, #0
 800246e:	60f8      	str	r0, [r7, #12]
 8002470:	60b9      	str	r1, [r7, #8]
 8002472:	607a      	str	r2, [r7, #4]
 8002474:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002476:	2301      	movs	r3, #1
 8002478:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800247a:	f7fe fddf 	bl	800103c <HAL_GetTick>
 800247e:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002486:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800248e:	887b      	ldrh	r3, [r7, #2]
 8002490:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002492:	7ffb      	ldrb	r3, [r7, #31]
 8002494:	2b01      	cmp	r3, #1
 8002496:	d00c      	beq.n	80024b2 <HAL_SPI_TransmitReceive+0x4a>
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800249e:	d106      	bne.n	80024ae <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d102      	bne.n	80024ae <HAL_SPI_TransmitReceive+0x46>
 80024a8:	7ffb      	ldrb	r3, [r7, #31]
 80024aa:	2b04      	cmp	r3, #4
 80024ac:	d001      	beq.n	80024b2 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80024ae:	2302      	movs	r3, #2
 80024b0:	e17f      	b.n	80027b2 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d005      	beq.n	80024c4 <HAL_SPI_TransmitReceive+0x5c>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d002      	beq.n	80024c4 <HAL_SPI_TransmitReceive+0x5c>
 80024be:	887b      	ldrh	r3, [r7, #2]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d101      	bne.n	80024c8 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e174      	b.n	80027b2 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d101      	bne.n	80024d6 <HAL_SPI_TransmitReceive+0x6e>
 80024d2:	2302      	movs	r3, #2
 80024d4:	e16d      	b.n	80027b2 <HAL_SPI_TransmitReceive+0x34a>
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2201      	movs	r2, #1
 80024da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	2b04      	cmp	r3, #4
 80024e8:	d003      	beq.n	80024f2 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2205      	movs	r2, #5
 80024ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2200      	movs	r2, #0
 80024f6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	887a      	ldrh	r2, [r7, #2]
 8002502:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	887a      	ldrh	r2, [r7, #2]
 8002508:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	68ba      	ldr	r2, [r7, #8]
 800250e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	887a      	ldrh	r2, [r7, #2]
 8002514:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	887a      	ldrh	r2, [r7, #2]
 800251a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2200      	movs	r2, #0
 8002520:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2200      	movs	r2, #0
 8002526:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002532:	2b40      	cmp	r3, #64	@ 0x40
 8002534:	d007      	beq.n	8002546 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002544:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800254e:	d17e      	bne.n	800264e <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d002      	beq.n	800255e <HAL_SPI_TransmitReceive+0xf6>
 8002558:	8afb      	ldrh	r3, [r7, #22]
 800255a:	2b01      	cmp	r3, #1
 800255c:	d16c      	bne.n	8002638 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002562:	881a      	ldrh	r2, [r3, #0]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800256e:	1c9a      	adds	r2, r3, #2
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002578:	b29b      	uxth	r3, r3
 800257a:	3b01      	subs	r3, #1
 800257c:	b29a      	uxth	r2, r3
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002582:	e059      	b.n	8002638 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f003 0302 	and.w	r3, r3, #2
 800258e:	2b02      	cmp	r3, #2
 8002590:	d11b      	bne.n	80025ca <HAL_SPI_TransmitReceive+0x162>
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002596:	b29b      	uxth	r3, r3
 8002598:	2b00      	cmp	r3, #0
 800259a:	d016      	beq.n	80025ca <HAL_SPI_TransmitReceive+0x162>
 800259c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d113      	bne.n	80025ca <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025a6:	881a      	ldrh	r2, [r3, #0]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025b2:	1c9a      	adds	r2, r3, #2
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80025bc:	b29b      	uxth	r3, r3
 80025be:	3b01      	subs	r3, #1
 80025c0:	b29a      	uxth	r2, r3
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80025c6:	2300      	movs	r3, #0
 80025c8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	f003 0301 	and.w	r3, r3, #1
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d119      	bne.n	800260c <HAL_SPI_TransmitReceive+0x1a4>
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80025dc:	b29b      	uxth	r3, r3
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d014      	beq.n	800260c <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	68da      	ldr	r2, [r3, #12]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025ec:	b292      	uxth	r2, r2
 80025ee:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025f4:	1c9a      	adds	r2, r3, #2
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80025fe:	b29b      	uxth	r3, r3
 8002600:	3b01      	subs	r3, #1
 8002602:	b29a      	uxth	r2, r3
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002608:	2301      	movs	r3, #1
 800260a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800260c:	f7fe fd16 	bl	800103c <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	6a3b      	ldr	r3, [r7, #32]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002618:	429a      	cmp	r2, r3
 800261a:	d80d      	bhi.n	8002638 <HAL_SPI_TransmitReceive+0x1d0>
 800261c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800261e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002622:	d009      	beq.n	8002638 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2200      	movs	r2, #0
 8002630:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e0bc      	b.n	80027b2 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800263c:	b29b      	uxth	r3, r3
 800263e:	2b00      	cmp	r3, #0
 8002640:	d1a0      	bne.n	8002584 <HAL_SPI_TransmitReceive+0x11c>
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002646:	b29b      	uxth	r3, r3
 8002648:	2b00      	cmp	r3, #0
 800264a:	d19b      	bne.n	8002584 <HAL_SPI_TransmitReceive+0x11c>
 800264c:	e082      	b.n	8002754 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d002      	beq.n	800265c <HAL_SPI_TransmitReceive+0x1f4>
 8002656:	8afb      	ldrh	r3, [r7, #22]
 8002658:	2b01      	cmp	r3, #1
 800265a:	d171      	bne.n	8002740 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	330c      	adds	r3, #12
 8002666:	7812      	ldrb	r2, [r2, #0]
 8002668:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800266e:	1c5a      	adds	r2, r3, #1
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002678:	b29b      	uxth	r3, r3
 800267a:	3b01      	subs	r3, #1
 800267c:	b29a      	uxth	r2, r3
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002682:	e05d      	b.n	8002740 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	f003 0302 	and.w	r3, r3, #2
 800268e:	2b02      	cmp	r3, #2
 8002690:	d11c      	bne.n	80026cc <HAL_SPI_TransmitReceive+0x264>
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002696:	b29b      	uxth	r3, r3
 8002698:	2b00      	cmp	r3, #0
 800269a:	d017      	beq.n	80026cc <HAL_SPI_TransmitReceive+0x264>
 800269c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d114      	bne.n	80026cc <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	330c      	adds	r3, #12
 80026ac:	7812      	ldrb	r2, [r2, #0]
 80026ae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026b4:	1c5a      	adds	r2, r3, #1
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80026be:	b29b      	uxth	r3, r3
 80026c0:	3b01      	subs	r3, #1
 80026c2:	b29a      	uxth	r2, r3
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80026c8:	2300      	movs	r3, #0
 80026ca:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	f003 0301 	and.w	r3, r3, #1
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d119      	bne.n	800270e <HAL_SPI_TransmitReceive+0x2a6>
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80026de:	b29b      	uxth	r3, r3
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d014      	beq.n	800270e <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	68da      	ldr	r2, [r3, #12]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026ee:	b2d2      	uxtb	r2, r2
 80026f0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026f6:	1c5a      	adds	r2, r3, #1
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002700:	b29b      	uxth	r3, r3
 8002702:	3b01      	subs	r3, #1
 8002704:	b29a      	uxth	r2, r3
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800270a:	2301      	movs	r3, #1
 800270c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800270e:	f7fe fc95 	bl	800103c <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	6a3b      	ldr	r3, [r7, #32]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800271a:	429a      	cmp	r2, r3
 800271c:	d803      	bhi.n	8002726 <HAL_SPI_TransmitReceive+0x2be>
 800271e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002720:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002724:	d102      	bne.n	800272c <HAL_SPI_TransmitReceive+0x2c4>
 8002726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002728:	2b00      	cmp	r3, #0
 800272a:	d109      	bne.n	8002740 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2201      	movs	r2, #1
 8002730:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2200      	movs	r2, #0
 8002738:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	e038      	b.n	80027b2 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002744:	b29b      	uxth	r3, r3
 8002746:	2b00      	cmp	r3, #0
 8002748:	d19c      	bne.n	8002684 <HAL_SPI_TransmitReceive+0x21c>
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800274e:	b29b      	uxth	r3, r3
 8002750:	2b00      	cmp	r3, #0
 8002752:	d197      	bne.n	8002684 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002754:	6a3a      	ldr	r2, [r7, #32]
 8002756:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002758:	68f8      	ldr	r0, [r7, #12]
 800275a:	f000 f91d 	bl	8002998 <SPI_EndRxTxTransaction>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d008      	beq.n	8002776 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2220      	movs	r2, #32
 8002768:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2200      	movs	r2, #0
 800276e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e01d      	b.n	80027b2 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d10a      	bne.n	8002794 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800277e:	2300      	movs	r3, #0
 8002780:	613b      	str	r3, [r7, #16]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	613b      	str	r3, [r7, #16]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	613b      	str	r3, [r7, #16]
 8002792:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2201      	movs	r2, #1
 8002798:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2200      	movs	r2, #0
 80027a0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d001      	beq.n	80027b0 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e000      	b.n	80027b2 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80027b0:	2300      	movs	r3, #0
  }
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3728      	adds	r7, #40	@ 0x28
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
	...

080027bc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b088      	sub	sp, #32
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	60f8      	str	r0, [r7, #12]
 80027c4:	60b9      	str	r1, [r7, #8]
 80027c6:	603b      	str	r3, [r7, #0]
 80027c8:	4613      	mov	r3, r2
 80027ca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80027cc:	f7fe fc36 	bl	800103c <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027d4:	1a9b      	subs	r3, r3, r2
 80027d6:	683a      	ldr	r2, [r7, #0]
 80027d8:	4413      	add	r3, r2
 80027da:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80027dc:	f7fe fc2e 	bl	800103c <HAL_GetTick>
 80027e0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80027e2:	4b39      	ldr	r3, [pc, #228]	@ (80028c8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	015b      	lsls	r3, r3, #5
 80027e8:	0d1b      	lsrs	r3, r3, #20
 80027ea:	69fa      	ldr	r2, [r7, #28]
 80027ec:	fb02 f303 	mul.w	r3, r2, r3
 80027f0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80027f2:	e054      	b.n	800289e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80027fa:	d050      	beq.n	800289e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80027fc:	f7fe fc1e 	bl	800103c <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	69bb      	ldr	r3, [r7, #24]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	69fa      	ldr	r2, [r7, #28]
 8002808:	429a      	cmp	r2, r3
 800280a:	d902      	bls.n	8002812 <SPI_WaitFlagStateUntilTimeout+0x56>
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d13d      	bne.n	800288e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	685a      	ldr	r2, [r3, #4]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002820:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800282a:	d111      	bne.n	8002850 <SPI_WaitFlagStateUntilTimeout+0x94>
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002834:	d004      	beq.n	8002840 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800283e:	d107      	bne.n	8002850 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800284e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002854:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002858:	d10f      	bne.n	800287a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002868:	601a      	str	r2, [r3, #0]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002878:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2201      	movs	r2, #1
 800287e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2200      	movs	r2, #0
 8002886:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e017      	b.n	80028be <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d101      	bne.n	8002898 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002894:	2300      	movs	r3, #0
 8002896:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	3b01      	subs	r3, #1
 800289c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	689a      	ldr	r2, [r3, #8]
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	4013      	ands	r3, r2
 80028a8:	68ba      	ldr	r2, [r7, #8]
 80028aa:	429a      	cmp	r2, r3
 80028ac:	bf0c      	ite	eq
 80028ae:	2301      	moveq	r3, #1
 80028b0:	2300      	movne	r3, #0
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	461a      	mov	r2, r3
 80028b6:	79fb      	ldrb	r3, [r7, #7]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d19b      	bne.n	80027f4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3720      	adds	r7, #32
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	2000000c 	.word	0x2000000c

080028cc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b086      	sub	sp, #24
 80028d0:	af02      	add	r7, sp, #8
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	60b9      	str	r1, [r7, #8]
 80028d6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80028e0:	d111      	bne.n	8002906 <SPI_EndRxTransaction+0x3a>
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80028ea:	d004      	beq.n	80028f6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028f4:	d107      	bne.n	8002906 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002904:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800290e:	d12a      	bne.n	8002966 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002918:	d012      	beq.n	8002940 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	9300      	str	r3, [sp, #0]
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	2200      	movs	r2, #0
 8002922:	2180      	movs	r1, #128	@ 0x80
 8002924:	68f8      	ldr	r0, [r7, #12]
 8002926:	f7ff ff49 	bl	80027bc <SPI_WaitFlagStateUntilTimeout>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d02d      	beq.n	800298c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002934:	f043 0220 	orr.w	r2, r3, #32
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800293c:	2303      	movs	r3, #3
 800293e:	e026      	b.n	800298e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	9300      	str	r3, [sp, #0]
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	2200      	movs	r2, #0
 8002948:	2101      	movs	r1, #1
 800294a:	68f8      	ldr	r0, [r7, #12]
 800294c:	f7ff ff36 	bl	80027bc <SPI_WaitFlagStateUntilTimeout>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d01a      	beq.n	800298c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800295a:	f043 0220 	orr.w	r2, r3, #32
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e013      	b.n	800298e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	9300      	str	r3, [sp, #0]
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	2200      	movs	r2, #0
 800296e:	2101      	movs	r1, #1
 8002970:	68f8      	ldr	r0, [r7, #12]
 8002972:	f7ff ff23 	bl	80027bc <SPI_WaitFlagStateUntilTimeout>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d007      	beq.n	800298c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002980:	f043 0220 	orr.w	r2, r3, #32
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002988:	2303      	movs	r3, #3
 800298a:	e000      	b.n	800298e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	3710      	adds	r7, #16
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
	...

08002998 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b088      	sub	sp, #32
 800299c:	af02      	add	r7, sp, #8
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	60b9      	str	r1, [r7, #8]
 80029a2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	9300      	str	r3, [sp, #0]
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	2201      	movs	r2, #1
 80029ac:	2102      	movs	r1, #2
 80029ae:	68f8      	ldr	r0, [r7, #12]
 80029b0:	f7ff ff04 	bl	80027bc <SPI_WaitFlagStateUntilTimeout>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d007      	beq.n	80029ca <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029be:	f043 0220 	orr.w	r2, r3, #32
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e032      	b.n	8002a30 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80029ca:	4b1b      	ldr	r3, [pc, #108]	@ (8002a38 <SPI_EndRxTxTransaction+0xa0>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a1b      	ldr	r2, [pc, #108]	@ (8002a3c <SPI_EndRxTxTransaction+0xa4>)
 80029d0:	fba2 2303 	umull	r2, r3, r2, r3
 80029d4:	0d5b      	lsrs	r3, r3, #21
 80029d6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80029da:	fb02 f303 	mul.w	r3, r2, r3
 80029de:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80029e8:	d112      	bne.n	8002a10 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	9300      	str	r3, [sp, #0]
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	2200      	movs	r2, #0
 80029f2:	2180      	movs	r1, #128	@ 0x80
 80029f4:	68f8      	ldr	r0, [r7, #12]
 80029f6:	f7ff fee1 	bl	80027bc <SPI_WaitFlagStateUntilTimeout>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d016      	beq.n	8002a2e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a04:	f043 0220 	orr.w	r2, r3, #32
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	e00f      	b.n	8002a30 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d00a      	beq.n	8002a2c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	3b01      	subs	r3, #1
 8002a1a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a26:	2b80      	cmp	r3, #128	@ 0x80
 8002a28:	d0f2      	beq.n	8002a10 <SPI_EndRxTxTransaction+0x78>
 8002a2a:	e000      	b.n	8002a2e <SPI_EndRxTxTransaction+0x96>
        break;
 8002a2c:	bf00      	nop
  }

  return HAL_OK;
 8002a2e:	2300      	movs	r3, #0
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3718      	adds	r7, #24
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	2000000c 	.word	0x2000000c
 8002a3c:	165e9f81 	.word	0x165e9f81

08002a40 <memset>:
 8002a40:	4402      	add	r2, r0
 8002a42:	4603      	mov	r3, r0
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d100      	bne.n	8002a4a <memset+0xa>
 8002a48:	4770      	bx	lr
 8002a4a:	f803 1b01 	strb.w	r1, [r3], #1
 8002a4e:	e7f9      	b.n	8002a44 <memset+0x4>

08002a50 <__libc_init_array>:
 8002a50:	b570      	push	{r4, r5, r6, lr}
 8002a52:	4d0d      	ldr	r5, [pc, #52]	@ (8002a88 <__libc_init_array+0x38>)
 8002a54:	4c0d      	ldr	r4, [pc, #52]	@ (8002a8c <__libc_init_array+0x3c>)
 8002a56:	1b64      	subs	r4, r4, r5
 8002a58:	10a4      	asrs	r4, r4, #2
 8002a5a:	2600      	movs	r6, #0
 8002a5c:	42a6      	cmp	r6, r4
 8002a5e:	d109      	bne.n	8002a74 <__libc_init_array+0x24>
 8002a60:	4d0b      	ldr	r5, [pc, #44]	@ (8002a90 <__libc_init_array+0x40>)
 8002a62:	4c0c      	ldr	r4, [pc, #48]	@ (8002a94 <__libc_init_array+0x44>)
 8002a64:	f000 f818 	bl	8002a98 <_init>
 8002a68:	1b64      	subs	r4, r4, r5
 8002a6a:	10a4      	asrs	r4, r4, #2
 8002a6c:	2600      	movs	r6, #0
 8002a6e:	42a6      	cmp	r6, r4
 8002a70:	d105      	bne.n	8002a7e <__libc_init_array+0x2e>
 8002a72:	bd70      	pop	{r4, r5, r6, pc}
 8002a74:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a78:	4798      	blx	r3
 8002a7a:	3601      	adds	r6, #1
 8002a7c:	e7ee      	b.n	8002a5c <__libc_init_array+0xc>
 8002a7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a82:	4798      	blx	r3
 8002a84:	3601      	adds	r6, #1
 8002a86:	e7f2      	b.n	8002a6e <__libc_init_array+0x1e>
 8002a88:	08002ac8 	.word	0x08002ac8
 8002a8c:	08002ac8 	.word	0x08002ac8
 8002a90:	08002ac8 	.word	0x08002ac8
 8002a94:	08002acc 	.word	0x08002acc

08002a98 <_init>:
 8002a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a9a:	bf00      	nop
 8002a9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a9e:	bc08      	pop	{r3}
 8002aa0:	469e      	mov	lr, r3
 8002aa2:	4770      	bx	lr

08002aa4 <_fini>:
 8002aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aa6:	bf00      	nop
 8002aa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002aaa:	bc08      	pop	{r3}
 8002aac:	469e      	mov	lr, r3
 8002aae:	4770      	bx	lr
