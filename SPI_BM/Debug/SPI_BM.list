
SPI_BM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028c0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002a48  08002a48  00003a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a58  08002a58  00004018  2**0
                  CONTENTS
  4 .ARM          00000008  08002a58  08002a58  00003a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002a60  08002a60  00004018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a60  08002a60  00003a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002a64  08002a64  00003a64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08002a68  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00004018  2**0
                  CONTENTS
 10 .bss          00000228  20000018  20000018  00004018  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000240  20000240  00004018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00004018  2**0
                  CONTENTS, READONLY
 13 .debug_info   00005df0  00000000  00000000  00004048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000012d6  00000000  00000000  00009e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000668  00000000  00000000  0000b110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000004c4  00000000  00000000  0000b778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f2ff  00000000  00000000  0000bc3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00006d5a  00000000  00000000  0002af3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000be68d  00000000  00000000  00031c95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f0322  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000193c  00000000  00000000  000f0368  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005e  00000000  00000000  000f1ca4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002a30 	.word	0x08002a30

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	08002a30 	.word	0x08002a30

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <word_to_binary_array>:
#define PEC10_READ    2
void word_to_binary_array10_data_PEC(uint16_t word, uint16_t binary_array[16]);
void byte_array_to_bit_array10_data_PEC(uint8_t *data, int data_len, uint8_t *bit_array, uint8_t *expanded_array);


void word_to_binary_array(uint16_t word, uint16_t binary_array[16]) {
 80004b8:	b480      	push	{r7}
 80004ba:	b085      	sub	sp, #20
 80004bc:	af00      	add	r7, sp, #0
 80004be:	4603      	mov	r3, r0
 80004c0:	6039      	str	r1, [r7, #0]
 80004c2:	80fb      	strh	r3, [r7, #6]
    // Loop through each bit in the 16-bit word, starting from LSB
    for (int i = 0; i < 16; i++) {
 80004c4:	2300      	movs	r3, #0
 80004c6:	60fb      	str	r3, [r7, #12]
 80004c8:	e00f      	b.n	80004ea <word_to_binary_array+0x32>
        // Extract the i-th bit and store it in the array
        binary_array[i] = (word >> i) & 1;
 80004ca:	88fa      	ldrh	r2, [r7, #6]
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	fa42 f303 	asr.w	r3, r2, r3
 80004d2:	b29a      	uxth	r2, r3
 80004d4:	68fb      	ldr	r3, [r7, #12]
 80004d6:	005b      	lsls	r3, r3, #1
 80004d8:	6839      	ldr	r1, [r7, #0]
 80004da:	440b      	add	r3, r1
 80004dc:	f002 0201 	and.w	r2, r2, #1
 80004e0:	b292      	uxth	r2, r2
 80004e2:	801a      	strh	r2, [r3, #0]
    for (int i = 0; i < 16; i++) {
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	3301      	adds	r3, #1
 80004e8:	60fb      	str	r3, [r7, #12]
 80004ea:	68fb      	ldr	r3, [r7, #12]
 80004ec:	2b0f      	cmp	r3, #15
 80004ee:	ddec      	ble.n	80004ca <word_to_binary_array+0x12>
    }
}
 80004f0:	bf00      	nop
 80004f2:	bf00      	nop
 80004f4:	3714      	adds	r7, #20
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr

080004fe <binary_array_to_word>:


uint16_t binary_array_to_word(uint16_t binary_array[16]) {
 80004fe:	b480      	push	{r7}
 8000500:	b085      	sub	sp, #20
 8000502:	af00      	add	r7, sp, #0
 8000504:	6078      	str	r0, [r7, #4]
    uint16_t word = 0;
 8000506:	2300      	movs	r3, #0
 8000508:	81fb      	strh	r3, [r7, #14]

    // Iterate through each bit in the binary array
    for (int i = 0; i < 16; i++) {
 800050a:	2300      	movs	r3, #0
 800050c:	60bb      	str	r3, [r7, #8]
 800050e:	e011      	b.n	8000534 <binary_array_to_word+0x36>
        // Shift the current word to the left and add the current bit
        word |= (binary_array[i] << i);
 8000510:	68bb      	ldr	r3, [r7, #8]
 8000512:	005b      	lsls	r3, r3, #1
 8000514:	687a      	ldr	r2, [r7, #4]
 8000516:	4413      	add	r3, r2
 8000518:	881b      	ldrh	r3, [r3, #0]
 800051a:	461a      	mov	r2, r3
 800051c:	68bb      	ldr	r3, [r7, #8]
 800051e:	fa02 f303 	lsl.w	r3, r2, r3
 8000522:	b21a      	sxth	r2, r3
 8000524:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000528:	4313      	orrs	r3, r2
 800052a:	b21b      	sxth	r3, r3
 800052c:	81fb      	strh	r3, [r7, #14]
    for (int i = 0; i < 16; i++) {
 800052e:	68bb      	ldr	r3, [r7, #8]
 8000530:	3301      	adds	r3, #1
 8000532:	60bb      	str	r3, [r7, #8]
 8000534:	68bb      	ldr	r3, [r7, #8]
 8000536:	2b0f      	cmp	r3, #15
 8000538:	ddea      	ble.n	8000510 <binary_array_to_word+0x12>
    }

    return word;
 800053a:	89fb      	ldrh	r3, [r7, #14]
}
 800053c:	4618      	mov	r0, r3
 800053e:	3714      	adds	r7, #20
 8000540:	46bd      	mov	sp, r7
 8000542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000546:	4770      	bx	lr

08000548 <cmdPec>:

    return word;  // Return the 10-bit word (stored in a 16-bit variable)
}


uint16_t cmdPec(uint16_t command) {
 8000548:	b580      	push	{r7, lr}
 800054a:	b084      	sub	sp, #16
 800054c:	af00      	add	r7, sp, #0
 800054e:	4603      	mov	r3, r0
 8000550:	80fb      	strh	r3, [r7, #6]

    word_to_binary_array(init_PEC, converted_PEC_15);
 8000552:	4b49      	ldr	r3, [pc, #292]	@ (8000678 <cmdPec+0x130>)
 8000554:	881b      	ldrh	r3, [r3, #0]
 8000556:	4949      	ldr	r1, [pc, #292]	@ (800067c <cmdPec+0x134>)
 8000558:	4618      	mov	r0, r3
 800055a:	f7ff ffad 	bl	80004b8 <word_to_binary_array>
    word_to_binary_array(command, converted_Cmd);
 800055e:	88fb      	ldrh	r3, [r7, #6]
 8000560:	4947      	ldr	r1, [pc, #284]	@ (8000680 <cmdPec+0x138>)
 8000562:	4618      	mov	r0, r3
 8000564:	f7ff ffa8 	bl	80004b8 <word_to_binary_array>

	 for(int i = 15;i > -1;i--) {
 8000568:	230f      	movs	r3, #15
 800056a:	60fb      	str	r3, [r7, #12]
 800056c:	e078      	b.n	8000660 <cmdPec+0x118>

	    in[0] = converted_Cmd[i] ^ converted_PEC_15[14];
 800056e:	4a44      	ldr	r2, [pc, #272]	@ (8000680 <cmdPec+0x138>)
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000576:	4b41      	ldr	r3, [pc, #260]	@ (800067c <cmdPec+0x134>)
 8000578:	8b9b      	ldrh	r3, [r3, #28]
 800057a:	4053      	eors	r3, r2
 800057c:	b29a      	uxth	r2, r3
 800057e:	4b41      	ldr	r3, [pc, #260]	@ (8000684 <cmdPec+0x13c>)
 8000580:	801a      	strh	r2, [r3, #0]
	    in[3] = in[0] ^ converted_PEC_15[2];
 8000582:	4b40      	ldr	r3, [pc, #256]	@ (8000684 <cmdPec+0x13c>)
 8000584:	881a      	ldrh	r2, [r3, #0]
 8000586:	4b3d      	ldr	r3, [pc, #244]	@ (800067c <cmdPec+0x134>)
 8000588:	889b      	ldrh	r3, [r3, #4]
 800058a:	4053      	eors	r3, r2
 800058c:	b29a      	uxth	r2, r3
 800058e:	4b3d      	ldr	r3, [pc, #244]	@ (8000684 <cmdPec+0x13c>)
 8000590:	80da      	strh	r2, [r3, #6]
	    in[4] = in[0] ^ converted_PEC_15[3];
 8000592:	4b3c      	ldr	r3, [pc, #240]	@ (8000684 <cmdPec+0x13c>)
 8000594:	881a      	ldrh	r2, [r3, #0]
 8000596:	4b39      	ldr	r3, [pc, #228]	@ (800067c <cmdPec+0x134>)
 8000598:	88db      	ldrh	r3, [r3, #6]
 800059a:	4053      	eors	r3, r2
 800059c:	b29a      	uxth	r2, r3
 800059e:	4b39      	ldr	r3, [pc, #228]	@ (8000684 <cmdPec+0x13c>)
 80005a0:	811a      	strh	r2, [r3, #8]
	    in[7] = in[0] ^ converted_PEC_15[6];
 80005a2:	4b38      	ldr	r3, [pc, #224]	@ (8000684 <cmdPec+0x13c>)
 80005a4:	881a      	ldrh	r2, [r3, #0]
 80005a6:	4b35      	ldr	r3, [pc, #212]	@ (800067c <cmdPec+0x134>)
 80005a8:	899b      	ldrh	r3, [r3, #12]
 80005aa:	4053      	eors	r3, r2
 80005ac:	b29a      	uxth	r2, r3
 80005ae:	4b35      	ldr	r3, [pc, #212]	@ (8000684 <cmdPec+0x13c>)
 80005b0:	81da      	strh	r2, [r3, #14]
	    in[8] = in[0] ^ converted_PEC_15[7];
 80005b2:	4b34      	ldr	r3, [pc, #208]	@ (8000684 <cmdPec+0x13c>)
 80005b4:	881a      	ldrh	r2, [r3, #0]
 80005b6:	4b31      	ldr	r3, [pc, #196]	@ (800067c <cmdPec+0x134>)
 80005b8:	89db      	ldrh	r3, [r3, #14]
 80005ba:	4053      	eors	r3, r2
 80005bc:	b29a      	uxth	r2, r3
 80005be:	4b31      	ldr	r3, [pc, #196]	@ (8000684 <cmdPec+0x13c>)
 80005c0:	821a      	strh	r2, [r3, #16]
	    in[10] = in[0] ^ converted_PEC_15[9];
 80005c2:	4b30      	ldr	r3, [pc, #192]	@ (8000684 <cmdPec+0x13c>)
 80005c4:	881a      	ldrh	r2, [r3, #0]
 80005c6:	4b2d      	ldr	r3, [pc, #180]	@ (800067c <cmdPec+0x134>)
 80005c8:	8a5b      	ldrh	r3, [r3, #18]
 80005ca:	4053      	eors	r3, r2
 80005cc:	b29a      	uxth	r2, r3
 80005ce:	4b2d      	ldr	r3, [pc, #180]	@ (8000684 <cmdPec+0x13c>)
 80005d0:	829a      	strh	r2, [r3, #20]
	    in[14] = in[0] ^ converted_PEC_15[13];
 80005d2:	4b2c      	ldr	r3, [pc, #176]	@ (8000684 <cmdPec+0x13c>)
 80005d4:	881a      	ldrh	r2, [r3, #0]
 80005d6:	4b29      	ldr	r3, [pc, #164]	@ (800067c <cmdPec+0x134>)
 80005d8:	8b5b      	ldrh	r3, [r3, #26]
 80005da:	4053      	eors	r3, r2
 80005dc:	b29a      	uxth	r2, r3
 80005de:	4b29      	ldr	r3, [pc, #164]	@ (8000684 <cmdPec+0x13c>)
 80005e0:	839a      	strh	r2, [r3, #28]

	    converted_PEC_15[14] = in[14];
 80005e2:	4b28      	ldr	r3, [pc, #160]	@ (8000684 <cmdPec+0x13c>)
 80005e4:	8b9a      	ldrh	r2, [r3, #28]
 80005e6:	4b25      	ldr	r3, [pc, #148]	@ (800067c <cmdPec+0x134>)
 80005e8:	839a      	strh	r2, [r3, #28]
	    converted_PEC_15[13] = converted_PEC_15[12];
 80005ea:	4b24      	ldr	r3, [pc, #144]	@ (800067c <cmdPec+0x134>)
 80005ec:	8b1a      	ldrh	r2, [r3, #24]
 80005ee:	4b23      	ldr	r3, [pc, #140]	@ (800067c <cmdPec+0x134>)
 80005f0:	835a      	strh	r2, [r3, #26]
	    converted_PEC_15[12] = converted_PEC_15[11];
 80005f2:	4b22      	ldr	r3, [pc, #136]	@ (800067c <cmdPec+0x134>)
 80005f4:	8ada      	ldrh	r2, [r3, #22]
 80005f6:	4b21      	ldr	r3, [pc, #132]	@ (800067c <cmdPec+0x134>)
 80005f8:	831a      	strh	r2, [r3, #24]
	    converted_PEC_15[11] = converted_PEC_15[10];
 80005fa:	4b20      	ldr	r3, [pc, #128]	@ (800067c <cmdPec+0x134>)
 80005fc:	8a9a      	ldrh	r2, [r3, #20]
 80005fe:	4b1f      	ldr	r3, [pc, #124]	@ (800067c <cmdPec+0x134>)
 8000600:	82da      	strh	r2, [r3, #22]
	    converted_PEC_15[10] = in[10];
 8000602:	4b20      	ldr	r3, [pc, #128]	@ (8000684 <cmdPec+0x13c>)
 8000604:	8a9a      	ldrh	r2, [r3, #20]
 8000606:	4b1d      	ldr	r3, [pc, #116]	@ (800067c <cmdPec+0x134>)
 8000608:	829a      	strh	r2, [r3, #20]
	    converted_PEC_15[9] = converted_PEC_15[8];
 800060a:	4b1c      	ldr	r3, [pc, #112]	@ (800067c <cmdPec+0x134>)
 800060c:	8a1a      	ldrh	r2, [r3, #16]
 800060e:	4b1b      	ldr	r3, [pc, #108]	@ (800067c <cmdPec+0x134>)
 8000610:	825a      	strh	r2, [r3, #18]
	    converted_PEC_15[8] = in[8];
 8000612:	4b1c      	ldr	r3, [pc, #112]	@ (8000684 <cmdPec+0x13c>)
 8000614:	8a1a      	ldrh	r2, [r3, #16]
 8000616:	4b19      	ldr	r3, [pc, #100]	@ (800067c <cmdPec+0x134>)
 8000618:	821a      	strh	r2, [r3, #16]
	    converted_PEC_15[7] = in[7];
 800061a:	4b1a      	ldr	r3, [pc, #104]	@ (8000684 <cmdPec+0x13c>)
 800061c:	89da      	ldrh	r2, [r3, #14]
 800061e:	4b17      	ldr	r3, [pc, #92]	@ (800067c <cmdPec+0x134>)
 8000620:	81da      	strh	r2, [r3, #14]
	    converted_PEC_15[6] = converted_PEC_15[5];
 8000622:	4b16      	ldr	r3, [pc, #88]	@ (800067c <cmdPec+0x134>)
 8000624:	895a      	ldrh	r2, [r3, #10]
 8000626:	4b15      	ldr	r3, [pc, #84]	@ (800067c <cmdPec+0x134>)
 8000628:	819a      	strh	r2, [r3, #12]
	    converted_PEC_15[5] = converted_PEC_15[4];
 800062a:	4b14      	ldr	r3, [pc, #80]	@ (800067c <cmdPec+0x134>)
 800062c:	891a      	ldrh	r2, [r3, #8]
 800062e:	4b13      	ldr	r3, [pc, #76]	@ (800067c <cmdPec+0x134>)
 8000630:	815a      	strh	r2, [r3, #10]
	    converted_PEC_15[4] = in[4];
 8000632:	4b14      	ldr	r3, [pc, #80]	@ (8000684 <cmdPec+0x13c>)
 8000634:	891a      	ldrh	r2, [r3, #8]
 8000636:	4b11      	ldr	r3, [pc, #68]	@ (800067c <cmdPec+0x134>)
 8000638:	811a      	strh	r2, [r3, #8]
	    converted_PEC_15[3] = in[3];
 800063a:	4b12      	ldr	r3, [pc, #72]	@ (8000684 <cmdPec+0x13c>)
 800063c:	88da      	ldrh	r2, [r3, #6]
 800063e:	4b0f      	ldr	r3, [pc, #60]	@ (800067c <cmdPec+0x134>)
 8000640:	80da      	strh	r2, [r3, #6]
	    converted_PEC_15[2] = converted_PEC_15[1];
 8000642:	4b0e      	ldr	r3, [pc, #56]	@ (800067c <cmdPec+0x134>)
 8000644:	885a      	ldrh	r2, [r3, #2]
 8000646:	4b0d      	ldr	r3, [pc, #52]	@ (800067c <cmdPec+0x134>)
 8000648:	809a      	strh	r2, [r3, #4]
	    converted_PEC_15[1] = converted_PEC_15[0];
 800064a:	4b0c      	ldr	r3, [pc, #48]	@ (800067c <cmdPec+0x134>)
 800064c:	881a      	ldrh	r2, [r3, #0]
 800064e:	4b0b      	ldr	r3, [pc, #44]	@ (800067c <cmdPec+0x134>)
 8000650:	805a      	strh	r2, [r3, #2]
	    converted_PEC_15[0] = in[0];
 8000652:	4b0c      	ldr	r3, [pc, #48]	@ (8000684 <cmdPec+0x13c>)
 8000654:	881a      	ldrh	r2, [r3, #0]
 8000656:	4b09      	ldr	r3, [pc, #36]	@ (800067c <cmdPec+0x134>)
 8000658:	801a      	strh	r2, [r3, #0]
	 for(int i = 15;i > -1;i--) {
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	3b01      	subs	r3, #1
 800065e:	60fb      	str	r3, [r7, #12]
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	2b00      	cmp	r3, #0
 8000664:	da83      	bge.n	800056e <cmdPec+0x26>

	    }

	 return binary_array_to_word(converted_PEC_15);
 8000666:	4805      	ldr	r0, [pc, #20]	@ (800067c <cmdPec+0x134>)
 8000668:	f7ff ff49 	bl	80004fe <binary_array_to_word>
 800066c:	4603      	mov	r3, r0

}
 800066e:	4618      	mov	r0, r3
 8000670:	3710      	adds	r7, #16
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	20000000 	.word	0x20000000
 800067c:	2000008c 	.word	0x2000008c
 8000680:	200000ec 	.word	0x200000ec
 8000684:	200000cc 	.word	0x200000cc

08000688 <dataPec>:


uint16_t dataPec(uint8_t bytes, uint8_t *data) {
 8000688:	b580      	push	{r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	6039      	str	r1, [r7, #0]
 8000692:	71fb      	strb	r3, [r7, #7]




    byte_array_to_bit_array10_data_PEC(data, 6, binary_array,expanded_array);
 8000694:	4b37      	ldr	r3, [pc, #220]	@ (8000774 <dataPec+0xec>)
 8000696:	4a38      	ldr	r2, [pc, #224]	@ (8000778 <dataPec+0xf0>)
 8000698:	2106      	movs	r1, #6
 800069a:	6838      	ldr	r0, [r7, #0]
 800069c:	f000 f986 	bl	80009ac <byte_array_to_bit_array10_data_PEC>
    word_to_binary_array10_data_PEC(init_PEC,converted_PEC_10);
 80006a0:	4b36      	ldr	r3, [pc, #216]	@ (800077c <dataPec+0xf4>)
 80006a2:	881b      	ldrh	r3, [r3, #0]
 80006a4:	4936      	ldr	r1, [pc, #216]	@ (8000780 <dataPec+0xf8>)
 80006a6:	4618      	mov	r0, r3
 80006a8:	f000 f9d4 	bl	8000a54 <word_to_binary_array10_data_PEC>


    for (int i = 53; i > -1; i--) {
 80006ac:	2335      	movs	r3, #53	@ 0x35
 80006ae:	60fb      	str	r3, [r7, #12]
 80006b0:	e055      	b.n	800075e <dataPec+0xd6>

        in[0] = expanded_array[i] ^ converted_PEC_10[9];
 80006b2:	4a30      	ldr	r2, [pc, #192]	@ (8000774 <dataPec+0xec>)
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	4413      	add	r3, r2
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	461a      	mov	r2, r3
 80006bc:	4b30      	ldr	r3, [pc, #192]	@ (8000780 <dataPec+0xf8>)
 80006be:	8a5b      	ldrh	r3, [r3, #18]
 80006c0:	4053      	eors	r3, r2
 80006c2:	b29a      	uxth	r2, r3
 80006c4:	4b2f      	ldr	r3, [pc, #188]	@ (8000784 <dataPec+0xfc>)
 80006c6:	801a      	strh	r2, [r3, #0]
        in[1] = in[0] ^ converted_PEC_10[0];
 80006c8:	4b2e      	ldr	r3, [pc, #184]	@ (8000784 <dataPec+0xfc>)
 80006ca:	881a      	ldrh	r2, [r3, #0]
 80006cc:	4b2c      	ldr	r3, [pc, #176]	@ (8000780 <dataPec+0xf8>)
 80006ce:	881b      	ldrh	r3, [r3, #0]
 80006d0:	4053      	eors	r3, r2
 80006d2:	b29a      	uxth	r2, r3
 80006d4:	4b2b      	ldr	r3, [pc, #172]	@ (8000784 <dataPec+0xfc>)
 80006d6:	805a      	strh	r2, [r3, #2]
        in[2] = in[0] ^ converted_PEC_10[1];
 80006d8:	4b2a      	ldr	r3, [pc, #168]	@ (8000784 <dataPec+0xfc>)
 80006da:	881a      	ldrh	r2, [r3, #0]
 80006dc:	4b28      	ldr	r3, [pc, #160]	@ (8000780 <dataPec+0xf8>)
 80006de:	885b      	ldrh	r3, [r3, #2]
 80006e0:	4053      	eors	r3, r2
 80006e2:	b29a      	uxth	r2, r3
 80006e4:	4b27      	ldr	r3, [pc, #156]	@ (8000784 <dataPec+0xfc>)
 80006e6:	809a      	strh	r2, [r3, #4]
        in[3] = in[0] ^ converted_PEC_10[2];
 80006e8:	4b26      	ldr	r3, [pc, #152]	@ (8000784 <dataPec+0xfc>)
 80006ea:	881a      	ldrh	r2, [r3, #0]
 80006ec:	4b24      	ldr	r3, [pc, #144]	@ (8000780 <dataPec+0xf8>)
 80006ee:	889b      	ldrh	r3, [r3, #4]
 80006f0:	4053      	eors	r3, r2
 80006f2:	b29a      	uxth	r2, r3
 80006f4:	4b23      	ldr	r3, [pc, #140]	@ (8000784 <dataPec+0xfc>)
 80006f6:	80da      	strh	r2, [r3, #6]
        in[7] = in[0] ^ converted_PEC_10[6];
 80006f8:	4b22      	ldr	r3, [pc, #136]	@ (8000784 <dataPec+0xfc>)
 80006fa:	881a      	ldrh	r2, [r3, #0]
 80006fc:	4b20      	ldr	r3, [pc, #128]	@ (8000780 <dataPec+0xf8>)
 80006fe:	899b      	ldrh	r3, [r3, #12]
 8000700:	4053      	eors	r3, r2
 8000702:	b29a      	uxth	r2, r3
 8000704:	4b1f      	ldr	r3, [pc, #124]	@ (8000784 <dataPec+0xfc>)
 8000706:	81da      	strh	r2, [r3, #14]

        converted_PEC_10[9] = converted_PEC_10[8];
 8000708:	4b1d      	ldr	r3, [pc, #116]	@ (8000780 <dataPec+0xf8>)
 800070a:	8a1a      	ldrh	r2, [r3, #16]
 800070c:	4b1c      	ldr	r3, [pc, #112]	@ (8000780 <dataPec+0xf8>)
 800070e:	825a      	strh	r2, [r3, #18]
        converted_PEC_10[8] = converted_PEC_10[7];
 8000710:	4b1b      	ldr	r3, [pc, #108]	@ (8000780 <dataPec+0xf8>)
 8000712:	89da      	ldrh	r2, [r3, #14]
 8000714:	4b1a      	ldr	r3, [pc, #104]	@ (8000780 <dataPec+0xf8>)
 8000716:	821a      	strh	r2, [r3, #16]
        converted_PEC_10[7] = in[7];
 8000718:	4b1a      	ldr	r3, [pc, #104]	@ (8000784 <dataPec+0xfc>)
 800071a:	89da      	ldrh	r2, [r3, #14]
 800071c:	4b18      	ldr	r3, [pc, #96]	@ (8000780 <dataPec+0xf8>)
 800071e:	81da      	strh	r2, [r3, #14]
        converted_PEC_10[6] = converted_PEC_10[5];
 8000720:	4b17      	ldr	r3, [pc, #92]	@ (8000780 <dataPec+0xf8>)
 8000722:	895a      	ldrh	r2, [r3, #10]
 8000724:	4b16      	ldr	r3, [pc, #88]	@ (8000780 <dataPec+0xf8>)
 8000726:	819a      	strh	r2, [r3, #12]
        converted_PEC_10[5] = converted_PEC_10[4];
 8000728:	4b15      	ldr	r3, [pc, #84]	@ (8000780 <dataPec+0xf8>)
 800072a:	891a      	ldrh	r2, [r3, #8]
 800072c:	4b14      	ldr	r3, [pc, #80]	@ (8000780 <dataPec+0xf8>)
 800072e:	815a      	strh	r2, [r3, #10]
        converted_PEC_10[4] = converted_PEC_10[3];
 8000730:	4b13      	ldr	r3, [pc, #76]	@ (8000780 <dataPec+0xf8>)
 8000732:	88da      	ldrh	r2, [r3, #6]
 8000734:	4b12      	ldr	r3, [pc, #72]	@ (8000780 <dataPec+0xf8>)
 8000736:	811a      	strh	r2, [r3, #8]
        converted_PEC_10[3] = in[3];
 8000738:	4b12      	ldr	r3, [pc, #72]	@ (8000784 <dataPec+0xfc>)
 800073a:	88da      	ldrh	r2, [r3, #6]
 800073c:	4b10      	ldr	r3, [pc, #64]	@ (8000780 <dataPec+0xf8>)
 800073e:	80da      	strh	r2, [r3, #6]
        converted_PEC_10[2] = in[2];
 8000740:	4b10      	ldr	r3, [pc, #64]	@ (8000784 <dataPec+0xfc>)
 8000742:	889a      	ldrh	r2, [r3, #4]
 8000744:	4b0e      	ldr	r3, [pc, #56]	@ (8000780 <dataPec+0xf8>)
 8000746:	809a      	strh	r2, [r3, #4]
        converted_PEC_10[1] = in[1];
 8000748:	4b0e      	ldr	r3, [pc, #56]	@ (8000784 <dataPec+0xfc>)
 800074a:	885a      	ldrh	r2, [r3, #2]
 800074c:	4b0c      	ldr	r3, [pc, #48]	@ (8000780 <dataPec+0xf8>)
 800074e:	805a      	strh	r2, [r3, #2]
        converted_PEC_10[0] = in[0];
 8000750:	4b0c      	ldr	r3, [pc, #48]	@ (8000784 <dataPec+0xfc>)
 8000752:	881a      	ldrh	r2, [r3, #0]
 8000754:	4b0a      	ldr	r3, [pc, #40]	@ (8000780 <dataPec+0xf8>)
 8000756:	801a      	strh	r2, [r3, #0]
    for (int i = 53; i > -1; i--) {
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	3b01      	subs	r3, #1
 800075c:	60fb      	str	r3, [r7, #12]
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	2b00      	cmp	r3, #0
 8000762:	daa6      	bge.n	80006b2 <dataPec+0x2a>


    }


    return binary_array_to_word(converted_PEC_10);
 8000764:	4806      	ldr	r0, [pc, #24]	@ (8000780 <dataPec+0xf8>)
 8000766:	f7ff feca 	bl	80004fe <binary_array_to_word>
 800076a:	4603      	mov	r3, r0

}
 800076c:	4618      	mov	r0, r3
 800076e:	3710      	adds	r7, #16
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	20000204 	.word	0x20000204
 8000778:	200001d4 	.word	0x200001d4
 800077c:	20000000 	.word	0x20000000
 8000780:	200000ac 	.word	0x200000ac
 8000784:	200000cc 	.word	0x200000cc

08000788 <construct_spi_write_frame>:
/*
 * instruction - 0 => COMMAND SPI FRAME
 * instruction - 1 => WRITE DATA SPI FRAME
 * instruction - 2 => READ DATA SPI FRAME
 * */
void construct_spi_write_frame(uint16_t command, uint8_t *spi_frame, uint16_t instruction, uint8_t *data, uint8_t data_size) {
 8000788:	b580      	push	{r7, lr}
 800078a:	b088      	sub	sp, #32
 800078c:	af00      	add	r7, sp, #0
 800078e:	60b9      	str	r1, [r7, #8]
 8000790:	607b      	str	r3, [r7, #4]
 8000792:	4603      	mov	r3, r0
 8000794:	81fb      	strh	r3, [r7, #14]
 8000796:	4613      	mov	r3, r2
 8000798:	81bb      	strh	r3, [r7, #12]
    // Construct the 32-bit frame
    uint32_t frame = 0;
 800079a:	2300      	movs	r3, #0
 800079c:	617b      	str	r3, [r7, #20]
    uint16_t pec = cmdPec(command);  // Calculate the 15-bit PEC
 800079e:	89fb      	ldrh	r3, [r7, #14]
 80007a0:	4618      	mov	r0, r3
 80007a2:	f7ff fed1 	bl	8000548 <cmdPec>
 80007a6:	4603      	mov	r3, r0
 80007a8:	827b      	strh	r3, [r7, #18]
    uint8_t frame_counter = 0;  // Start counting from 0 for the frame
 80007aa:	2300      	movs	r3, #0
 80007ac:	77fb      	strb	r3, [r7, #31]
    // 5 bits of 00000 (shifted left 27 bits)
    // 11 bits of command (shifted left 16 bits)
    // 15 bits of PEC (shifted left 1 bit)
    // 1 bit of 0
    frame |= (0x00 << 27);               // 5-bit prefix 00000
    frame |= ((command & 0x7FF) << 16);  // 11-bit command
 80007ae:	89fb      	ldrh	r3, [r7, #14]
 80007b0:	041a      	lsls	r2, r3, #16
 80007b2:	4b40      	ldr	r3, [pc, #256]	@ (80008b4 <construct_spi_write_frame+0x12c>)
 80007b4:	4013      	ands	r3, r2
 80007b6:	697a      	ldr	r2, [r7, #20]
 80007b8:	4313      	orrs	r3, r2
 80007ba:	617b      	str	r3, [r7, #20]
    frame |= ((pec & 0x7FFF) << 1);      // 15-bit PEC
 80007bc:	8a7b      	ldrh	r3, [r7, #18]
 80007be:	005b      	lsls	r3, r3, #1
 80007c0:	b29b      	uxth	r3, r3
 80007c2:	697a      	ldr	r2, [r7, #20]
 80007c4:	4313      	orrs	r3, r2
 80007c6:	617b      	str	r3, [r7, #20]
    frame |= 0x00;                       // 1-bit suffix 0

    // Break the 32-bit frame into 4 bytes to send via SPI
    spi_frame[frame_counter++] = (frame >> 24) & 0xFF;
 80007c8:	697b      	ldr	r3, [r7, #20]
 80007ca:	0e1a      	lsrs	r2, r3, #24
 80007cc:	7ffb      	ldrb	r3, [r7, #31]
 80007ce:	1c59      	adds	r1, r3, #1
 80007d0:	77f9      	strb	r1, [r7, #31]
 80007d2:	4619      	mov	r1, r3
 80007d4:	68bb      	ldr	r3, [r7, #8]
 80007d6:	440b      	add	r3, r1
 80007d8:	b2d2      	uxtb	r2, r2
 80007da:	701a      	strb	r2, [r3, #0]
    spi_frame[frame_counter++] = (frame >> 16) & 0xFF;
 80007dc:	697b      	ldr	r3, [r7, #20]
 80007de:	0c1a      	lsrs	r2, r3, #16
 80007e0:	7ffb      	ldrb	r3, [r7, #31]
 80007e2:	1c59      	adds	r1, r3, #1
 80007e4:	77f9      	strb	r1, [r7, #31]
 80007e6:	4619      	mov	r1, r3
 80007e8:	68bb      	ldr	r3, [r7, #8]
 80007ea:	440b      	add	r3, r1
 80007ec:	b2d2      	uxtb	r2, r2
 80007ee:	701a      	strb	r2, [r3, #0]
    spi_frame[frame_counter++] = (frame >> 8) & 0xFF;
 80007f0:	697b      	ldr	r3, [r7, #20]
 80007f2:	0a1a      	lsrs	r2, r3, #8
 80007f4:	7ffb      	ldrb	r3, [r7, #31]
 80007f6:	1c59      	adds	r1, r3, #1
 80007f8:	77f9      	strb	r1, [r7, #31]
 80007fa:	4619      	mov	r1, r3
 80007fc:	68bb      	ldr	r3, [r7, #8]
 80007fe:	440b      	add	r3, r1
 8000800:	b2d2      	uxtb	r2, r2
 8000802:	701a      	strb	r2, [r3, #0]
    spi_frame[frame_counter++] = (frame) & 0xFF;
 8000804:	7ffb      	ldrb	r3, [r7, #31]
 8000806:	1c5a      	adds	r2, r3, #1
 8000808:	77fa      	strb	r2, [r7, #31]
 800080a:	461a      	mov	r2, r3
 800080c:	68bb      	ldr	r3, [r7, #8]
 800080e:	4413      	add	r3, r2
 8000810:	697a      	ldr	r2, [r7, #20]
 8000812:	b2d2      	uxtb	r2, r2
 8000814:	701a      	strb	r2, [r3, #0]

    // If it's just a command, return here
    if (instruction == 0) {
 8000816:	89bb      	ldrh	r3, [r7, #12]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d046      	beq.n	80008aa <construct_spi_write_frame+0x122>
        return;
    }

    // Otherwise, add the data for a write instruction
    if (instruction == 1 && data != NULL && data_size > 0) {
 800081c:	89bb      	ldrh	r3, [r7, #12]
 800081e:	2b01      	cmp	r3, #1
 8000820:	d139      	bne.n	8000896 <construct_spi_write_frame+0x10e>
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	2b00      	cmp	r3, #0
 8000826:	d036      	beq.n	8000896 <construct_spi_write_frame+0x10e>
 8000828:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800082c:	2b00      	cmp	r3, #0
 800082e:	d032      	beq.n	8000896 <construct_spi_write_frame+0x10e>
        // Add the data bytes
        for (int i = 0; i < data_size; i++) {
 8000830:	2300      	movs	r3, #0
 8000832:	61bb      	str	r3, [r7, #24]
 8000834:	e00d      	b.n	8000852 <construct_spi_write_frame+0xca>
            spi_frame[frame_counter++] = data[i];
 8000836:	69bb      	ldr	r3, [r7, #24]
 8000838:	687a      	ldr	r2, [r7, #4]
 800083a:	441a      	add	r2, r3
 800083c:	7ffb      	ldrb	r3, [r7, #31]
 800083e:	1c59      	adds	r1, r3, #1
 8000840:	77f9      	strb	r1, [r7, #31]
 8000842:	4619      	mov	r1, r3
 8000844:	68bb      	ldr	r3, [r7, #8]
 8000846:	440b      	add	r3, r1
 8000848:	7812      	ldrb	r2, [r2, #0]
 800084a:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < data_size; i++) {
 800084c:	69bb      	ldr	r3, [r7, #24]
 800084e:	3301      	adds	r3, #1
 8000850:	61bb      	str	r3, [r7, #24]
 8000852:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000856:	69ba      	ldr	r2, [r7, #24]
 8000858:	429a      	cmp	r2, r3
 800085a:	dbec      	blt.n	8000836 <construct_spi_write_frame+0xae>
        }

        // Calculate data PEC (implement your PEC calculation for data)
        //uint8_t data_PEC = pec10_calc(data,1);  // Replace with actual data PEC calculation
        uint16_t dPEC = dataPec(data_size, data);
 800085c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000860:	6879      	ldr	r1, [r7, #4]
 8000862:	4618      	mov	r0, r3
 8000864:	f7ff ff10 	bl	8000688 <dataPec>
 8000868:	4603      	mov	r3, r0
 800086a:	823b      	strh	r3, [r7, #16]
        // Add the data PEC to the frame (10-bit PEC in 2 bytes)
        spi_frame[frame_counter++] = (dPEC >> 8) & 0xFF;  // High byte of PEC
 800086c:	8a3b      	ldrh	r3, [r7, #16]
 800086e:	0a1b      	lsrs	r3, r3, #8
 8000870:	b29a      	uxth	r2, r3
 8000872:	7ffb      	ldrb	r3, [r7, #31]
 8000874:	1c59      	adds	r1, r3, #1
 8000876:	77f9      	strb	r1, [r7, #31]
 8000878:	4619      	mov	r1, r3
 800087a:	68bb      	ldr	r3, [r7, #8]
 800087c:	440b      	add	r3, r1
 800087e:	b2d2      	uxtb	r2, r2
 8000880:	701a      	strb	r2, [r3, #0]
        spi_frame[frame_counter++] = dPEC & 0xFF;         // Low byte of PEC
 8000882:	7ffb      	ldrb	r3, [r7, #31]
 8000884:	1c5a      	adds	r2, r3, #1
 8000886:	77fa      	strb	r2, [r7, #31]
 8000888:	461a      	mov	r2, r3
 800088a:	68bb      	ldr	r3, [r7, #8]
 800088c:	4413      	add	r3, r2
 800088e:	8a3a      	ldrh	r2, [r7, #16]
 8000890:	b2d2      	uxtb	r2, r2
 8000892:	701a      	strb	r2, [r3, #0]
    if (instruction == 1 && data != NULL && data_size > 0) {
 8000894:	e00a      	b.n	80008ac <construct_spi_write_frame+0x124>
    }

    else if (instruction == 2 && data == NULL && data_size == 0) {
 8000896:	89bb      	ldrh	r3, [r7, #12]
 8000898:	2b02      	cmp	r3, #2
 800089a:	d107      	bne.n	80008ac <construct_spi_write_frame+0x124>
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d104      	bne.n	80008ac <construct_spi_write_frame+0x124>
 80008a2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	e000      	b.n	80008ac <construct_spi_write_frame+0x124>
        return;
 80008aa:	bf00      	nop
    	return;



    }
}
 80008ac:	3720      	adds	r7, #32
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	07ff0000 	.word	0x07ff0000

080008b8 <BMS_read_SPI>:

	void BMS_read_SPI(uint16_t command, uint8_t *spi_frame, uint8_t *read_frame) {
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b086      	sub	sp, #24
 80008bc:	af02      	add	r7, sp, #8
 80008be:	4603      	mov	r3, r0
 80008c0:	60b9      	str	r1, [r7, #8]
 80008c2:	607a      	str	r2, [r7, #4]
 80008c4:	81fb      	strh	r3, [r7, #14]
		construct_spi_write_frame(command, spi_frame, 2, NULL, 0);
 80008c6:	89f8      	ldrh	r0, [r7, #14]
 80008c8:	2300      	movs	r3, #0
 80008ca:	9300      	str	r3, [sp, #0]
 80008cc:	2300      	movs	r3, #0
 80008ce:	2202      	movs	r2, #2
 80008d0:	68b9      	ldr	r1, [r7, #8]
 80008d2:	f7ff ff59 	bl	8000788 <construct_spi_write_frame>
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3, GPIO_PIN_RESET);
 80008d6:	2200      	movs	r2, #0
 80008d8:	2108      	movs	r1, #8
 80008da:	480c      	ldr	r0, [pc, #48]	@ (800090c <BMS_read_SPI+0x54>)
 80008dc:	f000 fe2c 	bl	8001538 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, spi_frame, 4, 10);
 80008e0:	230a      	movs	r3, #10
 80008e2:	2204      	movs	r2, #4
 80008e4:	68b9      	ldr	r1, [r7, #8]
 80008e6:	480a      	ldr	r0, [pc, #40]	@ (8000910 <BMS_read_SPI+0x58>)
 80008e8:	f001 fb2d 	bl	8001f46 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, read_frame, 8, 10);
 80008ec:	230a      	movs	r3, #10
 80008ee:	2208      	movs	r2, #8
 80008f0:	6879      	ldr	r1, [r7, #4]
 80008f2:	4807      	ldr	r0, [pc, #28]	@ (8000910 <BMS_read_SPI+0x58>)
 80008f4:	f001 fc6b 	bl	80021ce <HAL_SPI_Receive>
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3, GPIO_PIN_SET);
 80008f8:	2201      	movs	r2, #1
 80008fa:	2108      	movs	r1, #8
 80008fc:	4803      	ldr	r0, [pc, #12]	@ (800090c <BMS_read_SPI+0x54>)
 80008fe:	f000 fe1b 	bl	8001538 <HAL_GPIO_WritePin>
	}
 8000902:	bf00      	nop
 8000904:	3710      	adds	r7, #16
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	40021000 	.word	0x40021000
 8000910:	20000034 	.word	0x20000034

08000914 <BMS_write_SPI>:
		HAL_SPI_Transmit(&hspi2, spi_frame, 4, 10);
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3, GPIO_PIN_SET);

	}

	void BMS_write_SPI(uint16_t command, uint8_t *spi_frame, uint8_t *data, uint8_t data_size) {
 8000914:	b580      	push	{r7, lr}
 8000916:	b086      	sub	sp, #24
 8000918:	af02      	add	r7, sp, #8
 800091a:	60b9      	str	r1, [r7, #8]
 800091c:	607a      	str	r2, [r7, #4]
 800091e:	461a      	mov	r2, r3
 8000920:	4603      	mov	r3, r0
 8000922:	81fb      	strh	r3, [r7, #14]
 8000924:	4613      	mov	r3, r2
 8000926:	737b      	strb	r3, [r7, #13]
		construct_spi_write_frame(command, spi_frame, 1, data, data_size);
 8000928:	89f8      	ldrh	r0, [r7, #14]
 800092a:	7b7b      	ldrb	r3, [r7, #13]
 800092c:	9300      	str	r3, [sp, #0]
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	2201      	movs	r2, #1
 8000932:	68b9      	ldr	r1, [r7, #8]
 8000934:	f7ff ff28 	bl	8000788 <construct_spi_write_frame>
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3, GPIO_PIN_RESET);
 8000938:	2200      	movs	r2, #0
 800093a:	2108      	movs	r1, #8
 800093c:	480a      	ldr	r0, [pc, #40]	@ (8000968 <BMS_write_SPI+0x54>)
 800093e:	f000 fdfb 	bl	8001538 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, spi_frame, data_size + 4 + 2, 10);
 8000942:	7b7b      	ldrb	r3, [r7, #13]
 8000944:	b29b      	uxth	r3, r3
 8000946:	3306      	adds	r3, #6
 8000948:	b29a      	uxth	r2, r3
 800094a:	230a      	movs	r3, #10
 800094c:	68b9      	ldr	r1, [r7, #8]
 800094e:	4807      	ldr	r0, [pc, #28]	@ (800096c <BMS_write_SPI+0x58>)
 8000950:	f001 faf9 	bl	8001f46 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3, GPIO_PIN_SET);
 8000954:	2201      	movs	r2, #1
 8000956:	2108      	movs	r1, #8
 8000958:	4803      	ldr	r0, [pc, #12]	@ (8000968 <BMS_write_SPI+0x54>)
 800095a:	f000 fded 	bl	8001538 <HAL_GPIO_WritePin>
	}
 800095e:	bf00      	nop
 8000960:	3710      	adds	r7, #16
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	40021000 	.word	0x40021000
 800096c:	20000034 	.word	0x20000034

08000970 <wakeup_dummy>:




	void wakeup_dummy() {
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
	    HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3, GPIO_PIN_RESET);
 8000974:	2200      	movs	r2, #0
 8000976:	2108      	movs	r1, #8
 8000978:	4809      	ldr	r0, [pc, #36]	@ (80009a0 <wakeup_dummy+0x30>)
 800097a:	f000 fddd 	bl	8001538 <HAL_GPIO_WritePin>
	    HAL_SPI_Transmit(&hspi2, dummy_wakeup, 120, 10);
 800097e:	230a      	movs	r3, #10
 8000980:	2278      	movs	r2, #120	@ 0x78
 8000982:	4908      	ldr	r1, [pc, #32]	@ (80009a4 <wakeup_dummy+0x34>)
 8000984:	4808      	ldr	r0, [pc, #32]	@ (80009a8 <wakeup_dummy+0x38>)
 8000986:	f001 fade 	bl	8001f46 <HAL_SPI_Transmit>
	    HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3, GPIO_PIN_SET); //Send a dummy byte to trigger IC
 800098a:	2201      	movs	r2, #1
 800098c:	2108      	movs	r1, #8
 800098e:	4804      	ldr	r0, [pc, #16]	@ (80009a0 <wakeup_dummy+0x30>)
 8000990:	f000 fdd2 	bl	8001538 <HAL_GPIO_WritePin>
	    HAL_Delay(1.5);
 8000994:	2001      	movs	r0, #1
 8000996:	f000 fb29 	bl	8000fec <HAL_Delay>
	}
 800099a:	bf00      	nop
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40021000 	.word	0x40021000
 80009a4:	2000015c 	.word	0x2000015c
 80009a8:	20000034 	.word	0x20000034

080009ac <byte_array_to_bit_array10_data_PEC>:

	}


	// Function to convert an array of bytes into an array of bits
	void byte_array_to_bit_array10_data_PEC(uint8_t *data, int data_len, uint8_t *bit_array, uint8_t *expanded_array) {
 80009ac:	b480      	push	{r7}
 80009ae:	b089      	sub	sp, #36	@ 0x24
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	60f8      	str	r0, [r7, #12]
 80009b4:	60b9      	str	r1, [r7, #8]
 80009b6:	607a      	str	r2, [r7, #4]
 80009b8:	603b      	str	r3, [r7, #0]
	    int j = -1;
 80009ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80009be:	61fb      	str	r3, [r7, #28]
	    // Iterate through each byte in the data array
	    for (int i = data_len; i > 0; i--) {
 80009c0:	68bb      	ldr	r3, [r7, #8]
 80009c2:	61bb      	str	r3, [r7, #24]
 80009c4:	e02a      	b.n	8000a1c <byte_array_to_bit_array10_data_PEC+0x70>
	        // Extract each bit from the current byte and store it in the bit array
	        j++;
 80009c6:	69fb      	ldr	r3, [r7, #28]
 80009c8:	3301      	adds	r3, #1
 80009ca:	61fb      	str	r3, [r7, #28]
	        for ( int bit = 0; bit < 8; bit++) {
 80009cc:	2300      	movs	r3, #0
 80009ce:	617b      	str	r3, [r7, #20]
 80009d0:	e01e      	b.n	8000a10 <byte_array_to_bit_array10_data_PEC+0x64>
	            bit_array[j*8+bit] = (data[i-1] & 1);
 80009d2:	69bb      	ldr	r3, [r7, #24]
 80009d4:	3b01      	subs	r3, #1
 80009d6:	68fa      	ldr	r2, [r7, #12]
 80009d8:	4413      	add	r3, r2
 80009da:	781a      	ldrb	r2, [r3, #0]
 80009dc:	69fb      	ldr	r3, [r7, #28]
 80009de:	00d9      	lsls	r1, r3, #3
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	440b      	add	r3, r1
 80009e4:	4619      	mov	r1, r3
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	440b      	add	r3, r1
 80009ea:	f002 0201 	and.w	r2, r2, #1
 80009ee:	b2d2      	uxtb	r2, r2
 80009f0:	701a      	strb	r2, [r3, #0]
	            data[i-1] = data[i-1] >> 1;
 80009f2:	69bb      	ldr	r3, [r7, #24]
 80009f4:	3b01      	subs	r3, #1
 80009f6:	68fa      	ldr	r2, [r7, #12]
 80009f8:	4413      	add	r3, r2
 80009fa:	781a      	ldrb	r2, [r3, #0]
 80009fc:	69bb      	ldr	r3, [r7, #24]
 80009fe:	3b01      	subs	r3, #1
 8000a00:	68f9      	ldr	r1, [r7, #12]
 8000a02:	440b      	add	r3, r1
 8000a04:	0852      	lsrs	r2, r2, #1
 8000a06:	b2d2      	uxtb	r2, r2
 8000a08:	701a      	strb	r2, [r3, #0]
	        for ( int bit = 0; bit < 8; bit++) {
 8000a0a:	697b      	ldr	r3, [r7, #20]
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	617b      	str	r3, [r7, #20]
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	2b07      	cmp	r3, #7
 8000a14:	dddd      	ble.n	80009d2 <byte_array_to_bit_array10_data_PEC+0x26>
	    for (int i = data_len; i > 0; i--) {
 8000a16:	69bb      	ldr	r3, [r7, #24]
 8000a18:	3b01      	subs	r3, #1
 8000a1a:	61bb      	str	r3, [r7, #24]
 8000a1c:	69bb      	ldr	r3, [r7, #24]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	dcd1      	bgt.n	80009c6 <byte_array_to_bit_array10_data_PEC+0x1a>

	        }


	    }
	    for (int i = 6; i < 54; i++) {
 8000a22:	2306      	movs	r3, #6
 8000a24:	613b      	str	r3, [r7, #16]
 8000a26:	e00b      	b.n	8000a40 <byte_array_to_bit_array10_data_PEC+0x94>
	        expanded_array[i] = bit_array[i-6];
 8000a28:	693b      	ldr	r3, [r7, #16]
 8000a2a:	3b06      	subs	r3, #6
 8000a2c:	687a      	ldr	r2, [r7, #4]
 8000a2e:	441a      	add	r2, r3
 8000a30:	693b      	ldr	r3, [r7, #16]
 8000a32:	6839      	ldr	r1, [r7, #0]
 8000a34:	440b      	add	r3, r1
 8000a36:	7812      	ldrb	r2, [r2, #0]
 8000a38:	701a      	strb	r2, [r3, #0]
	    for (int i = 6; i < 54; i++) {
 8000a3a:	693b      	ldr	r3, [r7, #16]
 8000a3c:	3301      	adds	r3, #1
 8000a3e:	613b      	str	r3, [r7, #16]
 8000a40:	693b      	ldr	r3, [r7, #16]
 8000a42:	2b35      	cmp	r3, #53	@ 0x35
 8000a44:	ddf0      	ble.n	8000a28 <byte_array_to_bit_array10_data_PEC+0x7c>
	    }

	}
 8000a46:	bf00      	nop
 8000a48:	bf00      	nop
 8000a4a:	3724      	adds	r7, #36	@ 0x24
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr

08000a54 <word_to_binary_array10_data_PEC>:

	void word_to_binary_array10_data_PEC(uint16_t word, uint16_t binary_array[16]) {
 8000a54:	b480      	push	{r7}
 8000a56:	b085      	sub	sp, #20
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	6039      	str	r1, [r7, #0]
 8000a5e:	80fb      	strh	r3, [r7, #6]
	    // Loop through each bit in the 16-bit word, starting from LSB
	    for (int i = 0; i < 10; i++) {
 8000a60:	2300      	movs	r3, #0
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	e00f      	b.n	8000a86 <word_to_binary_array10_data_PEC+0x32>
	        // Extract the i-th bit and store it in the array
	        binary_array[i] = (word >> i) & 1;
 8000a66:	88fa      	ldrh	r2, [r7, #6]
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	fa42 f303 	asr.w	r3, r2, r3
 8000a6e:	b29a      	uxth	r2, r3
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	005b      	lsls	r3, r3, #1
 8000a74:	6839      	ldr	r1, [r7, #0]
 8000a76:	440b      	add	r3, r1
 8000a78:	f002 0201 	and.w	r2, r2, #1
 8000a7c:	b292      	uxth	r2, r2
 8000a7e:	801a      	strh	r2, [r3, #0]
	    for (int i = 0; i < 10; i++) {
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	3301      	adds	r3, #1
 8000a84:	60fb      	str	r3, [r7, #12]
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	2b09      	cmp	r3, #9
 8000a8a:	ddec      	ble.n	8000a66 <word_to_binary_array10_data_PEC+0x12>
	    }
	}
 8000a8c:	bf00      	nop
 8000a8e:	bf00      	nop
 8000a90:	3714      	adds	r7, #20
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
	...

08000a9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aa2:	f000 fa31 	bl	8000f08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aa6:	f000 f82f 	bl	8000b08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aaa:	f000 f8cd 	bl	8000c48 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000aae:	f000 f895 	bl	8000bdc <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  for(int i= 0; i < 120; i++ ) {
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	607b      	str	r3, [r7, #4]
 8000ab6:	e007      	b.n	8000ac8 <main+0x2c>

	  dummy_wakeup[i] = 0xFF;
 8000ab8:	4a0f      	ldr	r2, [pc, #60]	@ (8000af8 <main+0x5c>)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	4413      	add	r3, r2
 8000abe:	22ff      	movs	r2, #255	@ 0xff
 8000ac0:	701a      	strb	r2, [r3, #0]
  for(int i= 0; i < 120; i++ ) {
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	3301      	adds	r3, #1
 8000ac6:	607b      	str	r3, [r7, #4]
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	2b77      	cmp	r3, #119	@ 0x77
 8000acc:	ddf4      	ble.n	8000ab8 <main+0x1c>
  }


  wakeup_dummy();
 8000ace:	f7ff ff4f 	bl	8000970 <wakeup_dummy>
  HAL_Delay(10);
 8000ad2:	200a      	movs	r0, #10
 8000ad4:	f000 fa8a 	bl	8000fec <HAL_Delay>

  BMS_write_SPI(0x0001, spi_frame, write_data_A, 6);
 8000ad8:	2306      	movs	r3, #6
 8000ada:	4a08      	ldr	r2, [pc, #32]	@ (8000afc <main+0x60>)
 8000adc:	4908      	ldr	r1, [pc, #32]	@ (8000b00 <main+0x64>)
 8000ade:	2001      	movs	r0, #1
 8000ae0:	f7ff ff18 	bl	8000914 <BMS_write_SPI>
  HAL_Delay(2);
 8000ae4:	2002      	movs	r0, #2
 8000ae6:	f000 fa81 	bl	8000fec <HAL_Delay>
  BMS_read_SPI(0x0002, spi_frame, data_read);
 8000aea:	4a06      	ldr	r2, [pc, #24]	@ (8000b04 <main+0x68>)
 8000aec:	4904      	ldr	r1, [pc, #16]	@ (8000b00 <main+0x64>)
 8000aee:	2002      	movs	r0, #2
 8000af0:	f7ff fee2 	bl	80008b8 <BMS_read_SPI>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000af4:	bf00      	nop
 8000af6:	e7fd      	b.n	8000af4 <main+0x58>
 8000af8:	2000015c 	.word	0x2000015c
 8000afc:	20000004 	.word	0x20000004
 8000b00:	2000014c 	.word	0x2000014c
 8000b04:	2000010c 	.word	0x2000010c

08000b08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b094      	sub	sp, #80	@ 0x50
 8000b0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b0e:	f107 0320 	add.w	r3, r7, #32
 8000b12:	2230      	movs	r2, #48	@ 0x30
 8000b14:	2100      	movs	r1, #0
 8000b16:	4618      	mov	r0, r3
 8000b18:	f001 ff5e 	bl	80029d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b1c:	f107 030c 	add.w	r3, r7, #12
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	605a      	str	r2, [r3, #4]
 8000b26:	609a      	str	r2, [r3, #8]
 8000b28:	60da      	str	r2, [r3, #12]
 8000b2a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	60bb      	str	r3, [r7, #8]
 8000b30:	4b28      	ldr	r3, [pc, #160]	@ (8000bd4 <SystemClock_Config+0xcc>)
 8000b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b34:	4a27      	ldr	r2, [pc, #156]	@ (8000bd4 <SystemClock_Config+0xcc>)
 8000b36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b3a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b3c:	4b25      	ldr	r3, [pc, #148]	@ (8000bd4 <SystemClock_Config+0xcc>)
 8000b3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b44:	60bb      	str	r3, [r7, #8]
 8000b46:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b48:	2300      	movs	r3, #0
 8000b4a:	607b      	str	r3, [r7, #4]
 8000b4c:	4b22      	ldr	r3, [pc, #136]	@ (8000bd8 <SystemClock_Config+0xd0>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a21      	ldr	r2, [pc, #132]	@ (8000bd8 <SystemClock_Config+0xd0>)
 8000b52:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b56:	6013      	str	r3, [r2, #0]
 8000b58:	4b1f      	ldr	r3, [pc, #124]	@ (8000bd8 <SystemClock_Config+0xd0>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b60:	607b      	str	r3, [r7, #4]
 8000b62:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b64:	2301      	movs	r3, #1
 8000b66:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b68:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b6c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b72:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000b76:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b78:	2304      	movs	r3, #4
 8000b7a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000b7c:	2340      	movs	r3, #64	@ 0x40
 8000b7e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b80:	2302      	movs	r3, #2
 8000b82:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000b84:	2307      	movs	r3, #7
 8000b86:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b88:	f107 0320 	add.w	r3, r7, #32
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f000 fced 	bl	800156c <HAL_RCC_OscConfig>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b98:	f000 f8b4 	bl	8000d04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b9c:	230f      	movs	r3, #15
 8000b9e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000ba4:	2380      	movs	r3, #128	@ 0x80
 8000ba6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 8000ba8:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000bac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 8000bae:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000bb2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000bb4:	f107 030c 	add.w	r3, r7, #12
 8000bb8:	2101      	movs	r1, #1
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f000 ff4e 	bl	8001a5c <HAL_RCC_ClockConfig>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000bc6:	f000 f89d 	bl	8000d04 <Error_Handler>
  }
}
 8000bca:	bf00      	nop
 8000bcc:	3750      	adds	r7, #80	@ 0x50
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	40023800 	.word	0x40023800
 8000bd8:	40007000 	.word	0x40007000

08000bdc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000be0:	4b17      	ldr	r3, [pc, #92]	@ (8000c40 <MX_SPI2_Init+0x64>)
 8000be2:	4a18      	ldr	r2, [pc, #96]	@ (8000c44 <MX_SPI2_Init+0x68>)
 8000be4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000be6:	4b16      	ldr	r3, [pc, #88]	@ (8000c40 <MX_SPI2_Init+0x64>)
 8000be8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000bec:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000bee:	4b14      	ldr	r3, [pc, #80]	@ (8000c40 <MX_SPI2_Init+0x64>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bf4:	4b12      	ldr	r3, [pc, #72]	@ (8000c40 <MX_SPI2_Init+0x64>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bfa:	4b11      	ldr	r3, [pc, #68]	@ (8000c40 <MX_SPI2_Init+0x64>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c00:	4b0f      	ldr	r3, [pc, #60]	@ (8000c40 <MX_SPI2_Init+0x64>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000c06:	4b0e      	ldr	r3, [pc, #56]	@ (8000c40 <MX_SPI2_Init+0x64>)
 8000c08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c0c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c0e:	4b0c      	ldr	r3, [pc, #48]	@ (8000c40 <MX_SPI2_Init+0x64>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c14:	4b0a      	ldr	r3, [pc, #40]	@ (8000c40 <MX_SPI2_Init+0x64>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c1a:	4b09      	ldr	r3, [pc, #36]	@ (8000c40 <MX_SPI2_Init+0x64>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c20:	4b07      	ldr	r3, [pc, #28]	@ (8000c40 <MX_SPI2_Init+0x64>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000c26:	4b06      	ldr	r3, [pc, #24]	@ (8000c40 <MX_SPI2_Init+0x64>)
 8000c28:	220a      	movs	r2, #10
 8000c2a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000c2c:	4804      	ldr	r0, [pc, #16]	@ (8000c40 <MX_SPI2_Init+0x64>)
 8000c2e:	f001 f901 	bl	8001e34 <HAL_SPI_Init>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000c38:	f000 f864 	bl	8000d04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000c3c:	bf00      	nop
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	20000034 	.word	0x20000034
 8000c44:	40003800 	.word	0x40003800

08000c48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b08a      	sub	sp, #40	@ 0x28
 8000c4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	2200      	movs	r2, #0
 8000c54:	601a      	str	r2, [r3, #0]
 8000c56:	605a      	str	r2, [r3, #4]
 8000c58:	609a      	str	r2, [r3, #8]
 8000c5a:	60da      	str	r2, [r3, #12]
 8000c5c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	613b      	str	r3, [r7, #16]
 8000c62:	4b26      	ldr	r3, [pc, #152]	@ (8000cfc <MX_GPIO_Init+0xb4>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c66:	4a25      	ldr	r2, [pc, #148]	@ (8000cfc <MX_GPIO_Init+0xb4>)
 8000c68:	f043 0310 	orr.w	r3, r3, #16
 8000c6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c6e:	4b23      	ldr	r3, [pc, #140]	@ (8000cfc <MX_GPIO_Init+0xb4>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c72:	f003 0310 	and.w	r3, r3, #16
 8000c76:	613b      	str	r3, [r7, #16]
 8000c78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	60fb      	str	r3, [r7, #12]
 8000c7e:	4b1f      	ldr	r3, [pc, #124]	@ (8000cfc <MX_GPIO_Init+0xb4>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c82:	4a1e      	ldr	r2, [pc, #120]	@ (8000cfc <MX_GPIO_Init+0xb4>)
 8000c84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c8a:	4b1c      	ldr	r3, [pc, #112]	@ (8000cfc <MX_GPIO_Init+0xb4>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c92:	60fb      	str	r3, [r7, #12]
 8000c94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	60bb      	str	r3, [r7, #8]
 8000c9a:	4b18      	ldr	r3, [pc, #96]	@ (8000cfc <MX_GPIO_Init+0xb4>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9e:	4a17      	ldr	r2, [pc, #92]	@ (8000cfc <MX_GPIO_Init+0xb4>)
 8000ca0:	f043 0304 	orr.w	r3, r3, #4
 8000ca4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ca6:	4b15      	ldr	r3, [pc, #84]	@ (8000cfc <MX_GPIO_Init+0xb4>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000caa:	f003 0304 	and.w	r3, r3, #4
 8000cae:	60bb      	str	r3, [r7, #8]
 8000cb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	607b      	str	r3, [r7, #4]
 8000cb6:	4b11      	ldr	r3, [pc, #68]	@ (8000cfc <MX_GPIO_Init+0xb4>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cba:	4a10      	ldr	r2, [pc, #64]	@ (8000cfc <MX_GPIO_Init+0xb4>)
 8000cbc:	f043 0302 	orr.w	r3, r3, #2
 8000cc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cc2:	4b0e      	ldr	r3, [pc, #56]	@ (8000cfc <MX_GPIO_Init+0xb4>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc6:	f003 0302 	and.w	r3, r3, #2
 8000cca:	607b      	str	r3, [r7, #4]
 8000ccc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8000cce:	2201      	movs	r2, #1
 8000cd0:	2108      	movs	r1, #8
 8000cd2:	480b      	ldr	r0, [pc, #44]	@ (8000d00 <MX_GPIO_Init+0xb8>)
 8000cd4:	f000 fc30 	bl	8001538 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000cd8:	2308      	movs	r3, #8
 8000cda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ce8:	f107 0314 	add.w	r3, r7, #20
 8000cec:	4619      	mov	r1, r3
 8000cee:	4804      	ldr	r0, [pc, #16]	@ (8000d00 <MX_GPIO_Init+0xb8>)
 8000cf0:	f000 fa86 	bl	8001200 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cf4:	bf00      	nop
 8000cf6:	3728      	adds	r7, #40	@ 0x28
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	40023800 	.word	0x40023800
 8000d00:	40021000 	.word	0x40021000

08000d04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d08:	b672      	cpsid	i
}
 8000d0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d0c:	bf00      	nop
 8000d0e:	e7fd      	b.n	8000d0c <Error_Handler+0x8>

08000d10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	607b      	str	r3, [r7, #4]
 8000d1a:	4b10      	ldr	r3, [pc, #64]	@ (8000d5c <HAL_MspInit+0x4c>)
 8000d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d1e:	4a0f      	ldr	r2, [pc, #60]	@ (8000d5c <HAL_MspInit+0x4c>)
 8000d20:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d24:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d26:	4b0d      	ldr	r3, [pc, #52]	@ (8000d5c <HAL_MspInit+0x4c>)
 8000d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d2e:	607b      	str	r3, [r7, #4]
 8000d30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	603b      	str	r3, [r7, #0]
 8000d36:	4b09      	ldr	r3, [pc, #36]	@ (8000d5c <HAL_MspInit+0x4c>)
 8000d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d3a:	4a08      	ldr	r2, [pc, #32]	@ (8000d5c <HAL_MspInit+0x4c>)
 8000d3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d40:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d42:	4b06      	ldr	r3, [pc, #24]	@ (8000d5c <HAL_MspInit+0x4c>)
 8000d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d4a:	603b      	str	r3, [r7, #0]
 8000d4c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d4e:	2007      	movs	r0, #7
 8000d50:	f000 fa22 	bl	8001198 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d54:	bf00      	nop
 8000d56:	3708      	adds	r7, #8
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	40023800 	.word	0x40023800

08000d60 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b08a      	sub	sp, #40	@ 0x28
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d68:	f107 0314 	add.w	r3, r7, #20
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	605a      	str	r2, [r3, #4]
 8000d72:	609a      	str	r2, [r3, #8]
 8000d74:	60da      	str	r2, [r3, #12]
 8000d76:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a28      	ldr	r2, [pc, #160]	@ (8000e20 <HAL_SPI_MspInit+0xc0>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d14a      	bne.n	8000e18 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	613b      	str	r3, [r7, #16]
 8000d86:	4b27      	ldr	r3, [pc, #156]	@ (8000e24 <HAL_SPI_MspInit+0xc4>)
 8000d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d8a:	4a26      	ldr	r2, [pc, #152]	@ (8000e24 <HAL_SPI_MspInit+0xc4>)
 8000d8c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d90:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d92:	4b24      	ldr	r3, [pc, #144]	@ (8000e24 <HAL_SPI_MspInit+0xc4>)
 8000d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d9a:	613b      	str	r3, [r7, #16]
 8000d9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	60fb      	str	r3, [r7, #12]
 8000da2:	4b20      	ldr	r3, [pc, #128]	@ (8000e24 <HAL_SPI_MspInit+0xc4>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da6:	4a1f      	ldr	r2, [pc, #124]	@ (8000e24 <HAL_SPI_MspInit+0xc4>)
 8000da8:	f043 0304 	orr.w	r3, r3, #4
 8000dac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dae:	4b1d      	ldr	r3, [pc, #116]	@ (8000e24 <HAL_SPI_MspInit+0xc4>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db2:	f003 0304 	and.w	r3, r3, #4
 8000db6:	60fb      	str	r3, [r7, #12]
 8000db8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dba:	2300      	movs	r3, #0
 8000dbc:	60bb      	str	r3, [r7, #8]
 8000dbe:	4b19      	ldr	r3, [pc, #100]	@ (8000e24 <HAL_SPI_MspInit+0xc4>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc2:	4a18      	ldr	r2, [pc, #96]	@ (8000e24 <HAL_SPI_MspInit+0xc4>)
 8000dc4:	f043 0302 	orr.w	r3, r3, #2
 8000dc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dca:	4b16      	ldr	r3, [pc, #88]	@ (8000e24 <HAL_SPI_MspInit+0xc4>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dce:	f003 0302 	and.w	r3, r3, #2
 8000dd2:	60bb      	str	r3, [r7, #8]
 8000dd4:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000dd6:	230c      	movs	r3, #12
 8000dd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dde:	2300      	movs	r3, #0
 8000de0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de2:	2303      	movs	r3, #3
 8000de4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000de6:	2305      	movs	r3, #5
 8000de8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dea:	f107 0314 	add.w	r3, r7, #20
 8000dee:	4619      	mov	r1, r3
 8000df0:	480d      	ldr	r0, [pc, #52]	@ (8000e28 <HAL_SPI_MspInit+0xc8>)
 8000df2:	f000 fa05 	bl	8001200 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000df6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000dfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e00:	2300      	movs	r3, #0
 8000e02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e04:	2303      	movs	r3, #3
 8000e06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e08:	2305      	movs	r3, #5
 8000e0a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e0c:	f107 0314 	add.w	r3, r7, #20
 8000e10:	4619      	mov	r1, r3
 8000e12:	4806      	ldr	r0, [pc, #24]	@ (8000e2c <HAL_SPI_MspInit+0xcc>)
 8000e14:	f000 f9f4 	bl	8001200 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000e18:	bf00      	nop
 8000e1a:	3728      	adds	r7, #40	@ 0x28
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	40003800 	.word	0x40003800
 8000e24:	40023800 	.word	0x40023800
 8000e28:	40020800 	.word	0x40020800
 8000e2c:	40020400 	.word	0x40020400

08000e30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e34:	bf00      	nop
 8000e36:	e7fd      	b.n	8000e34 <NMI_Handler+0x4>

08000e38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e3c:	bf00      	nop
 8000e3e:	e7fd      	b.n	8000e3c <HardFault_Handler+0x4>

08000e40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e44:	bf00      	nop
 8000e46:	e7fd      	b.n	8000e44 <MemManage_Handler+0x4>

08000e48 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e4c:	bf00      	nop
 8000e4e:	e7fd      	b.n	8000e4c <BusFault_Handler+0x4>

08000e50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e54:	bf00      	nop
 8000e56:	e7fd      	b.n	8000e54 <UsageFault_Handler+0x4>

08000e58 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e5c:	bf00      	nop
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr

08000e66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e66:	b480      	push	{r7}
 8000e68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr

08000e74 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e78:	bf00      	nop
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr

08000e82 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e86:	f000 f891 	bl	8000fac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e8a:	bf00      	nop
 8000e8c:	bd80      	pop	{r7, pc}
	...

08000e90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e94:	4b06      	ldr	r3, [pc, #24]	@ (8000eb0 <SystemInit+0x20>)
 8000e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e9a:	4a05      	ldr	r2, [pc, #20]	@ (8000eb0 <SystemInit+0x20>)
 8000e9c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ea0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	e000ed00 	.word	0xe000ed00

08000eb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000eb4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000eec <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000eb8:	f7ff ffea 	bl	8000e90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ebc:	480c      	ldr	r0, [pc, #48]	@ (8000ef0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ebe:	490d      	ldr	r1, [pc, #52]	@ (8000ef4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ec0:	4a0d      	ldr	r2, [pc, #52]	@ (8000ef8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ec2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ec4:	e002      	b.n	8000ecc <LoopCopyDataInit>

08000ec6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ec6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ec8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eca:	3304      	adds	r3, #4

08000ecc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ecc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ece:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ed0:	d3f9      	bcc.n	8000ec6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ed2:	4a0a      	ldr	r2, [pc, #40]	@ (8000efc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ed4:	4c0a      	ldr	r4, [pc, #40]	@ (8000f00 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ed6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ed8:	e001      	b.n	8000ede <LoopFillZerobss>

08000eda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000edc:	3204      	adds	r2, #4

08000ede <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ede:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ee0:	d3fb      	bcc.n	8000eda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ee2:	f001 fd81 	bl	80029e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ee6:	f7ff fdd9 	bl	8000a9c <main>
  bx  lr    
 8000eea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000eec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ef0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ef4:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000ef8:	08002a68 	.word	0x08002a68
  ldr r2, =_sbss
 8000efc:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000f00:	20000240 	.word	0x20000240

08000f04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f04:	e7fe      	b.n	8000f04 <ADC_IRQHandler>
	...

08000f08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f0c:	4b0e      	ldr	r3, [pc, #56]	@ (8000f48 <HAL_Init+0x40>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a0d      	ldr	r2, [pc, #52]	@ (8000f48 <HAL_Init+0x40>)
 8000f12:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f18:	4b0b      	ldr	r3, [pc, #44]	@ (8000f48 <HAL_Init+0x40>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a0a      	ldr	r2, [pc, #40]	@ (8000f48 <HAL_Init+0x40>)
 8000f1e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f24:	4b08      	ldr	r3, [pc, #32]	@ (8000f48 <HAL_Init+0x40>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a07      	ldr	r2, [pc, #28]	@ (8000f48 <HAL_Init+0x40>)
 8000f2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f30:	2003      	movs	r0, #3
 8000f32:	f000 f931 	bl	8001198 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f36:	2000      	movs	r0, #0
 8000f38:	f000 f808 	bl	8000f4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f3c:	f7ff fee8 	bl	8000d10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f40:	2300      	movs	r3, #0
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	40023c00 	.word	0x40023c00

08000f4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f54:	4b12      	ldr	r3, [pc, #72]	@ (8000fa0 <HAL_InitTick+0x54>)
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	4b12      	ldr	r3, [pc, #72]	@ (8000fa4 <HAL_InitTick+0x58>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f62:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f000 f93b 	bl	80011e6 <HAL_SYSTICK_Config>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f76:	2301      	movs	r3, #1
 8000f78:	e00e      	b.n	8000f98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2b0f      	cmp	r3, #15
 8000f7e:	d80a      	bhi.n	8000f96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f80:	2200      	movs	r2, #0
 8000f82:	6879      	ldr	r1, [r7, #4]
 8000f84:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f88:	f000 f911 	bl	80011ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f8c:	4a06      	ldr	r2, [pc, #24]	@ (8000fa8 <HAL_InitTick+0x5c>)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f92:	2300      	movs	r3, #0
 8000f94:	e000      	b.n	8000f98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3708      	adds	r7, #8
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	2000000c 	.word	0x2000000c
 8000fa4:	20000014 	.word	0x20000014
 8000fa8:	20000010 	.word	0x20000010

08000fac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fb0:	4b06      	ldr	r3, [pc, #24]	@ (8000fcc <HAL_IncTick+0x20>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	4b06      	ldr	r3, [pc, #24]	@ (8000fd0 <HAL_IncTick+0x24>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4413      	add	r3, r2
 8000fbc:	4a04      	ldr	r2, [pc, #16]	@ (8000fd0 <HAL_IncTick+0x24>)
 8000fbe:	6013      	str	r3, [r2, #0]
}
 8000fc0:	bf00      	nop
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	20000014 	.word	0x20000014
 8000fd0:	2000023c 	.word	0x2000023c

08000fd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fd8:	4b03      	ldr	r3, [pc, #12]	@ (8000fe8 <HAL_GetTick+0x14>)
 8000fda:	681b      	ldr	r3, [r3, #0]
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	2000023c 	.word	0x2000023c

08000fec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ff4:	f7ff ffee 	bl	8000fd4 <HAL_GetTick>
 8000ff8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001004:	d005      	beq.n	8001012 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001006:	4b0a      	ldr	r3, [pc, #40]	@ (8001030 <HAL_Delay+0x44>)
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	461a      	mov	r2, r3
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	4413      	add	r3, r2
 8001010:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001012:	bf00      	nop
 8001014:	f7ff ffde 	bl	8000fd4 <HAL_GetTick>
 8001018:	4602      	mov	r2, r0
 800101a:	68bb      	ldr	r3, [r7, #8]
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	68fa      	ldr	r2, [r7, #12]
 8001020:	429a      	cmp	r2, r3
 8001022:	d8f7      	bhi.n	8001014 <HAL_Delay+0x28>
  {
  }
}
 8001024:	bf00      	nop
 8001026:	bf00      	nop
 8001028:	3710      	adds	r7, #16
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	20000014 	.word	0x20000014

08001034 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001034:	b480      	push	{r7}
 8001036:	b085      	sub	sp, #20
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	f003 0307 	and.w	r3, r3, #7
 8001042:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001044:	4b0c      	ldr	r3, [pc, #48]	@ (8001078 <__NVIC_SetPriorityGrouping+0x44>)
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800104a:	68ba      	ldr	r2, [r7, #8]
 800104c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001050:	4013      	ands	r3, r2
 8001052:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800105c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001060:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001064:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001066:	4a04      	ldr	r2, [pc, #16]	@ (8001078 <__NVIC_SetPriorityGrouping+0x44>)
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	60d3      	str	r3, [r2, #12]
}
 800106c:	bf00      	nop
 800106e:	3714      	adds	r7, #20
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	e000ed00 	.word	0xe000ed00

0800107c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001080:	4b04      	ldr	r3, [pc, #16]	@ (8001094 <__NVIC_GetPriorityGrouping+0x18>)
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	0a1b      	lsrs	r3, r3, #8
 8001086:	f003 0307 	and.w	r3, r3, #7
}
 800108a:	4618      	mov	r0, r3
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	e000ed00 	.word	0xe000ed00

08001098 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	6039      	str	r1, [r7, #0]
 80010a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	db0a      	blt.n	80010c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	b2da      	uxtb	r2, r3
 80010b0:	490c      	ldr	r1, [pc, #48]	@ (80010e4 <__NVIC_SetPriority+0x4c>)
 80010b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b6:	0112      	lsls	r2, r2, #4
 80010b8:	b2d2      	uxtb	r2, r2
 80010ba:	440b      	add	r3, r1
 80010bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010c0:	e00a      	b.n	80010d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	b2da      	uxtb	r2, r3
 80010c6:	4908      	ldr	r1, [pc, #32]	@ (80010e8 <__NVIC_SetPriority+0x50>)
 80010c8:	79fb      	ldrb	r3, [r7, #7]
 80010ca:	f003 030f 	and.w	r3, r3, #15
 80010ce:	3b04      	subs	r3, #4
 80010d0:	0112      	lsls	r2, r2, #4
 80010d2:	b2d2      	uxtb	r2, r2
 80010d4:	440b      	add	r3, r1
 80010d6:	761a      	strb	r2, [r3, #24]
}
 80010d8:	bf00      	nop
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr
 80010e4:	e000e100 	.word	0xe000e100
 80010e8:	e000ed00 	.word	0xe000ed00

080010ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b089      	sub	sp, #36	@ 0x24
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	60f8      	str	r0, [r7, #12]
 80010f4:	60b9      	str	r1, [r7, #8]
 80010f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	f003 0307 	and.w	r3, r3, #7
 80010fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	f1c3 0307 	rsb	r3, r3, #7
 8001106:	2b04      	cmp	r3, #4
 8001108:	bf28      	it	cs
 800110a:	2304      	movcs	r3, #4
 800110c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	3304      	adds	r3, #4
 8001112:	2b06      	cmp	r3, #6
 8001114:	d902      	bls.n	800111c <NVIC_EncodePriority+0x30>
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	3b03      	subs	r3, #3
 800111a:	e000      	b.n	800111e <NVIC_EncodePriority+0x32>
 800111c:	2300      	movs	r3, #0
 800111e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001120:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001124:	69bb      	ldr	r3, [r7, #24]
 8001126:	fa02 f303 	lsl.w	r3, r2, r3
 800112a:	43da      	mvns	r2, r3
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	401a      	ands	r2, r3
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001134:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	fa01 f303 	lsl.w	r3, r1, r3
 800113e:	43d9      	mvns	r1, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001144:	4313      	orrs	r3, r2
         );
}
 8001146:	4618      	mov	r0, r3
 8001148:	3724      	adds	r7, #36	@ 0x24
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
	...

08001154 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	3b01      	subs	r3, #1
 8001160:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001164:	d301      	bcc.n	800116a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001166:	2301      	movs	r3, #1
 8001168:	e00f      	b.n	800118a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800116a:	4a0a      	ldr	r2, [pc, #40]	@ (8001194 <SysTick_Config+0x40>)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	3b01      	subs	r3, #1
 8001170:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001172:	210f      	movs	r1, #15
 8001174:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001178:	f7ff ff8e 	bl	8001098 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800117c:	4b05      	ldr	r3, [pc, #20]	@ (8001194 <SysTick_Config+0x40>)
 800117e:	2200      	movs	r2, #0
 8001180:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001182:	4b04      	ldr	r3, [pc, #16]	@ (8001194 <SysTick_Config+0x40>)
 8001184:	2207      	movs	r2, #7
 8001186:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001188:	2300      	movs	r3, #0
}
 800118a:	4618      	mov	r0, r3
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	e000e010 	.word	0xe000e010

08001198 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f7ff ff47 	bl	8001034 <__NVIC_SetPriorityGrouping>
}
 80011a6:	bf00      	nop
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011ae:	b580      	push	{r7, lr}
 80011b0:	b086      	sub	sp, #24
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	4603      	mov	r3, r0
 80011b6:	60b9      	str	r1, [r7, #8]
 80011b8:	607a      	str	r2, [r7, #4]
 80011ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011bc:	2300      	movs	r3, #0
 80011be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011c0:	f7ff ff5c 	bl	800107c <__NVIC_GetPriorityGrouping>
 80011c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011c6:	687a      	ldr	r2, [r7, #4]
 80011c8:	68b9      	ldr	r1, [r7, #8]
 80011ca:	6978      	ldr	r0, [r7, #20]
 80011cc:	f7ff ff8e 	bl	80010ec <NVIC_EncodePriority>
 80011d0:	4602      	mov	r2, r0
 80011d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011d6:	4611      	mov	r1, r2
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff ff5d 	bl	8001098 <__NVIC_SetPriority>
}
 80011de:	bf00      	nop
 80011e0:	3718      	adds	r7, #24
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b082      	sub	sp, #8
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f7ff ffb0 	bl	8001154 <SysTick_Config>
 80011f4:	4603      	mov	r3, r0
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
	...

08001200 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001200:	b480      	push	{r7}
 8001202:	b089      	sub	sp, #36	@ 0x24
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800120a:	2300      	movs	r3, #0
 800120c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800120e:	2300      	movs	r3, #0
 8001210:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001212:	2300      	movs	r3, #0
 8001214:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001216:	2300      	movs	r3, #0
 8001218:	61fb      	str	r3, [r7, #28]
 800121a:	e16b      	b.n	80014f4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800121c:	2201      	movs	r2, #1
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	697a      	ldr	r2, [r7, #20]
 800122c:	4013      	ands	r3, r2
 800122e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001230:	693a      	ldr	r2, [r7, #16]
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	429a      	cmp	r2, r3
 8001236:	f040 815a 	bne.w	80014ee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	f003 0303 	and.w	r3, r3, #3
 8001242:	2b01      	cmp	r3, #1
 8001244:	d005      	beq.n	8001252 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800124e:	2b02      	cmp	r3, #2
 8001250:	d130      	bne.n	80012b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	2203      	movs	r2, #3
 800125e:	fa02 f303 	lsl.w	r3, r2, r3
 8001262:	43db      	mvns	r3, r3
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	4013      	ands	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	68da      	ldr	r2, [r3, #12]
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	4313      	orrs	r3, r2
 800127a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001288:	2201      	movs	r2, #1
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	43db      	mvns	r3, r3
 8001292:	69ba      	ldr	r2, [r7, #24]
 8001294:	4013      	ands	r3, r2
 8001296:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	091b      	lsrs	r3, r3, #4
 800129e:	f003 0201 	and.w	r2, r3, #1
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f003 0303 	and.w	r3, r3, #3
 80012bc:	2b03      	cmp	r3, #3
 80012be:	d017      	beq.n	80012f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	005b      	lsls	r3, r3, #1
 80012ca:	2203      	movs	r2, #3
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	43db      	mvns	r3, r3
 80012d2:	69ba      	ldr	r2, [r7, #24]
 80012d4:	4013      	ands	r3, r2
 80012d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	689a      	ldr	r2, [r3, #8]
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f003 0303 	and.w	r3, r3, #3
 80012f8:	2b02      	cmp	r3, #2
 80012fa:	d123      	bne.n	8001344 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	08da      	lsrs	r2, r3, #3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	3208      	adds	r2, #8
 8001304:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001308:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	f003 0307 	and.w	r3, r3, #7
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	220f      	movs	r2, #15
 8001314:	fa02 f303 	lsl.w	r3, r2, r3
 8001318:	43db      	mvns	r3, r3
 800131a:	69ba      	ldr	r2, [r7, #24]
 800131c:	4013      	ands	r3, r2
 800131e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	691a      	ldr	r2, [r3, #16]
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	f003 0307 	and.w	r3, r3, #7
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	4313      	orrs	r3, r2
 8001334:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	08da      	lsrs	r2, r3, #3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	3208      	adds	r2, #8
 800133e:	69b9      	ldr	r1, [r7, #24]
 8001340:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	2203      	movs	r2, #3
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	43db      	mvns	r3, r3
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	4013      	ands	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f003 0203 	and.w	r2, r3, #3
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	4313      	orrs	r3, r2
 8001370:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001380:	2b00      	cmp	r3, #0
 8001382:	f000 80b4 	beq.w	80014ee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	60fb      	str	r3, [r7, #12]
 800138a:	4b60      	ldr	r3, [pc, #384]	@ (800150c <HAL_GPIO_Init+0x30c>)
 800138c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800138e:	4a5f      	ldr	r2, [pc, #380]	@ (800150c <HAL_GPIO_Init+0x30c>)
 8001390:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001394:	6453      	str	r3, [r2, #68]	@ 0x44
 8001396:	4b5d      	ldr	r3, [pc, #372]	@ (800150c <HAL_GPIO_Init+0x30c>)
 8001398:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800139a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013a2:	4a5b      	ldr	r2, [pc, #364]	@ (8001510 <HAL_GPIO_Init+0x310>)
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	089b      	lsrs	r3, r3, #2
 80013a8:	3302      	adds	r3, #2
 80013aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	f003 0303 	and.w	r3, r3, #3
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	220f      	movs	r2, #15
 80013ba:	fa02 f303 	lsl.w	r3, r2, r3
 80013be:	43db      	mvns	r3, r3
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	4013      	ands	r3, r2
 80013c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a52      	ldr	r2, [pc, #328]	@ (8001514 <HAL_GPIO_Init+0x314>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d02b      	beq.n	8001426 <HAL_GPIO_Init+0x226>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4a51      	ldr	r2, [pc, #324]	@ (8001518 <HAL_GPIO_Init+0x318>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d025      	beq.n	8001422 <HAL_GPIO_Init+0x222>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a50      	ldr	r2, [pc, #320]	@ (800151c <HAL_GPIO_Init+0x31c>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d01f      	beq.n	800141e <HAL_GPIO_Init+0x21e>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a4f      	ldr	r2, [pc, #316]	@ (8001520 <HAL_GPIO_Init+0x320>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d019      	beq.n	800141a <HAL_GPIO_Init+0x21a>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4a4e      	ldr	r2, [pc, #312]	@ (8001524 <HAL_GPIO_Init+0x324>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d013      	beq.n	8001416 <HAL_GPIO_Init+0x216>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4a4d      	ldr	r2, [pc, #308]	@ (8001528 <HAL_GPIO_Init+0x328>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d00d      	beq.n	8001412 <HAL_GPIO_Init+0x212>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a4c      	ldr	r2, [pc, #304]	@ (800152c <HAL_GPIO_Init+0x32c>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d007      	beq.n	800140e <HAL_GPIO_Init+0x20e>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4a4b      	ldr	r2, [pc, #300]	@ (8001530 <HAL_GPIO_Init+0x330>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d101      	bne.n	800140a <HAL_GPIO_Init+0x20a>
 8001406:	2307      	movs	r3, #7
 8001408:	e00e      	b.n	8001428 <HAL_GPIO_Init+0x228>
 800140a:	2308      	movs	r3, #8
 800140c:	e00c      	b.n	8001428 <HAL_GPIO_Init+0x228>
 800140e:	2306      	movs	r3, #6
 8001410:	e00a      	b.n	8001428 <HAL_GPIO_Init+0x228>
 8001412:	2305      	movs	r3, #5
 8001414:	e008      	b.n	8001428 <HAL_GPIO_Init+0x228>
 8001416:	2304      	movs	r3, #4
 8001418:	e006      	b.n	8001428 <HAL_GPIO_Init+0x228>
 800141a:	2303      	movs	r3, #3
 800141c:	e004      	b.n	8001428 <HAL_GPIO_Init+0x228>
 800141e:	2302      	movs	r3, #2
 8001420:	e002      	b.n	8001428 <HAL_GPIO_Init+0x228>
 8001422:	2301      	movs	r3, #1
 8001424:	e000      	b.n	8001428 <HAL_GPIO_Init+0x228>
 8001426:	2300      	movs	r3, #0
 8001428:	69fa      	ldr	r2, [r7, #28]
 800142a:	f002 0203 	and.w	r2, r2, #3
 800142e:	0092      	lsls	r2, r2, #2
 8001430:	4093      	lsls	r3, r2
 8001432:	69ba      	ldr	r2, [r7, #24]
 8001434:	4313      	orrs	r3, r2
 8001436:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001438:	4935      	ldr	r1, [pc, #212]	@ (8001510 <HAL_GPIO_Init+0x310>)
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	089b      	lsrs	r3, r3, #2
 800143e:	3302      	adds	r3, #2
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001446:	4b3b      	ldr	r3, [pc, #236]	@ (8001534 <HAL_GPIO_Init+0x334>)
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	43db      	mvns	r3, r3
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	4013      	ands	r3, r2
 8001454:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800145e:	2b00      	cmp	r3, #0
 8001460:	d003      	beq.n	800146a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	4313      	orrs	r3, r2
 8001468:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800146a:	4a32      	ldr	r2, [pc, #200]	@ (8001534 <HAL_GPIO_Init+0x334>)
 800146c:	69bb      	ldr	r3, [r7, #24]
 800146e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001470:	4b30      	ldr	r3, [pc, #192]	@ (8001534 <HAL_GPIO_Init+0x334>)
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	43db      	mvns	r3, r3
 800147a:	69ba      	ldr	r2, [r7, #24]
 800147c:	4013      	ands	r3, r2
 800147e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001488:	2b00      	cmp	r3, #0
 800148a:	d003      	beq.n	8001494 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	4313      	orrs	r3, r2
 8001492:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001494:	4a27      	ldr	r2, [pc, #156]	@ (8001534 <HAL_GPIO_Init+0x334>)
 8001496:	69bb      	ldr	r3, [r7, #24]
 8001498:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800149a:	4b26      	ldr	r3, [pc, #152]	@ (8001534 <HAL_GPIO_Init+0x334>)
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	43db      	mvns	r3, r3
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	4013      	ands	r3, r2
 80014a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d003      	beq.n	80014be <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80014b6:	69ba      	ldr	r2, [r7, #24]
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014be:	4a1d      	ldr	r2, [pc, #116]	@ (8001534 <HAL_GPIO_Init+0x334>)
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001534 <HAL_GPIO_Init+0x334>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	43db      	mvns	r3, r3
 80014ce:	69ba      	ldr	r2, [r7, #24]
 80014d0:	4013      	ands	r3, r2
 80014d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d003      	beq.n	80014e8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014e8:	4a12      	ldr	r2, [pc, #72]	@ (8001534 <HAL_GPIO_Init+0x334>)
 80014ea:	69bb      	ldr	r3, [r7, #24]
 80014ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	3301      	adds	r3, #1
 80014f2:	61fb      	str	r3, [r7, #28]
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	2b0f      	cmp	r3, #15
 80014f8:	f67f ae90 	bls.w	800121c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014fc:	bf00      	nop
 80014fe:	bf00      	nop
 8001500:	3724      	adds	r7, #36	@ 0x24
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	40023800 	.word	0x40023800
 8001510:	40013800 	.word	0x40013800
 8001514:	40020000 	.word	0x40020000
 8001518:	40020400 	.word	0x40020400
 800151c:	40020800 	.word	0x40020800
 8001520:	40020c00 	.word	0x40020c00
 8001524:	40021000 	.word	0x40021000
 8001528:	40021400 	.word	0x40021400
 800152c:	40021800 	.word	0x40021800
 8001530:	40021c00 	.word	0x40021c00
 8001534:	40013c00 	.word	0x40013c00

08001538 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	460b      	mov	r3, r1
 8001542:	807b      	strh	r3, [r7, #2]
 8001544:	4613      	mov	r3, r2
 8001546:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001548:	787b      	ldrb	r3, [r7, #1]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d003      	beq.n	8001556 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800154e:	887a      	ldrh	r2, [r7, #2]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001554:	e003      	b.n	800155e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001556:	887b      	ldrh	r3, [r7, #2]
 8001558:	041a      	lsls	r2, r3, #16
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	619a      	str	r2, [r3, #24]
}
 800155e:	bf00      	nop
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
	...

0800156c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b086      	sub	sp, #24
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d101      	bne.n	800157e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e267      	b.n	8001a4e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	2b00      	cmp	r3, #0
 8001588:	d075      	beq.n	8001676 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800158a:	4b88      	ldr	r3, [pc, #544]	@ (80017ac <HAL_RCC_OscConfig+0x240>)
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	f003 030c 	and.w	r3, r3, #12
 8001592:	2b04      	cmp	r3, #4
 8001594:	d00c      	beq.n	80015b0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001596:	4b85      	ldr	r3, [pc, #532]	@ (80017ac <HAL_RCC_OscConfig+0x240>)
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800159e:	2b08      	cmp	r3, #8
 80015a0:	d112      	bne.n	80015c8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015a2:	4b82      	ldr	r3, [pc, #520]	@ (80017ac <HAL_RCC_OscConfig+0x240>)
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015aa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80015ae:	d10b      	bne.n	80015c8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015b0:	4b7e      	ldr	r3, [pc, #504]	@ (80017ac <HAL_RCC_OscConfig+0x240>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d05b      	beq.n	8001674 <HAL_RCC_OscConfig+0x108>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d157      	bne.n	8001674 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e242      	b.n	8001a4e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015d0:	d106      	bne.n	80015e0 <HAL_RCC_OscConfig+0x74>
 80015d2:	4b76      	ldr	r3, [pc, #472]	@ (80017ac <HAL_RCC_OscConfig+0x240>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a75      	ldr	r2, [pc, #468]	@ (80017ac <HAL_RCC_OscConfig+0x240>)
 80015d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015dc:	6013      	str	r3, [r2, #0]
 80015de:	e01d      	b.n	800161c <HAL_RCC_OscConfig+0xb0>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80015e8:	d10c      	bne.n	8001604 <HAL_RCC_OscConfig+0x98>
 80015ea:	4b70      	ldr	r3, [pc, #448]	@ (80017ac <HAL_RCC_OscConfig+0x240>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a6f      	ldr	r2, [pc, #444]	@ (80017ac <HAL_RCC_OscConfig+0x240>)
 80015f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015f4:	6013      	str	r3, [r2, #0]
 80015f6:	4b6d      	ldr	r3, [pc, #436]	@ (80017ac <HAL_RCC_OscConfig+0x240>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a6c      	ldr	r2, [pc, #432]	@ (80017ac <HAL_RCC_OscConfig+0x240>)
 80015fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001600:	6013      	str	r3, [r2, #0]
 8001602:	e00b      	b.n	800161c <HAL_RCC_OscConfig+0xb0>
 8001604:	4b69      	ldr	r3, [pc, #420]	@ (80017ac <HAL_RCC_OscConfig+0x240>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a68      	ldr	r2, [pc, #416]	@ (80017ac <HAL_RCC_OscConfig+0x240>)
 800160a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800160e:	6013      	str	r3, [r2, #0]
 8001610:	4b66      	ldr	r3, [pc, #408]	@ (80017ac <HAL_RCC_OscConfig+0x240>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a65      	ldr	r2, [pc, #404]	@ (80017ac <HAL_RCC_OscConfig+0x240>)
 8001616:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800161a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d013      	beq.n	800164c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001624:	f7ff fcd6 	bl	8000fd4 <HAL_GetTick>
 8001628:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800162a:	e008      	b.n	800163e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800162c:	f7ff fcd2 	bl	8000fd4 <HAL_GetTick>
 8001630:	4602      	mov	r2, r0
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	2b64      	cmp	r3, #100	@ 0x64
 8001638:	d901      	bls.n	800163e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e207      	b.n	8001a4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800163e:	4b5b      	ldr	r3, [pc, #364]	@ (80017ac <HAL_RCC_OscConfig+0x240>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d0f0      	beq.n	800162c <HAL_RCC_OscConfig+0xc0>
 800164a:	e014      	b.n	8001676 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800164c:	f7ff fcc2 	bl	8000fd4 <HAL_GetTick>
 8001650:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001652:	e008      	b.n	8001666 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001654:	f7ff fcbe 	bl	8000fd4 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	2b64      	cmp	r3, #100	@ 0x64
 8001660:	d901      	bls.n	8001666 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e1f3      	b.n	8001a4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001666:	4b51      	ldr	r3, [pc, #324]	@ (80017ac <HAL_RCC_OscConfig+0x240>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d1f0      	bne.n	8001654 <HAL_RCC_OscConfig+0xe8>
 8001672:	e000      	b.n	8001676 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001674:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 0302 	and.w	r3, r3, #2
 800167e:	2b00      	cmp	r3, #0
 8001680:	d063      	beq.n	800174a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001682:	4b4a      	ldr	r3, [pc, #296]	@ (80017ac <HAL_RCC_OscConfig+0x240>)
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	f003 030c 	and.w	r3, r3, #12
 800168a:	2b00      	cmp	r3, #0
 800168c:	d00b      	beq.n	80016a6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800168e:	4b47      	ldr	r3, [pc, #284]	@ (80017ac <HAL_RCC_OscConfig+0x240>)
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001696:	2b08      	cmp	r3, #8
 8001698:	d11c      	bne.n	80016d4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800169a:	4b44      	ldr	r3, [pc, #272]	@ (80017ac <HAL_RCC_OscConfig+0x240>)
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d116      	bne.n	80016d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016a6:	4b41      	ldr	r3, [pc, #260]	@ (80017ac <HAL_RCC_OscConfig+0x240>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0302 	and.w	r3, r3, #2
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d005      	beq.n	80016be <HAL_RCC_OscConfig+0x152>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	68db      	ldr	r3, [r3, #12]
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d001      	beq.n	80016be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e1c7      	b.n	8001a4e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016be:	4b3b      	ldr	r3, [pc, #236]	@ (80017ac <HAL_RCC_OscConfig+0x240>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	691b      	ldr	r3, [r3, #16]
 80016ca:	00db      	lsls	r3, r3, #3
 80016cc:	4937      	ldr	r1, [pc, #220]	@ (80017ac <HAL_RCC_OscConfig+0x240>)
 80016ce:	4313      	orrs	r3, r2
 80016d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016d2:	e03a      	b.n	800174a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d020      	beq.n	800171e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016dc:	4b34      	ldr	r3, [pc, #208]	@ (80017b0 <HAL_RCC_OscConfig+0x244>)
 80016de:	2201      	movs	r2, #1
 80016e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016e2:	f7ff fc77 	bl	8000fd4 <HAL_GetTick>
 80016e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016e8:	e008      	b.n	80016fc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016ea:	f7ff fc73 	bl	8000fd4 <HAL_GetTick>
 80016ee:	4602      	mov	r2, r0
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d901      	bls.n	80016fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80016f8:	2303      	movs	r3, #3
 80016fa:	e1a8      	b.n	8001a4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016fc:	4b2b      	ldr	r3, [pc, #172]	@ (80017ac <HAL_RCC_OscConfig+0x240>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 0302 	and.w	r3, r3, #2
 8001704:	2b00      	cmp	r3, #0
 8001706:	d0f0      	beq.n	80016ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001708:	4b28      	ldr	r3, [pc, #160]	@ (80017ac <HAL_RCC_OscConfig+0x240>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	691b      	ldr	r3, [r3, #16]
 8001714:	00db      	lsls	r3, r3, #3
 8001716:	4925      	ldr	r1, [pc, #148]	@ (80017ac <HAL_RCC_OscConfig+0x240>)
 8001718:	4313      	orrs	r3, r2
 800171a:	600b      	str	r3, [r1, #0]
 800171c:	e015      	b.n	800174a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800171e:	4b24      	ldr	r3, [pc, #144]	@ (80017b0 <HAL_RCC_OscConfig+0x244>)
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001724:	f7ff fc56 	bl	8000fd4 <HAL_GetTick>
 8001728:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800172a:	e008      	b.n	800173e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800172c:	f7ff fc52 	bl	8000fd4 <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	2b02      	cmp	r3, #2
 8001738:	d901      	bls.n	800173e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e187      	b.n	8001a4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800173e:	4b1b      	ldr	r3, [pc, #108]	@ (80017ac <HAL_RCC_OscConfig+0x240>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0302 	and.w	r3, r3, #2
 8001746:	2b00      	cmp	r3, #0
 8001748:	d1f0      	bne.n	800172c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0308 	and.w	r3, r3, #8
 8001752:	2b00      	cmp	r3, #0
 8001754:	d036      	beq.n	80017c4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	695b      	ldr	r3, [r3, #20]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d016      	beq.n	800178c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800175e:	4b15      	ldr	r3, [pc, #84]	@ (80017b4 <HAL_RCC_OscConfig+0x248>)
 8001760:	2201      	movs	r2, #1
 8001762:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001764:	f7ff fc36 	bl	8000fd4 <HAL_GetTick>
 8001768:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800176a:	e008      	b.n	800177e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800176c:	f7ff fc32 	bl	8000fd4 <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	2b02      	cmp	r3, #2
 8001778:	d901      	bls.n	800177e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e167      	b.n	8001a4e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800177e:	4b0b      	ldr	r3, [pc, #44]	@ (80017ac <HAL_RCC_OscConfig+0x240>)
 8001780:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001782:	f003 0302 	and.w	r3, r3, #2
 8001786:	2b00      	cmp	r3, #0
 8001788:	d0f0      	beq.n	800176c <HAL_RCC_OscConfig+0x200>
 800178a:	e01b      	b.n	80017c4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800178c:	4b09      	ldr	r3, [pc, #36]	@ (80017b4 <HAL_RCC_OscConfig+0x248>)
 800178e:	2200      	movs	r2, #0
 8001790:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001792:	f7ff fc1f 	bl	8000fd4 <HAL_GetTick>
 8001796:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001798:	e00e      	b.n	80017b8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800179a:	f7ff fc1b 	bl	8000fd4 <HAL_GetTick>
 800179e:	4602      	mov	r2, r0
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d907      	bls.n	80017b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80017a8:	2303      	movs	r3, #3
 80017aa:	e150      	b.n	8001a4e <HAL_RCC_OscConfig+0x4e2>
 80017ac:	40023800 	.word	0x40023800
 80017b0:	42470000 	.word	0x42470000
 80017b4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017b8:	4b88      	ldr	r3, [pc, #544]	@ (80019dc <HAL_RCC_OscConfig+0x470>)
 80017ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80017bc:	f003 0302 	and.w	r3, r3, #2
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d1ea      	bne.n	800179a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0304 	and.w	r3, r3, #4
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	f000 8097 	beq.w	8001900 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017d2:	2300      	movs	r3, #0
 80017d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017d6:	4b81      	ldr	r3, [pc, #516]	@ (80019dc <HAL_RCC_OscConfig+0x470>)
 80017d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d10f      	bne.n	8001802 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017e2:	2300      	movs	r3, #0
 80017e4:	60bb      	str	r3, [r7, #8]
 80017e6:	4b7d      	ldr	r3, [pc, #500]	@ (80019dc <HAL_RCC_OscConfig+0x470>)
 80017e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ea:	4a7c      	ldr	r2, [pc, #496]	@ (80019dc <HAL_RCC_OscConfig+0x470>)
 80017ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80017f2:	4b7a      	ldr	r3, [pc, #488]	@ (80019dc <HAL_RCC_OscConfig+0x470>)
 80017f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017fa:	60bb      	str	r3, [r7, #8]
 80017fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017fe:	2301      	movs	r3, #1
 8001800:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001802:	4b77      	ldr	r3, [pc, #476]	@ (80019e0 <HAL_RCC_OscConfig+0x474>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800180a:	2b00      	cmp	r3, #0
 800180c:	d118      	bne.n	8001840 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800180e:	4b74      	ldr	r3, [pc, #464]	@ (80019e0 <HAL_RCC_OscConfig+0x474>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a73      	ldr	r2, [pc, #460]	@ (80019e0 <HAL_RCC_OscConfig+0x474>)
 8001814:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001818:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800181a:	f7ff fbdb 	bl	8000fd4 <HAL_GetTick>
 800181e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001820:	e008      	b.n	8001834 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001822:	f7ff fbd7 	bl	8000fd4 <HAL_GetTick>
 8001826:	4602      	mov	r2, r0
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	2b02      	cmp	r3, #2
 800182e:	d901      	bls.n	8001834 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001830:	2303      	movs	r3, #3
 8001832:	e10c      	b.n	8001a4e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001834:	4b6a      	ldr	r3, [pc, #424]	@ (80019e0 <HAL_RCC_OscConfig+0x474>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800183c:	2b00      	cmp	r3, #0
 800183e:	d0f0      	beq.n	8001822 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	2b01      	cmp	r3, #1
 8001846:	d106      	bne.n	8001856 <HAL_RCC_OscConfig+0x2ea>
 8001848:	4b64      	ldr	r3, [pc, #400]	@ (80019dc <HAL_RCC_OscConfig+0x470>)
 800184a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800184c:	4a63      	ldr	r2, [pc, #396]	@ (80019dc <HAL_RCC_OscConfig+0x470>)
 800184e:	f043 0301 	orr.w	r3, r3, #1
 8001852:	6713      	str	r3, [r2, #112]	@ 0x70
 8001854:	e01c      	b.n	8001890 <HAL_RCC_OscConfig+0x324>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	2b05      	cmp	r3, #5
 800185c:	d10c      	bne.n	8001878 <HAL_RCC_OscConfig+0x30c>
 800185e:	4b5f      	ldr	r3, [pc, #380]	@ (80019dc <HAL_RCC_OscConfig+0x470>)
 8001860:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001862:	4a5e      	ldr	r2, [pc, #376]	@ (80019dc <HAL_RCC_OscConfig+0x470>)
 8001864:	f043 0304 	orr.w	r3, r3, #4
 8001868:	6713      	str	r3, [r2, #112]	@ 0x70
 800186a:	4b5c      	ldr	r3, [pc, #368]	@ (80019dc <HAL_RCC_OscConfig+0x470>)
 800186c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800186e:	4a5b      	ldr	r2, [pc, #364]	@ (80019dc <HAL_RCC_OscConfig+0x470>)
 8001870:	f043 0301 	orr.w	r3, r3, #1
 8001874:	6713      	str	r3, [r2, #112]	@ 0x70
 8001876:	e00b      	b.n	8001890 <HAL_RCC_OscConfig+0x324>
 8001878:	4b58      	ldr	r3, [pc, #352]	@ (80019dc <HAL_RCC_OscConfig+0x470>)
 800187a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800187c:	4a57      	ldr	r2, [pc, #348]	@ (80019dc <HAL_RCC_OscConfig+0x470>)
 800187e:	f023 0301 	bic.w	r3, r3, #1
 8001882:	6713      	str	r3, [r2, #112]	@ 0x70
 8001884:	4b55      	ldr	r3, [pc, #340]	@ (80019dc <HAL_RCC_OscConfig+0x470>)
 8001886:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001888:	4a54      	ldr	r2, [pc, #336]	@ (80019dc <HAL_RCC_OscConfig+0x470>)
 800188a:	f023 0304 	bic.w	r3, r3, #4
 800188e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d015      	beq.n	80018c4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001898:	f7ff fb9c 	bl	8000fd4 <HAL_GetTick>
 800189c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800189e:	e00a      	b.n	80018b6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018a0:	f7ff fb98 	bl	8000fd4 <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d901      	bls.n	80018b6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	e0cb      	b.n	8001a4e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018b6:	4b49      	ldr	r3, [pc, #292]	@ (80019dc <HAL_RCC_OscConfig+0x470>)
 80018b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018ba:	f003 0302 	and.w	r3, r3, #2
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d0ee      	beq.n	80018a0 <HAL_RCC_OscConfig+0x334>
 80018c2:	e014      	b.n	80018ee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018c4:	f7ff fb86 	bl	8000fd4 <HAL_GetTick>
 80018c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018ca:	e00a      	b.n	80018e2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018cc:	f7ff fb82 	bl	8000fd4 <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018da:	4293      	cmp	r3, r2
 80018dc:	d901      	bls.n	80018e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e0b5      	b.n	8001a4e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018e2:	4b3e      	ldr	r3, [pc, #248]	@ (80019dc <HAL_RCC_OscConfig+0x470>)
 80018e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018e6:	f003 0302 	and.w	r3, r3, #2
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d1ee      	bne.n	80018cc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80018ee:	7dfb      	ldrb	r3, [r7, #23]
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d105      	bne.n	8001900 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018f4:	4b39      	ldr	r3, [pc, #228]	@ (80019dc <HAL_RCC_OscConfig+0x470>)
 80018f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018f8:	4a38      	ldr	r2, [pc, #224]	@ (80019dc <HAL_RCC_OscConfig+0x470>)
 80018fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80018fe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	699b      	ldr	r3, [r3, #24]
 8001904:	2b00      	cmp	r3, #0
 8001906:	f000 80a1 	beq.w	8001a4c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800190a:	4b34      	ldr	r3, [pc, #208]	@ (80019dc <HAL_RCC_OscConfig+0x470>)
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	f003 030c 	and.w	r3, r3, #12
 8001912:	2b08      	cmp	r3, #8
 8001914:	d05c      	beq.n	80019d0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	699b      	ldr	r3, [r3, #24]
 800191a:	2b02      	cmp	r3, #2
 800191c:	d141      	bne.n	80019a2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800191e:	4b31      	ldr	r3, [pc, #196]	@ (80019e4 <HAL_RCC_OscConfig+0x478>)
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001924:	f7ff fb56 	bl	8000fd4 <HAL_GetTick>
 8001928:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800192a:	e008      	b.n	800193e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800192c:	f7ff fb52 	bl	8000fd4 <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	2b02      	cmp	r3, #2
 8001938:	d901      	bls.n	800193e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e087      	b.n	8001a4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800193e:	4b27      	ldr	r3, [pc, #156]	@ (80019dc <HAL_RCC_OscConfig+0x470>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d1f0      	bne.n	800192c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	69da      	ldr	r2, [r3, #28]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6a1b      	ldr	r3, [r3, #32]
 8001952:	431a      	orrs	r2, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001958:	019b      	lsls	r3, r3, #6
 800195a:	431a      	orrs	r2, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001960:	085b      	lsrs	r3, r3, #1
 8001962:	3b01      	subs	r3, #1
 8001964:	041b      	lsls	r3, r3, #16
 8001966:	431a      	orrs	r2, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800196c:	061b      	lsls	r3, r3, #24
 800196e:	491b      	ldr	r1, [pc, #108]	@ (80019dc <HAL_RCC_OscConfig+0x470>)
 8001970:	4313      	orrs	r3, r2
 8001972:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001974:	4b1b      	ldr	r3, [pc, #108]	@ (80019e4 <HAL_RCC_OscConfig+0x478>)
 8001976:	2201      	movs	r2, #1
 8001978:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800197a:	f7ff fb2b 	bl	8000fd4 <HAL_GetTick>
 800197e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001980:	e008      	b.n	8001994 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001982:	f7ff fb27 	bl	8000fd4 <HAL_GetTick>
 8001986:	4602      	mov	r2, r0
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	2b02      	cmp	r3, #2
 800198e:	d901      	bls.n	8001994 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001990:	2303      	movs	r3, #3
 8001992:	e05c      	b.n	8001a4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001994:	4b11      	ldr	r3, [pc, #68]	@ (80019dc <HAL_RCC_OscConfig+0x470>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d0f0      	beq.n	8001982 <HAL_RCC_OscConfig+0x416>
 80019a0:	e054      	b.n	8001a4c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019a2:	4b10      	ldr	r3, [pc, #64]	@ (80019e4 <HAL_RCC_OscConfig+0x478>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a8:	f7ff fb14 	bl	8000fd4 <HAL_GetTick>
 80019ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019ae:	e008      	b.n	80019c2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019b0:	f7ff fb10 	bl	8000fd4 <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d901      	bls.n	80019c2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e045      	b.n	8001a4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019c2:	4b06      	ldr	r3, [pc, #24]	@ (80019dc <HAL_RCC_OscConfig+0x470>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d1f0      	bne.n	80019b0 <HAL_RCC_OscConfig+0x444>
 80019ce:	e03d      	b.n	8001a4c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	699b      	ldr	r3, [r3, #24]
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d107      	bne.n	80019e8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e038      	b.n	8001a4e <HAL_RCC_OscConfig+0x4e2>
 80019dc:	40023800 	.word	0x40023800
 80019e0:	40007000 	.word	0x40007000
 80019e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80019e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001a58 <HAL_RCC_OscConfig+0x4ec>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	699b      	ldr	r3, [r3, #24]
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d028      	beq.n	8001a48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d121      	bne.n	8001a48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d11a      	bne.n	8001a48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a12:	68fa      	ldr	r2, [r7, #12]
 8001a14:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001a18:	4013      	ands	r3, r2
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001a1e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d111      	bne.n	8001a48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a2e:	085b      	lsrs	r3, r3, #1
 8001a30:	3b01      	subs	r3, #1
 8001a32:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d107      	bne.n	8001a48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a42:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d001      	beq.n	8001a4c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e000      	b.n	8001a4e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3718      	adds	r7, #24
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	40023800 	.word	0x40023800

08001a5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d101      	bne.n	8001a70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e0cc      	b.n	8001c0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a70:	4b68      	ldr	r3, [pc, #416]	@ (8001c14 <HAL_RCC_ClockConfig+0x1b8>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0307 	and.w	r3, r3, #7
 8001a78:	683a      	ldr	r2, [r7, #0]
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d90c      	bls.n	8001a98 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a7e:	4b65      	ldr	r3, [pc, #404]	@ (8001c14 <HAL_RCC_ClockConfig+0x1b8>)
 8001a80:	683a      	ldr	r2, [r7, #0]
 8001a82:	b2d2      	uxtb	r2, r2
 8001a84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a86:	4b63      	ldr	r3, [pc, #396]	@ (8001c14 <HAL_RCC_ClockConfig+0x1b8>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0307 	and.w	r3, r3, #7
 8001a8e:	683a      	ldr	r2, [r7, #0]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d001      	beq.n	8001a98 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e0b8      	b.n	8001c0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0302 	and.w	r3, r3, #2
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d020      	beq.n	8001ae6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0304 	and.w	r3, r3, #4
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d005      	beq.n	8001abc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ab0:	4b59      	ldr	r3, [pc, #356]	@ (8001c18 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	4a58      	ldr	r2, [pc, #352]	@ (8001c18 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001aba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0308 	and.w	r3, r3, #8
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d005      	beq.n	8001ad4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ac8:	4b53      	ldr	r3, [pc, #332]	@ (8001c18 <HAL_RCC_ClockConfig+0x1bc>)
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	4a52      	ldr	r2, [pc, #328]	@ (8001c18 <HAL_RCC_ClockConfig+0x1bc>)
 8001ace:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001ad2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ad4:	4b50      	ldr	r3, [pc, #320]	@ (8001c18 <HAL_RCC_ClockConfig+0x1bc>)
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	494d      	ldr	r1, [pc, #308]	@ (8001c18 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0301 	and.w	r3, r3, #1
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d044      	beq.n	8001b7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d107      	bne.n	8001b0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001afa:	4b47      	ldr	r3, [pc, #284]	@ (8001c18 <HAL_RCC_ClockConfig+0x1bc>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d119      	bne.n	8001b3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e07f      	b.n	8001c0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d003      	beq.n	8001b1a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b16:	2b03      	cmp	r3, #3
 8001b18:	d107      	bne.n	8001b2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b1a:	4b3f      	ldr	r3, [pc, #252]	@ (8001c18 <HAL_RCC_ClockConfig+0x1bc>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d109      	bne.n	8001b3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e06f      	b.n	8001c0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b2a:	4b3b      	ldr	r3, [pc, #236]	@ (8001c18 <HAL_RCC_ClockConfig+0x1bc>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0302 	and.w	r3, r3, #2
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d101      	bne.n	8001b3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e067      	b.n	8001c0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b3a:	4b37      	ldr	r3, [pc, #220]	@ (8001c18 <HAL_RCC_ClockConfig+0x1bc>)
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	f023 0203 	bic.w	r2, r3, #3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	4934      	ldr	r1, [pc, #208]	@ (8001c18 <HAL_RCC_ClockConfig+0x1bc>)
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b4c:	f7ff fa42 	bl	8000fd4 <HAL_GetTick>
 8001b50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b52:	e00a      	b.n	8001b6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b54:	f7ff fa3e 	bl	8000fd4 <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d901      	bls.n	8001b6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e04f      	b.n	8001c0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b6a:	4b2b      	ldr	r3, [pc, #172]	@ (8001c18 <HAL_RCC_ClockConfig+0x1bc>)
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	f003 020c 	and.w	r2, r3, #12
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d1eb      	bne.n	8001b54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b7c:	4b25      	ldr	r3, [pc, #148]	@ (8001c14 <HAL_RCC_ClockConfig+0x1b8>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0307 	and.w	r3, r3, #7
 8001b84:	683a      	ldr	r2, [r7, #0]
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d20c      	bcs.n	8001ba4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b8a:	4b22      	ldr	r3, [pc, #136]	@ (8001c14 <HAL_RCC_ClockConfig+0x1b8>)
 8001b8c:	683a      	ldr	r2, [r7, #0]
 8001b8e:	b2d2      	uxtb	r2, r2
 8001b90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b92:	4b20      	ldr	r3, [pc, #128]	@ (8001c14 <HAL_RCC_ClockConfig+0x1b8>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0307 	and.w	r3, r3, #7
 8001b9a:	683a      	ldr	r2, [r7, #0]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d001      	beq.n	8001ba4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e032      	b.n	8001c0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0304 	and.w	r3, r3, #4
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d008      	beq.n	8001bc2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bb0:	4b19      	ldr	r3, [pc, #100]	@ (8001c18 <HAL_RCC_ClockConfig+0x1bc>)
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	4916      	ldr	r1, [pc, #88]	@ (8001c18 <HAL_RCC_ClockConfig+0x1bc>)
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0308 	and.w	r3, r3, #8
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d009      	beq.n	8001be2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bce:	4b12      	ldr	r3, [pc, #72]	@ (8001c18 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	691b      	ldr	r3, [r3, #16]
 8001bda:	00db      	lsls	r3, r3, #3
 8001bdc:	490e      	ldr	r1, [pc, #56]	@ (8001c18 <HAL_RCC_ClockConfig+0x1bc>)
 8001bde:	4313      	orrs	r3, r2
 8001be0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001be2:	f000 f821 	bl	8001c28 <HAL_RCC_GetSysClockFreq>
 8001be6:	4602      	mov	r2, r0
 8001be8:	4b0b      	ldr	r3, [pc, #44]	@ (8001c18 <HAL_RCC_ClockConfig+0x1bc>)
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	091b      	lsrs	r3, r3, #4
 8001bee:	f003 030f 	and.w	r3, r3, #15
 8001bf2:	490a      	ldr	r1, [pc, #40]	@ (8001c1c <HAL_RCC_ClockConfig+0x1c0>)
 8001bf4:	5ccb      	ldrb	r3, [r1, r3]
 8001bf6:	fa22 f303 	lsr.w	r3, r2, r3
 8001bfa:	4a09      	ldr	r2, [pc, #36]	@ (8001c20 <HAL_RCC_ClockConfig+0x1c4>)
 8001bfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001bfe:	4b09      	ldr	r3, [pc, #36]	@ (8001c24 <HAL_RCC_ClockConfig+0x1c8>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7ff f9a2 	bl	8000f4c <HAL_InitTick>

  return HAL_OK;
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3710      	adds	r7, #16
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	40023c00 	.word	0x40023c00
 8001c18:	40023800 	.word	0x40023800
 8001c1c:	08002a48 	.word	0x08002a48
 8001c20:	2000000c 	.word	0x2000000c
 8001c24:	20000010 	.word	0x20000010

08001c28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c2c:	b094      	sub	sp, #80	@ 0x50
 8001c2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001c30:	2300      	movs	r3, #0
 8001c32:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001c34:	2300      	movs	r3, #0
 8001c36:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c40:	4b79      	ldr	r3, [pc, #484]	@ (8001e28 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	f003 030c 	and.w	r3, r3, #12
 8001c48:	2b08      	cmp	r3, #8
 8001c4a:	d00d      	beq.n	8001c68 <HAL_RCC_GetSysClockFreq+0x40>
 8001c4c:	2b08      	cmp	r3, #8
 8001c4e:	f200 80e1 	bhi.w	8001e14 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d002      	beq.n	8001c5c <HAL_RCC_GetSysClockFreq+0x34>
 8001c56:	2b04      	cmp	r3, #4
 8001c58:	d003      	beq.n	8001c62 <HAL_RCC_GetSysClockFreq+0x3a>
 8001c5a:	e0db      	b.n	8001e14 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c5c:	4b73      	ldr	r3, [pc, #460]	@ (8001e2c <HAL_RCC_GetSysClockFreq+0x204>)
 8001c5e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c60:	e0db      	b.n	8001e1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c62:	4b73      	ldr	r3, [pc, #460]	@ (8001e30 <HAL_RCC_GetSysClockFreq+0x208>)
 8001c64:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c66:	e0d8      	b.n	8001e1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c68:	4b6f      	ldr	r3, [pc, #444]	@ (8001e28 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001c70:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c72:	4b6d      	ldr	r3, [pc, #436]	@ (8001e28 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d063      	beq.n	8001d46 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c7e:	4b6a      	ldr	r3, [pc, #424]	@ (8001e28 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	099b      	lsrs	r3, r3, #6
 8001c84:	2200      	movs	r2, #0
 8001c86:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001c88:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001c8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c90:	633b      	str	r3, [r7, #48]	@ 0x30
 8001c92:	2300      	movs	r3, #0
 8001c94:	637b      	str	r3, [r7, #52]	@ 0x34
 8001c96:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001c9a:	4622      	mov	r2, r4
 8001c9c:	462b      	mov	r3, r5
 8001c9e:	f04f 0000 	mov.w	r0, #0
 8001ca2:	f04f 0100 	mov.w	r1, #0
 8001ca6:	0159      	lsls	r1, r3, #5
 8001ca8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cac:	0150      	lsls	r0, r2, #5
 8001cae:	4602      	mov	r2, r0
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	4621      	mov	r1, r4
 8001cb4:	1a51      	subs	r1, r2, r1
 8001cb6:	6139      	str	r1, [r7, #16]
 8001cb8:	4629      	mov	r1, r5
 8001cba:	eb63 0301 	sbc.w	r3, r3, r1
 8001cbe:	617b      	str	r3, [r7, #20]
 8001cc0:	f04f 0200 	mov.w	r2, #0
 8001cc4:	f04f 0300 	mov.w	r3, #0
 8001cc8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001ccc:	4659      	mov	r1, fp
 8001cce:	018b      	lsls	r3, r1, #6
 8001cd0:	4651      	mov	r1, sl
 8001cd2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001cd6:	4651      	mov	r1, sl
 8001cd8:	018a      	lsls	r2, r1, #6
 8001cda:	4651      	mov	r1, sl
 8001cdc:	ebb2 0801 	subs.w	r8, r2, r1
 8001ce0:	4659      	mov	r1, fp
 8001ce2:	eb63 0901 	sbc.w	r9, r3, r1
 8001ce6:	f04f 0200 	mov.w	r2, #0
 8001cea:	f04f 0300 	mov.w	r3, #0
 8001cee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001cf2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001cf6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001cfa:	4690      	mov	r8, r2
 8001cfc:	4699      	mov	r9, r3
 8001cfe:	4623      	mov	r3, r4
 8001d00:	eb18 0303 	adds.w	r3, r8, r3
 8001d04:	60bb      	str	r3, [r7, #8]
 8001d06:	462b      	mov	r3, r5
 8001d08:	eb49 0303 	adc.w	r3, r9, r3
 8001d0c:	60fb      	str	r3, [r7, #12]
 8001d0e:	f04f 0200 	mov.w	r2, #0
 8001d12:	f04f 0300 	mov.w	r3, #0
 8001d16:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001d1a:	4629      	mov	r1, r5
 8001d1c:	024b      	lsls	r3, r1, #9
 8001d1e:	4621      	mov	r1, r4
 8001d20:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001d24:	4621      	mov	r1, r4
 8001d26:	024a      	lsls	r2, r1, #9
 8001d28:	4610      	mov	r0, r2
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d2e:	2200      	movs	r2, #0
 8001d30:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d32:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001d34:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001d38:	f7fe fa46 	bl	80001c8 <__aeabi_uldivmod>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	460b      	mov	r3, r1
 8001d40:	4613      	mov	r3, r2
 8001d42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001d44:	e058      	b.n	8001df8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d46:	4b38      	ldr	r3, [pc, #224]	@ (8001e28 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	099b      	lsrs	r3, r3, #6
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	4618      	mov	r0, r3
 8001d50:	4611      	mov	r1, r2
 8001d52:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001d56:	623b      	str	r3, [r7, #32]
 8001d58:	2300      	movs	r3, #0
 8001d5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d5c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001d60:	4642      	mov	r2, r8
 8001d62:	464b      	mov	r3, r9
 8001d64:	f04f 0000 	mov.w	r0, #0
 8001d68:	f04f 0100 	mov.w	r1, #0
 8001d6c:	0159      	lsls	r1, r3, #5
 8001d6e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d72:	0150      	lsls	r0, r2, #5
 8001d74:	4602      	mov	r2, r0
 8001d76:	460b      	mov	r3, r1
 8001d78:	4641      	mov	r1, r8
 8001d7a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001d7e:	4649      	mov	r1, r9
 8001d80:	eb63 0b01 	sbc.w	fp, r3, r1
 8001d84:	f04f 0200 	mov.w	r2, #0
 8001d88:	f04f 0300 	mov.w	r3, #0
 8001d8c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001d90:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001d94:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001d98:	ebb2 040a 	subs.w	r4, r2, sl
 8001d9c:	eb63 050b 	sbc.w	r5, r3, fp
 8001da0:	f04f 0200 	mov.w	r2, #0
 8001da4:	f04f 0300 	mov.w	r3, #0
 8001da8:	00eb      	lsls	r3, r5, #3
 8001daa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001dae:	00e2      	lsls	r2, r4, #3
 8001db0:	4614      	mov	r4, r2
 8001db2:	461d      	mov	r5, r3
 8001db4:	4643      	mov	r3, r8
 8001db6:	18e3      	adds	r3, r4, r3
 8001db8:	603b      	str	r3, [r7, #0]
 8001dba:	464b      	mov	r3, r9
 8001dbc:	eb45 0303 	adc.w	r3, r5, r3
 8001dc0:	607b      	str	r3, [r7, #4]
 8001dc2:	f04f 0200 	mov.w	r2, #0
 8001dc6:	f04f 0300 	mov.w	r3, #0
 8001dca:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001dce:	4629      	mov	r1, r5
 8001dd0:	028b      	lsls	r3, r1, #10
 8001dd2:	4621      	mov	r1, r4
 8001dd4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001dd8:	4621      	mov	r1, r4
 8001dda:	028a      	lsls	r2, r1, #10
 8001ddc:	4610      	mov	r0, r2
 8001dde:	4619      	mov	r1, r3
 8001de0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001de2:	2200      	movs	r2, #0
 8001de4:	61bb      	str	r3, [r7, #24]
 8001de6:	61fa      	str	r2, [r7, #28]
 8001de8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001dec:	f7fe f9ec 	bl	80001c8 <__aeabi_uldivmod>
 8001df0:	4602      	mov	r2, r0
 8001df2:	460b      	mov	r3, r1
 8001df4:	4613      	mov	r3, r2
 8001df6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001df8:	4b0b      	ldr	r3, [pc, #44]	@ (8001e28 <HAL_RCC_GetSysClockFreq+0x200>)
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	0c1b      	lsrs	r3, r3, #16
 8001dfe:	f003 0303 	and.w	r3, r3, #3
 8001e02:	3301      	adds	r3, #1
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001e08:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001e0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e10:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e12:	e002      	b.n	8001e1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e14:	4b05      	ldr	r3, [pc, #20]	@ (8001e2c <HAL_RCC_GetSysClockFreq+0x204>)
 8001e16:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3750      	adds	r7, #80	@ 0x50
 8001e20:	46bd      	mov	sp, r7
 8001e22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e26:	bf00      	nop
 8001e28:	40023800 	.word	0x40023800
 8001e2c:	00f42400 	.word	0x00f42400
 8001e30:	007a1200 	.word	0x007a1200

08001e34 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d101      	bne.n	8001e46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e07b      	b.n	8001f3e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d108      	bne.n	8001e60 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001e56:	d009      	beq.n	8001e6c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	61da      	str	r2, [r3, #28]
 8001e5e:	e005      	b.n	8001e6c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d106      	bne.n	8001e8c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f7fe ff6a 	bl	8000d60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2202      	movs	r2, #2
 8001e90:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001ea2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001eb4:	431a      	orrs	r2, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ebe:	431a      	orrs	r2, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	691b      	ldr	r3, [r3, #16]
 8001ec4:	f003 0302 	and.w	r3, r3, #2
 8001ec8:	431a      	orrs	r2, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	695b      	ldr	r3, [r3, #20]
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	431a      	orrs	r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	699b      	ldr	r3, [r3, #24]
 8001ed8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001edc:	431a      	orrs	r2, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	69db      	ldr	r3, [r3, #28]
 8001ee2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001ee6:	431a      	orrs	r2, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6a1b      	ldr	r3, [r3, #32]
 8001eec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ef0:	ea42 0103 	orr.w	r1, r2, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ef8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	430a      	orrs	r2, r1
 8001f02:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	699b      	ldr	r3, [r3, #24]
 8001f08:	0c1b      	lsrs	r3, r3, #16
 8001f0a:	f003 0104 	and.w	r1, r3, #4
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f12:	f003 0210 	and.w	r2, r3, #16
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	430a      	orrs	r2, r1
 8001f1c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	69da      	ldr	r2, [r3, #28]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f2c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2201      	movs	r2, #1
 8001f38:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b088      	sub	sp, #32
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	60f8      	str	r0, [r7, #12]
 8001f4e:	60b9      	str	r1, [r7, #8]
 8001f50:	603b      	str	r3, [r7, #0]
 8001f52:	4613      	mov	r3, r2
 8001f54:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001f56:	f7ff f83d 	bl	8000fd4 <HAL_GetTick>
 8001f5a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8001f5c:	88fb      	ldrh	r3, [r7, #6]
 8001f5e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d001      	beq.n	8001f70 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8001f6c:	2302      	movs	r3, #2
 8001f6e:	e12a      	b.n	80021c6 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d002      	beq.n	8001f7c <HAL_SPI_Transmit+0x36>
 8001f76:	88fb      	ldrh	r3, [r7, #6]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d101      	bne.n	8001f80 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e122      	b.n	80021c6 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d101      	bne.n	8001f8e <HAL_SPI_Transmit+0x48>
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	e11b      	b.n	80021c6 <HAL_SPI_Transmit+0x280>
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2201      	movs	r2, #1
 8001f92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2203      	movs	r2, #3
 8001f9a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	68ba      	ldr	r2, [r7, #8]
 8001fa8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	88fa      	ldrh	r2, [r7, #6]
 8001fae:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	88fa      	ldrh	r2, [r7, #6]
 8001fb4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001fdc:	d10f      	bne.n	8001ffe <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001fec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001ffc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002008:	2b40      	cmp	r3, #64	@ 0x40
 800200a:	d007      	beq.n	800201c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800201a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002024:	d152      	bne.n	80020cc <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d002      	beq.n	8002034 <HAL_SPI_Transmit+0xee>
 800202e:	8b7b      	ldrh	r3, [r7, #26]
 8002030:	2b01      	cmp	r3, #1
 8002032:	d145      	bne.n	80020c0 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002038:	881a      	ldrh	r2, [r3, #0]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002044:	1c9a      	adds	r2, r3, #2
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800204e:	b29b      	uxth	r3, r3
 8002050:	3b01      	subs	r3, #1
 8002052:	b29a      	uxth	r2, r3
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002058:	e032      	b.n	80020c0 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	f003 0302 	and.w	r3, r3, #2
 8002064:	2b02      	cmp	r3, #2
 8002066:	d112      	bne.n	800208e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800206c:	881a      	ldrh	r2, [r3, #0]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002078:	1c9a      	adds	r2, r3, #2
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002082:	b29b      	uxth	r3, r3
 8002084:	3b01      	subs	r3, #1
 8002086:	b29a      	uxth	r2, r3
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800208c:	e018      	b.n	80020c0 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800208e:	f7fe ffa1 	bl	8000fd4 <HAL_GetTick>
 8002092:	4602      	mov	r2, r0
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	683a      	ldr	r2, [r7, #0]
 800209a:	429a      	cmp	r2, r3
 800209c:	d803      	bhi.n	80020a6 <HAL_SPI_Transmit+0x160>
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80020a4:	d102      	bne.n	80020ac <HAL_SPI_Transmit+0x166>
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d109      	bne.n	80020c0 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2201      	movs	r2, #1
 80020b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2200      	movs	r2, #0
 80020b8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80020bc:	2303      	movs	r3, #3
 80020be:	e082      	b.n	80021c6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80020c4:	b29b      	uxth	r3, r3
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d1c7      	bne.n	800205a <HAL_SPI_Transmit+0x114>
 80020ca:	e053      	b.n	8002174 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d002      	beq.n	80020da <HAL_SPI_Transmit+0x194>
 80020d4:	8b7b      	ldrh	r3, [r7, #26]
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d147      	bne.n	800216a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	330c      	adds	r3, #12
 80020e4:	7812      	ldrb	r2, [r2, #0]
 80020e6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ec:	1c5a      	adds	r2, r3, #1
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	3b01      	subs	r3, #1
 80020fa:	b29a      	uxth	r2, r3
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002100:	e033      	b.n	800216a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	f003 0302 	and.w	r3, r3, #2
 800210c:	2b02      	cmp	r3, #2
 800210e:	d113      	bne.n	8002138 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	330c      	adds	r3, #12
 800211a:	7812      	ldrb	r2, [r2, #0]
 800211c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002122:	1c5a      	adds	r2, r3, #1
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800212c:	b29b      	uxth	r3, r3
 800212e:	3b01      	subs	r3, #1
 8002130:	b29a      	uxth	r2, r3
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002136:	e018      	b.n	800216a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002138:	f7fe ff4c 	bl	8000fd4 <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	683a      	ldr	r2, [r7, #0]
 8002144:	429a      	cmp	r2, r3
 8002146:	d803      	bhi.n	8002150 <HAL_SPI_Transmit+0x20a>
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800214e:	d102      	bne.n	8002156 <HAL_SPI_Transmit+0x210>
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d109      	bne.n	800216a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2201      	movs	r2, #1
 800215a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2200      	movs	r2, #0
 8002162:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e02d      	b.n	80021c6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800216e:	b29b      	uxth	r3, r3
 8002170:	2b00      	cmp	r3, #0
 8002172:	d1c6      	bne.n	8002102 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002174:	69fa      	ldr	r2, [r7, #28]
 8002176:	6839      	ldr	r1, [r7, #0]
 8002178:	68f8      	ldr	r0, [r7, #12]
 800217a:	f000 fbd9 	bl	8002930 <SPI_EndRxTxTransaction>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d002      	beq.n	800218a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2220      	movs	r2, #32
 8002188:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d10a      	bne.n	80021a8 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002192:	2300      	movs	r3, #0
 8002194:	617b      	str	r3, [r7, #20]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	617b      	str	r3, [r7, #20]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	617b      	str	r3, [r7, #20]
 80021a6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2201      	movs	r2, #1
 80021ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2200      	movs	r2, #0
 80021b4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d001      	beq.n	80021c4 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e000      	b.n	80021c6 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80021c4:	2300      	movs	r3, #0
  }
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3720      	adds	r7, #32
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021ce:	b580      	push	{r7, lr}
 80021d0:	b088      	sub	sp, #32
 80021d2:	af02      	add	r7, sp, #8
 80021d4:	60f8      	str	r0, [r7, #12]
 80021d6:	60b9      	str	r1, [r7, #8]
 80021d8:	603b      	str	r3, [r7, #0]
 80021da:	4613      	mov	r3, r2
 80021dc:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d001      	beq.n	80021ee <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80021ea:	2302      	movs	r3, #2
 80021ec:	e104      	b.n	80023f8 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80021f6:	d112      	bne.n	800221e <HAL_SPI_Receive+0x50>
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d10e      	bne.n	800221e <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2204      	movs	r2, #4
 8002204:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002208:	88fa      	ldrh	r2, [r7, #6]
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	9300      	str	r3, [sp, #0]
 800220e:	4613      	mov	r3, r2
 8002210:	68ba      	ldr	r2, [r7, #8]
 8002212:	68b9      	ldr	r1, [r7, #8]
 8002214:	68f8      	ldr	r0, [r7, #12]
 8002216:	f000 f8f3 	bl	8002400 <HAL_SPI_TransmitReceive>
 800221a:	4603      	mov	r3, r0
 800221c:	e0ec      	b.n	80023f8 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800221e:	f7fe fed9 	bl	8000fd4 <HAL_GetTick>
 8002222:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d002      	beq.n	8002230 <HAL_SPI_Receive+0x62>
 800222a:	88fb      	ldrh	r3, [r7, #6]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d101      	bne.n	8002234 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e0e1      	b.n	80023f8 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800223a:	2b01      	cmp	r3, #1
 800223c:	d101      	bne.n	8002242 <HAL_SPI_Receive+0x74>
 800223e:	2302      	movs	r3, #2
 8002240:	e0da      	b.n	80023f8 <HAL_SPI_Receive+0x22a>
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2201      	movs	r2, #1
 8002246:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2204      	movs	r2, #4
 800224e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2200      	movs	r2, #0
 8002256:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	68ba      	ldr	r2, [r7, #8]
 800225c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	88fa      	ldrh	r2, [r7, #6]
 8002262:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	88fa      	ldrh	r2, [r7, #6]
 8002268:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2200      	movs	r2, #0
 800226e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2200      	movs	r2, #0
 8002274:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2200      	movs	r2, #0
 800227a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2200      	movs	r2, #0
 8002280:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2200      	movs	r2, #0
 8002286:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002290:	d10f      	bne.n	80022b2 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80022a0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80022b0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022bc:	2b40      	cmp	r3, #64	@ 0x40
 80022be:	d007      	beq.n	80022d0 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80022ce:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d170      	bne.n	80023ba <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80022d8:	e035      	b.n	8002346 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f003 0301 	and.w	r3, r3, #1
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d115      	bne.n	8002314 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f103 020c 	add.w	r2, r3, #12
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022f4:	7812      	ldrb	r2, [r2, #0]
 80022f6:	b2d2      	uxtb	r2, r2
 80022f8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022fe:	1c5a      	adds	r2, r3, #1
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002308:	b29b      	uxth	r3, r3
 800230a:	3b01      	subs	r3, #1
 800230c:	b29a      	uxth	r2, r3
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002312:	e018      	b.n	8002346 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002314:	f7fe fe5e 	bl	8000fd4 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	683a      	ldr	r2, [r7, #0]
 8002320:	429a      	cmp	r2, r3
 8002322:	d803      	bhi.n	800232c <HAL_SPI_Receive+0x15e>
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800232a:	d102      	bne.n	8002332 <HAL_SPI_Receive+0x164>
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d109      	bne.n	8002346 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2201      	movs	r2, #1
 8002336:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2200      	movs	r2, #0
 800233e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e058      	b.n	80023f8 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800234a:	b29b      	uxth	r3, r3
 800234c:	2b00      	cmp	r3, #0
 800234e:	d1c4      	bne.n	80022da <HAL_SPI_Receive+0x10c>
 8002350:	e038      	b.n	80023c4 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	f003 0301 	and.w	r3, r3, #1
 800235c:	2b01      	cmp	r3, #1
 800235e:	d113      	bne.n	8002388 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	68da      	ldr	r2, [r3, #12]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800236a:	b292      	uxth	r2, r2
 800236c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002372:	1c9a      	adds	r2, r3, #2
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800237c:	b29b      	uxth	r3, r3
 800237e:	3b01      	subs	r3, #1
 8002380:	b29a      	uxth	r2, r3
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002386:	e018      	b.n	80023ba <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002388:	f7fe fe24 	bl	8000fd4 <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	683a      	ldr	r2, [r7, #0]
 8002394:	429a      	cmp	r2, r3
 8002396:	d803      	bhi.n	80023a0 <HAL_SPI_Receive+0x1d2>
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800239e:	d102      	bne.n	80023a6 <HAL_SPI_Receive+0x1d8>
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d109      	bne.n	80023ba <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2201      	movs	r2, #1
 80023aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2200      	movs	r2, #0
 80023b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e01e      	b.n	80023f8 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80023be:	b29b      	uxth	r3, r3
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d1c6      	bne.n	8002352 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80023c4:	697a      	ldr	r2, [r7, #20]
 80023c6:	6839      	ldr	r1, [r7, #0]
 80023c8:	68f8      	ldr	r0, [r7, #12]
 80023ca:	f000 fa4b 	bl	8002864 <SPI_EndRxTransaction>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d002      	beq.n	80023da <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2220      	movs	r2, #32
 80023d8:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2201      	movs	r2, #1
 80023de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2200      	movs	r2, #0
 80023e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e000      	b.n	80023f8 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80023f6:	2300      	movs	r3, #0
  }
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3718      	adds	r7, #24
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}

08002400 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b08a      	sub	sp, #40	@ 0x28
 8002404:	af00      	add	r7, sp, #0
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	60b9      	str	r1, [r7, #8]
 800240a:	607a      	str	r2, [r7, #4]
 800240c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800240e:	2301      	movs	r3, #1
 8002410:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002412:	f7fe fddf 	bl	8000fd4 <HAL_GetTick>
 8002416:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800241e:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002426:	887b      	ldrh	r3, [r7, #2]
 8002428:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800242a:	7ffb      	ldrb	r3, [r7, #31]
 800242c:	2b01      	cmp	r3, #1
 800242e:	d00c      	beq.n	800244a <HAL_SPI_TransmitReceive+0x4a>
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002436:	d106      	bne.n	8002446 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d102      	bne.n	8002446 <HAL_SPI_TransmitReceive+0x46>
 8002440:	7ffb      	ldrb	r3, [r7, #31]
 8002442:	2b04      	cmp	r3, #4
 8002444:	d001      	beq.n	800244a <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8002446:	2302      	movs	r3, #2
 8002448:	e17f      	b.n	800274a <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d005      	beq.n	800245c <HAL_SPI_TransmitReceive+0x5c>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d002      	beq.n	800245c <HAL_SPI_TransmitReceive+0x5c>
 8002456:	887b      	ldrh	r3, [r7, #2]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d101      	bne.n	8002460 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e174      	b.n	800274a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002466:	2b01      	cmp	r3, #1
 8002468:	d101      	bne.n	800246e <HAL_SPI_TransmitReceive+0x6e>
 800246a:	2302      	movs	r3, #2
 800246c:	e16d      	b.n	800274a <HAL_SPI_TransmitReceive+0x34a>
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2201      	movs	r2, #1
 8002472:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800247c:	b2db      	uxtb	r3, r3
 800247e:	2b04      	cmp	r3, #4
 8002480:	d003      	beq.n	800248a <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2205      	movs	r2, #5
 8002486:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2200      	movs	r2, #0
 800248e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	887a      	ldrh	r2, [r7, #2]
 800249a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	887a      	ldrh	r2, [r7, #2]
 80024a0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	68ba      	ldr	r2, [r7, #8]
 80024a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	887a      	ldrh	r2, [r7, #2]
 80024ac:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	887a      	ldrh	r2, [r7, #2]
 80024b2:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2200      	movs	r2, #0
 80024b8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2200      	movs	r2, #0
 80024be:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024ca:	2b40      	cmp	r3, #64	@ 0x40
 80024cc:	d007      	beq.n	80024de <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80024dc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80024e6:	d17e      	bne.n	80025e6 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d002      	beq.n	80024f6 <HAL_SPI_TransmitReceive+0xf6>
 80024f0:	8afb      	ldrh	r3, [r7, #22]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d16c      	bne.n	80025d0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024fa:	881a      	ldrh	r2, [r3, #0]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002506:	1c9a      	adds	r2, r3, #2
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002510:	b29b      	uxth	r3, r3
 8002512:	3b01      	subs	r3, #1
 8002514:	b29a      	uxth	r2, r3
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800251a:	e059      	b.n	80025d0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	f003 0302 	and.w	r3, r3, #2
 8002526:	2b02      	cmp	r3, #2
 8002528:	d11b      	bne.n	8002562 <HAL_SPI_TransmitReceive+0x162>
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800252e:	b29b      	uxth	r3, r3
 8002530:	2b00      	cmp	r3, #0
 8002532:	d016      	beq.n	8002562 <HAL_SPI_TransmitReceive+0x162>
 8002534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002536:	2b01      	cmp	r3, #1
 8002538:	d113      	bne.n	8002562 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800253e:	881a      	ldrh	r2, [r3, #0]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800254a:	1c9a      	adds	r2, r3, #2
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002554:	b29b      	uxth	r3, r3
 8002556:	3b01      	subs	r3, #1
 8002558:	b29a      	uxth	r2, r3
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800255e:	2300      	movs	r3, #0
 8002560:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	f003 0301 	and.w	r3, r3, #1
 800256c:	2b01      	cmp	r3, #1
 800256e:	d119      	bne.n	80025a4 <HAL_SPI_TransmitReceive+0x1a4>
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002574:	b29b      	uxth	r3, r3
 8002576:	2b00      	cmp	r3, #0
 8002578:	d014      	beq.n	80025a4 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	68da      	ldr	r2, [r3, #12]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002584:	b292      	uxth	r2, r2
 8002586:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800258c:	1c9a      	adds	r2, r3, #2
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002596:	b29b      	uxth	r3, r3
 8002598:	3b01      	subs	r3, #1
 800259a:	b29a      	uxth	r2, r3
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80025a0:	2301      	movs	r3, #1
 80025a2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80025a4:	f7fe fd16 	bl	8000fd4 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	6a3b      	ldr	r3, [r7, #32]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d80d      	bhi.n	80025d0 <HAL_SPI_TransmitReceive+0x1d0>
 80025b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80025ba:	d009      	beq.n	80025d0 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2201      	movs	r2, #1
 80025c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2200      	movs	r2, #0
 80025c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	e0bc      	b.n	800274a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d1a0      	bne.n	800251c <HAL_SPI_TransmitReceive+0x11c>
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80025de:	b29b      	uxth	r3, r3
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d19b      	bne.n	800251c <HAL_SPI_TransmitReceive+0x11c>
 80025e4:	e082      	b.n	80026ec <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d002      	beq.n	80025f4 <HAL_SPI_TransmitReceive+0x1f4>
 80025ee:	8afb      	ldrh	r3, [r7, #22]
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d171      	bne.n	80026d8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	330c      	adds	r3, #12
 80025fe:	7812      	ldrb	r2, [r2, #0]
 8002600:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002606:	1c5a      	adds	r2, r3, #1
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002610:	b29b      	uxth	r3, r3
 8002612:	3b01      	subs	r3, #1
 8002614:	b29a      	uxth	r2, r3
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800261a:	e05d      	b.n	80026d8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	f003 0302 	and.w	r3, r3, #2
 8002626:	2b02      	cmp	r3, #2
 8002628:	d11c      	bne.n	8002664 <HAL_SPI_TransmitReceive+0x264>
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800262e:	b29b      	uxth	r3, r3
 8002630:	2b00      	cmp	r3, #0
 8002632:	d017      	beq.n	8002664 <HAL_SPI_TransmitReceive+0x264>
 8002634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002636:	2b01      	cmp	r3, #1
 8002638:	d114      	bne.n	8002664 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	330c      	adds	r3, #12
 8002644:	7812      	ldrb	r2, [r2, #0]
 8002646:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800264c:	1c5a      	adds	r2, r3, #1
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002656:	b29b      	uxth	r3, r3
 8002658:	3b01      	subs	r3, #1
 800265a:	b29a      	uxth	r2, r3
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002660:	2300      	movs	r3, #0
 8002662:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	2b01      	cmp	r3, #1
 8002670:	d119      	bne.n	80026a6 <HAL_SPI_TransmitReceive+0x2a6>
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002676:	b29b      	uxth	r3, r3
 8002678:	2b00      	cmp	r3, #0
 800267a:	d014      	beq.n	80026a6 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	68da      	ldr	r2, [r3, #12]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002686:	b2d2      	uxtb	r2, r2
 8002688:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800268e:	1c5a      	adds	r2, r3, #1
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002698:	b29b      	uxth	r3, r3
 800269a:	3b01      	subs	r3, #1
 800269c:	b29a      	uxth	r2, r3
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80026a2:	2301      	movs	r3, #1
 80026a4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80026a6:	f7fe fc95 	bl	8000fd4 <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	6a3b      	ldr	r3, [r7, #32]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d803      	bhi.n	80026be <HAL_SPI_TransmitReceive+0x2be>
 80026b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80026bc:	d102      	bne.n	80026c4 <HAL_SPI_TransmitReceive+0x2c4>
 80026be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d109      	bne.n	80026d8 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2201      	movs	r2, #1
 80026c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2200      	movs	r2, #0
 80026d0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80026d4:	2303      	movs	r3, #3
 80026d6:	e038      	b.n	800274a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80026dc:	b29b      	uxth	r3, r3
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d19c      	bne.n	800261c <HAL_SPI_TransmitReceive+0x21c>
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d197      	bne.n	800261c <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80026ec:	6a3a      	ldr	r2, [r7, #32]
 80026ee:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80026f0:	68f8      	ldr	r0, [r7, #12]
 80026f2:	f000 f91d 	bl	8002930 <SPI_EndRxTxTransaction>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d008      	beq.n	800270e <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2220      	movs	r2, #32
 8002700:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2200      	movs	r2, #0
 8002706:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e01d      	b.n	800274a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d10a      	bne.n	800272c <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002716:	2300      	movs	r3, #0
 8002718:	613b      	str	r3, [r7, #16]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	613b      	str	r3, [r7, #16]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	613b      	str	r3, [r7, #16]
 800272a:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2201      	movs	r2, #1
 8002730:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2200      	movs	r2, #0
 8002738:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002740:	2b00      	cmp	r3, #0
 8002742:	d001      	beq.n	8002748 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e000      	b.n	800274a <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8002748:	2300      	movs	r3, #0
  }
}
 800274a:	4618      	mov	r0, r3
 800274c:	3728      	adds	r7, #40	@ 0x28
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
	...

08002754 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b088      	sub	sp, #32
 8002758:	af00      	add	r7, sp, #0
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	60b9      	str	r1, [r7, #8]
 800275e:	603b      	str	r3, [r7, #0]
 8002760:	4613      	mov	r3, r2
 8002762:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002764:	f7fe fc36 	bl	8000fd4 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800276c:	1a9b      	subs	r3, r3, r2
 800276e:	683a      	ldr	r2, [r7, #0]
 8002770:	4413      	add	r3, r2
 8002772:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002774:	f7fe fc2e 	bl	8000fd4 <HAL_GetTick>
 8002778:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800277a:	4b39      	ldr	r3, [pc, #228]	@ (8002860 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	015b      	lsls	r3, r3, #5
 8002780:	0d1b      	lsrs	r3, r3, #20
 8002782:	69fa      	ldr	r2, [r7, #28]
 8002784:	fb02 f303 	mul.w	r3, r2, r3
 8002788:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800278a:	e054      	b.n	8002836 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002792:	d050      	beq.n	8002836 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002794:	f7fe fc1e 	bl	8000fd4 <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	69fa      	ldr	r2, [r7, #28]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d902      	bls.n	80027aa <SPI_WaitFlagStateUntilTimeout+0x56>
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d13d      	bne.n	8002826 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	685a      	ldr	r2, [r3, #4]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80027b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80027c2:	d111      	bne.n	80027e8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80027cc:	d004      	beq.n	80027d8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027d6:	d107      	bne.n	80027e8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80027e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80027f0:	d10f      	bne.n	8002812 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002800:	601a      	str	r2, [r3, #0]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002810:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2201      	movs	r2, #1
 8002816:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2200      	movs	r2, #0
 800281e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e017      	b.n	8002856 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d101      	bne.n	8002830 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800282c:	2300      	movs	r3, #0
 800282e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	3b01      	subs	r3, #1
 8002834:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	689a      	ldr	r2, [r3, #8]
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	4013      	ands	r3, r2
 8002840:	68ba      	ldr	r2, [r7, #8]
 8002842:	429a      	cmp	r2, r3
 8002844:	bf0c      	ite	eq
 8002846:	2301      	moveq	r3, #1
 8002848:	2300      	movne	r3, #0
 800284a:	b2db      	uxtb	r3, r3
 800284c:	461a      	mov	r2, r3
 800284e:	79fb      	ldrb	r3, [r7, #7]
 8002850:	429a      	cmp	r2, r3
 8002852:	d19b      	bne.n	800278c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002854:	2300      	movs	r3, #0
}
 8002856:	4618      	mov	r0, r3
 8002858:	3720      	adds	r7, #32
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	2000000c 	.word	0x2000000c

08002864 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b086      	sub	sp, #24
 8002868:	af02      	add	r7, sp, #8
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	60b9      	str	r1, [r7, #8]
 800286e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002878:	d111      	bne.n	800289e <SPI_EndRxTransaction+0x3a>
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002882:	d004      	beq.n	800288e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800288c:	d107      	bne.n	800289e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800289c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80028a6:	d12a      	bne.n	80028fe <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028b0:	d012      	beq.n	80028d8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	9300      	str	r3, [sp, #0]
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	2200      	movs	r2, #0
 80028ba:	2180      	movs	r1, #128	@ 0x80
 80028bc:	68f8      	ldr	r0, [r7, #12]
 80028be:	f7ff ff49 	bl	8002754 <SPI_WaitFlagStateUntilTimeout>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d02d      	beq.n	8002924 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028cc:	f043 0220 	orr.w	r2, r3, #32
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80028d4:	2303      	movs	r3, #3
 80028d6:	e026      	b.n	8002926 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	9300      	str	r3, [sp, #0]
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	2200      	movs	r2, #0
 80028e0:	2101      	movs	r1, #1
 80028e2:	68f8      	ldr	r0, [r7, #12]
 80028e4:	f7ff ff36 	bl	8002754 <SPI_WaitFlagStateUntilTimeout>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d01a      	beq.n	8002924 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028f2:	f043 0220 	orr.w	r2, r3, #32
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e013      	b.n	8002926 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	9300      	str	r3, [sp, #0]
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	2200      	movs	r2, #0
 8002906:	2101      	movs	r1, #1
 8002908:	68f8      	ldr	r0, [r7, #12]
 800290a:	f7ff ff23 	bl	8002754 <SPI_WaitFlagStateUntilTimeout>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d007      	beq.n	8002924 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002918:	f043 0220 	orr.w	r2, r3, #32
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002920:	2303      	movs	r3, #3
 8002922:	e000      	b.n	8002926 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002924:	2300      	movs	r3, #0
}
 8002926:	4618      	mov	r0, r3
 8002928:	3710      	adds	r7, #16
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
	...

08002930 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b088      	sub	sp, #32
 8002934:	af02      	add	r7, sp, #8
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	60b9      	str	r1, [r7, #8]
 800293a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	9300      	str	r3, [sp, #0]
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	2201      	movs	r2, #1
 8002944:	2102      	movs	r1, #2
 8002946:	68f8      	ldr	r0, [r7, #12]
 8002948:	f7ff ff04 	bl	8002754 <SPI_WaitFlagStateUntilTimeout>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d007      	beq.n	8002962 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002956:	f043 0220 	orr.w	r2, r3, #32
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e032      	b.n	80029c8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002962:	4b1b      	ldr	r3, [pc, #108]	@ (80029d0 <SPI_EndRxTxTransaction+0xa0>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a1b      	ldr	r2, [pc, #108]	@ (80029d4 <SPI_EndRxTxTransaction+0xa4>)
 8002968:	fba2 2303 	umull	r2, r3, r2, r3
 800296c:	0d5b      	lsrs	r3, r3, #21
 800296e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002972:	fb02 f303 	mul.w	r3, r2, r3
 8002976:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002980:	d112      	bne.n	80029a8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	9300      	str	r3, [sp, #0]
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	2200      	movs	r2, #0
 800298a:	2180      	movs	r1, #128	@ 0x80
 800298c:	68f8      	ldr	r0, [r7, #12]
 800298e:	f7ff fee1 	bl	8002754 <SPI_WaitFlagStateUntilTimeout>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d016      	beq.n	80029c6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800299c:	f043 0220 	orr.w	r2, r3, #32
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80029a4:	2303      	movs	r3, #3
 80029a6:	e00f      	b.n	80029c8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d00a      	beq.n	80029c4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	3b01      	subs	r3, #1
 80029b2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029be:	2b80      	cmp	r3, #128	@ 0x80
 80029c0:	d0f2      	beq.n	80029a8 <SPI_EndRxTxTransaction+0x78>
 80029c2:	e000      	b.n	80029c6 <SPI_EndRxTxTransaction+0x96>
        break;
 80029c4:	bf00      	nop
  }

  return HAL_OK;
 80029c6:	2300      	movs	r3, #0
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3718      	adds	r7, #24
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	2000000c 	.word	0x2000000c
 80029d4:	165e9f81 	.word	0x165e9f81

080029d8 <memset>:
 80029d8:	4402      	add	r2, r0
 80029da:	4603      	mov	r3, r0
 80029dc:	4293      	cmp	r3, r2
 80029de:	d100      	bne.n	80029e2 <memset+0xa>
 80029e0:	4770      	bx	lr
 80029e2:	f803 1b01 	strb.w	r1, [r3], #1
 80029e6:	e7f9      	b.n	80029dc <memset+0x4>

080029e8 <__libc_init_array>:
 80029e8:	b570      	push	{r4, r5, r6, lr}
 80029ea:	4d0d      	ldr	r5, [pc, #52]	@ (8002a20 <__libc_init_array+0x38>)
 80029ec:	4c0d      	ldr	r4, [pc, #52]	@ (8002a24 <__libc_init_array+0x3c>)
 80029ee:	1b64      	subs	r4, r4, r5
 80029f0:	10a4      	asrs	r4, r4, #2
 80029f2:	2600      	movs	r6, #0
 80029f4:	42a6      	cmp	r6, r4
 80029f6:	d109      	bne.n	8002a0c <__libc_init_array+0x24>
 80029f8:	4d0b      	ldr	r5, [pc, #44]	@ (8002a28 <__libc_init_array+0x40>)
 80029fa:	4c0c      	ldr	r4, [pc, #48]	@ (8002a2c <__libc_init_array+0x44>)
 80029fc:	f000 f818 	bl	8002a30 <_init>
 8002a00:	1b64      	subs	r4, r4, r5
 8002a02:	10a4      	asrs	r4, r4, #2
 8002a04:	2600      	movs	r6, #0
 8002a06:	42a6      	cmp	r6, r4
 8002a08:	d105      	bne.n	8002a16 <__libc_init_array+0x2e>
 8002a0a:	bd70      	pop	{r4, r5, r6, pc}
 8002a0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a10:	4798      	blx	r3
 8002a12:	3601      	adds	r6, #1
 8002a14:	e7ee      	b.n	80029f4 <__libc_init_array+0xc>
 8002a16:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a1a:	4798      	blx	r3
 8002a1c:	3601      	adds	r6, #1
 8002a1e:	e7f2      	b.n	8002a06 <__libc_init_array+0x1e>
 8002a20:	08002a60 	.word	0x08002a60
 8002a24:	08002a60 	.word	0x08002a60
 8002a28:	08002a60 	.word	0x08002a60
 8002a2c:	08002a64 	.word	0x08002a64

08002a30 <_init>:
 8002a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a32:	bf00      	nop
 8002a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a36:	bc08      	pop	{r3}
 8002a38:	469e      	mov	lr, r3
 8002a3a:	4770      	bx	lr

08002a3c <_fini>:
 8002a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a3e:	bf00      	nop
 8002a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a42:	bc08      	pop	{r3}
 8002a44:	469e      	mov	lr, r3
 8002a46:	4770      	bx	lr
