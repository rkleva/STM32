
SPI_BM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ff0  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003178  08003178  00004178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003188  08003188  00005010  2**0
                  CONTENTS
  4 .ARM          00000008  08003188  08003188  00004188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003190  08003190  00005010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003190  08003190  00004190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003194  08003194  00004194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08003198  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00005010  2**0
                  CONTENTS
 10 .bss          00000268  20000010  20000010  00005010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000278  20000278  00005010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00005010  2**0
                  CONTENTS, READONLY
 13 .debug_info   00005e9c  00000000  00000000  00005040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000012f1  00000000  00000000  0000aedc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000678  00000000  00000000  0000c1d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000004d1  00000000  00000000  0000c848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f317  00000000  00000000  0000cd19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00006e07  00000000  00000000  0002c030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000be6f8  00000000  00000000  00032e37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f152f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001a84  00000000  00000000  000f1574  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005e  00000000  00000000  000f2ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003160 	.word	0x08003160

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08003160 	.word	0x08003160

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	@ 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__aeabi_d2f>:
 8000794:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000798:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 800079c:	bf24      	itt	cs
 800079e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80007a2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80007a6:	d90d      	bls.n	80007c4 <__aeabi_d2f+0x30>
 80007a8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80007ac:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007b0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007b4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80007b8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007bc:	bf08      	it	eq
 80007be:	f020 0001 	biceq.w	r0, r0, #1
 80007c2:	4770      	bx	lr
 80007c4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80007c8:	d121      	bne.n	800080e <__aeabi_d2f+0x7a>
 80007ca:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80007ce:	bfbc      	itt	lt
 80007d0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80007d4:	4770      	bxlt	lr
 80007d6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80007da:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007de:	f1c2 0218 	rsb	r2, r2, #24
 80007e2:	f1c2 0c20 	rsb	ip, r2, #32
 80007e6:	fa10 f30c 	lsls.w	r3, r0, ip
 80007ea:	fa20 f002 	lsr.w	r0, r0, r2
 80007ee:	bf18      	it	ne
 80007f0:	f040 0001 	orrne.w	r0, r0, #1
 80007f4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007f8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80007fc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000800:	ea40 000c 	orr.w	r0, r0, ip
 8000804:	fa23 f302 	lsr.w	r3, r3, r2
 8000808:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800080c:	e7cc      	b.n	80007a8 <__aeabi_d2f+0x14>
 800080e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000812:	d107      	bne.n	8000824 <__aeabi_d2f+0x90>
 8000814:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000818:	bf1e      	ittt	ne
 800081a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 800081e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000822:	4770      	bxne	lr
 8000824:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000828:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 800082c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop

08000834 <__aeabi_uldivmod>:
 8000834:	b953      	cbnz	r3, 800084c <__aeabi_uldivmod+0x18>
 8000836:	b94a      	cbnz	r2, 800084c <__aeabi_uldivmod+0x18>
 8000838:	2900      	cmp	r1, #0
 800083a:	bf08      	it	eq
 800083c:	2800      	cmpeq	r0, #0
 800083e:	bf1c      	itt	ne
 8000840:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000844:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000848:	f000 b96a 	b.w	8000b20 <__aeabi_idiv0>
 800084c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000850:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000854:	f000 f806 	bl	8000864 <__udivmoddi4>
 8000858:	f8dd e004 	ldr.w	lr, [sp, #4]
 800085c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000860:	b004      	add	sp, #16
 8000862:	4770      	bx	lr

08000864 <__udivmoddi4>:
 8000864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000868:	9d08      	ldr	r5, [sp, #32]
 800086a:	460c      	mov	r4, r1
 800086c:	2b00      	cmp	r3, #0
 800086e:	d14e      	bne.n	800090e <__udivmoddi4+0xaa>
 8000870:	4694      	mov	ip, r2
 8000872:	458c      	cmp	ip, r1
 8000874:	4686      	mov	lr, r0
 8000876:	fab2 f282 	clz	r2, r2
 800087a:	d962      	bls.n	8000942 <__udivmoddi4+0xde>
 800087c:	b14a      	cbz	r2, 8000892 <__udivmoddi4+0x2e>
 800087e:	f1c2 0320 	rsb	r3, r2, #32
 8000882:	4091      	lsls	r1, r2
 8000884:	fa20 f303 	lsr.w	r3, r0, r3
 8000888:	fa0c fc02 	lsl.w	ip, ip, r2
 800088c:	4319      	orrs	r1, r3
 800088e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000892:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000896:	fa1f f68c 	uxth.w	r6, ip
 800089a:	fbb1 f4f7 	udiv	r4, r1, r7
 800089e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008a2:	fb07 1114 	mls	r1, r7, r4, r1
 80008a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008aa:	fb04 f106 	mul.w	r1, r4, r6
 80008ae:	4299      	cmp	r1, r3
 80008b0:	d90a      	bls.n	80008c8 <__udivmoddi4+0x64>
 80008b2:	eb1c 0303 	adds.w	r3, ip, r3
 80008b6:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80008ba:	f080 8112 	bcs.w	8000ae2 <__udivmoddi4+0x27e>
 80008be:	4299      	cmp	r1, r3
 80008c0:	f240 810f 	bls.w	8000ae2 <__udivmoddi4+0x27e>
 80008c4:	3c02      	subs	r4, #2
 80008c6:	4463      	add	r3, ip
 80008c8:	1a59      	subs	r1, r3, r1
 80008ca:	fa1f f38e 	uxth.w	r3, lr
 80008ce:	fbb1 f0f7 	udiv	r0, r1, r7
 80008d2:	fb07 1110 	mls	r1, r7, r0, r1
 80008d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008da:	fb00 f606 	mul.w	r6, r0, r6
 80008de:	429e      	cmp	r6, r3
 80008e0:	d90a      	bls.n	80008f8 <__udivmoddi4+0x94>
 80008e2:	eb1c 0303 	adds.w	r3, ip, r3
 80008e6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80008ea:	f080 80fc 	bcs.w	8000ae6 <__udivmoddi4+0x282>
 80008ee:	429e      	cmp	r6, r3
 80008f0:	f240 80f9 	bls.w	8000ae6 <__udivmoddi4+0x282>
 80008f4:	4463      	add	r3, ip
 80008f6:	3802      	subs	r0, #2
 80008f8:	1b9b      	subs	r3, r3, r6
 80008fa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80008fe:	2100      	movs	r1, #0
 8000900:	b11d      	cbz	r5, 800090a <__udivmoddi4+0xa6>
 8000902:	40d3      	lsrs	r3, r2
 8000904:	2200      	movs	r2, #0
 8000906:	e9c5 3200 	strd	r3, r2, [r5]
 800090a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800090e:	428b      	cmp	r3, r1
 8000910:	d905      	bls.n	800091e <__udivmoddi4+0xba>
 8000912:	b10d      	cbz	r5, 8000918 <__udivmoddi4+0xb4>
 8000914:	e9c5 0100 	strd	r0, r1, [r5]
 8000918:	2100      	movs	r1, #0
 800091a:	4608      	mov	r0, r1
 800091c:	e7f5      	b.n	800090a <__udivmoddi4+0xa6>
 800091e:	fab3 f183 	clz	r1, r3
 8000922:	2900      	cmp	r1, #0
 8000924:	d146      	bne.n	80009b4 <__udivmoddi4+0x150>
 8000926:	42a3      	cmp	r3, r4
 8000928:	d302      	bcc.n	8000930 <__udivmoddi4+0xcc>
 800092a:	4290      	cmp	r0, r2
 800092c:	f0c0 80f0 	bcc.w	8000b10 <__udivmoddi4+0x2ac>
 8000930:	1a86      	subs	r6, r0, r2
 8000932:	eb64 0303 	sbc.w	r3, r4, r3
 8000936:	2001      	movs	r0, #1
 8000938:	2d00      	cmp	r5, #0
 800093a:	d0e6      	beq.n	800090a <__udivmoddi4+0xa6>
 800093c:	e9c5 6300 	strd	r6, r3, [r5]
 8000940:	e7e3      	b.n	800090a <__udivmoddi4+0xa6>
 8000942:	2a00      	cmp	r2, #0
 8000944:	f040 8090 	bne.w	8000a68 <__udivmoddi4+0x204>
 8000948:	eba1 040c 	sub.w	r4, r1, ip
 800094c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000950:	fa1f f78c 	uxth.w	r7, ip
 8000954:	2101      	movs	r1, #1
 8000956:	fbb4 f6f8 	udiv	r6, r4, r8
 800095a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800095e:	fb08 4416 	mls	r4, r8, r6, r4
 8000962:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000966:	fb07 f006 	mul.w	r0, r7, r6
 800096a:	4298      	cmp	r0, r3
 800096c:	d908      	bls.n	8000980 <__udivmoddi4+0x11c>
 800096e:	eb1c 0303 	adds.w	r3, ip, r3
 8000972:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000976:	d202      	bcs.n	800097e <__udivmoddi4+0x11a>
 8000978:	4298      	cmp	r0, r3
 800097a:	f200 80cd 	bhi.w	8000b18 <__udivmoddi4+0x2b4>
 800097e:	4626      	mov	r6, r4
 8000980:	1a1c      	subs	r4, r3, r0
 8000982:	fa1f f38e 	uxth.w	r3, lr
 8000986:	fbb4 f0f8 	udiv	r0, r4, r8
 800098a:	fb08 4410 	mls	r4, r8, r0, r4
 800098e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000992:	fb00 f707 	mul.w	r7, r0, r7
 8000996:	429f      	cmp	r7, r3
 8000998:	d908      	bls.n	80009ac <__udivmoddi4+0x148>
 800099a:	eb1c 0303 	adds.w	r3, ip, r3
 800099e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80009a2:	d202      	bcs.n	80009aa <__udivmoddi4+0x146>
 80009a4:	429f      	cmp	r7, r3
 80009a6:	f200 80b0 	bhi.w	8000b0a <__udivmoddi4+0x2a6>
 80009aa:	4620      	mov	r0, r4
 80009ac:	1bdb      	subs	r3, r3, r7
 80009ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009b2:	e7a5      	b.n	8000900 <__udivmoddi4+0x9c>
 80009b4:	f1c1 0620 	rsb	r6, r1, #32
 80009b8:	408b      	lsls	r3, r1
 80009ba:	fa22 f706 	lsr.w	r7, r2, r6
 80009be:	431f      	orrs	r7, r3
 80009c0:	fa20 fc06 	lsr.w	ip, r0, r6
 80009c4:	fa04 f301 	lsl.w	r3, r4, r1
 80009c8:	ea43 030c 	orr.w	r3, r3, ip
 80009cc:	40f4      	lsrs	r4, r6
 80009ce:	fa00 f801 	lsl.w	r8, r0, r1
 80009d2:	0c38      	lsrs	r0, r7, #16
 80009d4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80009d8:	fbb4 fef0 	udiv	lr, r4, r0
 80009dc:	fa1f fc87 	uxth.w	ip, r7
 80009e0:	fb00 441e 	mls	r4, r0, lr, r4
 80009e4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009e8:	fb0e f90c 	mul.w	r9, lr, ip
 80009ec:	45a1      	cmp	r9, r4
 80009ee:	fa02 f201 	lsl.w	r2, r2, r1
 80009f2:	d90a      	bls.n	8000a0a <__udivmoddi4+0x1a6>
 80009f4:	193c      	adds	r4, r7, r4
 80009f6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80009fa:	f080 8084 	bcs.w	8000b06 <__udivmoddi4+0x2a2>
 80009fe:	45a1      	cmp	r9, r4
 8000a00:	f240 8081 	bls.w	8000b06 <__udivmoddi4+0x2a2>
 8000a04:	f1ae 0e02 	sub.w	lr, lr, #2
 8000a08:	443c      	add	r4, r7
 8000a0a:	eba4 0409 	sub.w	r4, r4, r9
 8000a0e:	fa1f f983 	uxth.w	r9, r3
 8000a12:	fbb4 f3f0 	udiv	r3, r4, r0
 8000a16:	fb00 4413 	mls	r4, r0, r3, r4
 8000a1a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a1e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a22:	45a4      	cmp	ip, r4
 8000a24:	d907      	bls.n	8000a36 <__udivmoddi4+0x1d2>
 8000a26:	193c      	adds	r4, r7, r4
 8000a28:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000a2c:	d267      	bcs.n	8000afe <__udivmoddi4+0x29a>
 8000a2e:	45a4      	cmp	ip, r4
 8000a30:	d965      	bls.n	8000afe <__udivmoddi4+0x29a>
 8000a32:	3b02      	subs	r3, #2
 8000a34:	443c      	add	r4, r7
 8000a36:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000a3a:	fba0 9302 	umull	r9, r3, r0, r2
 8000a3e:	eba4 040c 	sub.w	r4, r4, ip
 8000a42:	429c      	cmp	r4, r3
 8000a44:	46ce      	mov	lr, r9
 8000a46:	469c      	mov	ip, r3
 8000a48:	d351      	bcc.n	8000aee <__udivmoddi4+0x28a>
 8000a4a:	d04e      	beq.n	8000aea <__udivmoddi4+0x286>
 8000a4c:	b155      	cbz	r5, 8000a64 <__udivmoddi4+0x200>
 8000a4e:	ebb8 030e 	subs.w	r3, r8, lr
 8000a52:	eb64 040c 	sbc.w	r4, r4, ip
 8000a56:	fa04 f606 	lsl.w	r6, r4, r6
 8000a5a:	40cb      	lsrs	r3, r1
 8000a5c:	431e      	orrs	r6, r3
 8000a5e:	40cc      	lsrs	r4, r1
 8000a60:	e9c5 6400 	strd	r6, r4, [r5]
 8000a64:	2100      	movs	r1, #0
 8000a66:	e750      	b.n	800090a <__udivmoddi4+0xa6>
 8000a68:	f1c2 0320 	rsb	r3, r2, #32
 8000a6c:	fa20 f103 	lsr.w	r1, r0, r3
 8000a70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a74:	fa24 f303 	lsr.w	r3, r4, r3
 8000a78:	4094      	lsls	r4, r2
 8000a7a:	430c      	orrs	r4, r1
 8000a7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a80:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a84:	fa1f f78c 	uxth.w	r7, ip
 8000a88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a8c:	fb08 3110 	mls	r1, r8, r0, r3
 8000a90:	0c23      	lsrs	r3, r4, #16
 8000a92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a96:	fb00 f107 	mul.w	r1, r0, r7
 8000a9a:	4299      	cmp	r1, r3
 8000a9c:	d908      	bls.n	8000ab0 <__udivmoddi4+0x24c>
 8000a9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000aa2:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000aa6:	d22c      	bcs.n	8000b02 <__udivmoddi4+0x29e>
 8000aa8:	4299      	cmp	r1, r3
 8000aaa:	d92a      	bls.n	8000b02 <__udivmoddi4+0x29e>
 8000aac:	3802      	subs	r0, #2
 8000aae:	4463      	add	r3, ip
 8000ab0:	1a5b      	subs	r3, r3, r1
 8000ab2:	b2a4      	uxth	r4, r4
 8000ab4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ab8:	fb08 3311 	mls	r3, r8, r1, r3
 8000abc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ac0:	fb01 f307 	mul.w	r3, r1, r7
 8000ac4:	42a3      	cmp	r3, r4
 8000ac6:	d908      	bls.n	8000ada <__udivmoddi4+0x276>
 8000ac8:	eb1c 0404 	adds.w	r4, ip, r4
 8000acc:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000ad0:	d213      	bcs.n	8000afa <__udivmoddi4+0x296>
 8000ad2:	42a3      	cmp	r3, r4
 8000ad4:	d911      	bls.n	8000afa <__udivmoddi4+0x296>
 8000ad6:	3902      	subs	r1, #2
 8000ad8:	4464      	add	r4, ip
 8000ada:	1ae4      	subs	r4, r4, r3
 8000adc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ae0:	e739      	b.n	8000956 <__udivmoddi4+0xf2>
 8000ae2:	4604      	mov	r4, r0
 8000ae4:	e6f0      	b.n	80008c8 <__udivmoddi4+0x64>
 8000ae6:	4608      	mov	r0, r1
 8000ae8:	e706      	b.n	80008f8 <__udivmoddi4+0x94>
 8000aea:	45c8      	cmp	r8, r9
 8000aec:	d2ae      	bcs.n	8000a4c <__udivmoddi4+0x1e8>
 8000aee:	ebb9 0e02 	subs.w	lr, r9, r2
 8000af2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000af6:	3801      	subs	r0, #1
 8000af8:	e7a8      	b.n	8000a4c <__udivmoddi4+0x1e8>
 8000afa:	4631      	mov	r1, r6
 8000afc:	e7ed      	b.n	8000ada <__udivmoddi4+0x276>
 8000afe:	4603      	mov	r3, r0
 8000b00:	e799      	b.n	8000a36 <__udivmoddi4+0x1d2>
 8000b02:	4630      	mov	r0, r6
 8000b04:	e7d4      	b.n	8000ab0 <__udivmoddi4+0x24c>
 8000b06:	46d6      	mov	lr, sl
 8000b08:	e77f      	b.n	8000a0a <__udivmoddi4+0x1a6>
 8000b0a:	4463      	add	r3, ip
 8000b0c:	3802      	subs	r0, #2
 8000b0e:	e74d      	b.n	80009ac <__udivmoddi4+0x148>
 8000b10:	4606      	mov	r6, r0
 8000b12:	4623      	mov	r3, r4
 8000b14:	4608      	mov	r0, r1
 8000b16:	e70f      	b.n	8000938 <__udivmoddi4+0xd4>
 8000b18:	3e02      	subs	r6, #2
 8000b1a:	4463      	add	r3, ip
 8000b1c:	e730      	b.n	8000980 <__udivmoddi4+0x11c>
 8000b1e:	bf00      	nop

08000b20 <__aeabi_idiv0>:
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <word_to_binary_array>:
#define PEC10_READ    2
void word_to_binary_array10_data_PEC(uint16_t word, uint16_t binary_array[16]);
void byte_array_to_bit_array10_data_PEC(uint8_t *data, int data_len, uint8_t *bit_array, uint8_t *expanded_array);


void word_to_binary_array(uint16_t word, uint16_t binary_array[16]) {
 8000b24:	b480      	push	{r7}
 8000b26:	b085      	sub	sp, #20
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	6039      	str	r1, [r7, #0]
 8000b2e:	80fb      	strh	r3, [r7, #6]
    // Loop through each bit in the 16-bit word, starting from LSB
    for (int i = 0; i < 16; i++) {
 8000b30:	2300      	movs	r3, #0
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	e00f      	b.n	8000b56 <word_to_binary_array+0x32>
        // Extract the i-th bit and store it in the array
        binary_array[i] = (word >> i) & 1;
 8000b36:	88fa      	ldrh	r2, [r7, #6]
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	fa42 f303 	asr.w	r3, r2, r3
 8000b3e:	b29a      	uxth	r2, r3
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	005b      	lsls	r3, r3, #1
 8000b44:	6839      	ldr	r1, [r7, #0]
 8000b46:	440b      	add	r3, r1
 8000b48:	f002 0201 	and.w	r2, r2, #1
 8000b4c:	b292      	uxth	r2, r2
 8000b4e:	801a      	strh	r2, [r3, #0]
    for (int i = 0; i < 16; i++) {
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	3301      	adds	r3, #1
 8000b54:	60fb      	str	r3, [r7, #12]
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	2b0f      	cmp	r3, #15
 8000b5a:	ddec      	ble.n	8000b36 <word_to_binary_array+0x12>
    }
}
 8000b5c:	bf00      	nop
 8000b5e:	bf00      	nop
 8000b60:	3714      	adds	r7, #20
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr

08000b6a <binary_array_to_word>:


uint16_t binary_array_to_word(uint16_t binary_array[16]) {
 8000b6a:	b480      	push	{r7}
 8000b6c:	b085      	sub	sp, #20
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	6078      	str	r0, [r7, #4]
    uint16_t word = 0;
 8000b72:	2300      	movs	r3, #0
 8000b74:	81fb      	strh	r3, [r7, #14]

    // Iterate through each bit in the binary array
    for (int i = 0; i < 16; i++) {
 8000b76:	2300      	movs	r3, #0
 8000b78:	60bb      	str	r3, [r7, #8]
 8000b7a:	e011      	b.n	8000ba0 <binary_array_to_word+0x36>
        // Shift the current word to the left and add the current bit
        word |= (binary_array[i] << i);
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	005b      	lsls	r3, r3, #1
 8000b80:	687a      	ldr	r2, [r7, #4]
 8000b82:	4413      	add	r3, r2
 8000b84:	881b      	ldrh	r3, [r3, #0]
 8000b86:	461a      	mov	r2, r3
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8e:	b21a      	sxth	r2, r3
 8000b90:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b94:	4313      	orrs	r3, r2
 8000b96:	b21b      	sxth	r3, r3
 8000b98:	81fb      	strh	r3, [r7, #14]
    for (int i = 0; i < 16; i++) {
 8000b9a:	68bb      	ldr	r3, [r7, #8]
 8000b9c:	3301      	adds	r3, #1
 8000b9e:	60bb      	str	r3, [r7, #8]
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	2b0f      	cmp	r3, #15
 8000ba4:	ddea      	ble.n	8000b7c <binary_array_to_word+0x12>
    }

    return word;
 8000ba6:	89fb      	ldrh	r3, [r7, #14]
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	3714      	adds	r7, #20
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr

08000bb4 <cmdPec>:

    return word;  // Return the 10-bit word (stored in a 16-bit variable)
}


uint16_t cmdPec(uint16_t command) {
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	80fb      	strh	r3, [r7, #6]

    word_to_binary_array(init_PEC, converted_PEC_15);
 8000bbe:	4b49      	ldr	r3, [pc, #292]	@ (8000ce4 <cmdPec+0x130>)
 8000bc0:	881b      	ldrh	r3, [r3, #0]
 8000bc2:	4949      	ldr	r1, [pc, #292]	@ (8000ce8 <cmdPec+0x134>)
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f7ff ffad 	bl	8000b24 <word_to_binary_array>
    word_to_binary_array(command, converted_Cmd);
 8000bca:	88fb      	ldrh	r3, [r7, #6]
 8000bcc:	4947      	ldr	r1, [pc, #284]	@ (8000cec <cmdPec+0x138>)
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f7ff ffa8 	bl	8000b24 <word_to_binary_array>

	 for(int i = 15;i > -1;i--) {
 8000bd4:	230f      	movs	r3, #15
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	e078      	b.n	8000ccc <cmdPec+0x118>

	    in[0] = converted_Cmd[i] ^ converted_PEC_15[14];
 8000bda:	4a44      	ldr	r2, [pc, #272]	@ (8000cec <cmdPec+0x138>)
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000be2:	4b41      	ldr	r3, [pc, #260]	@ (8000ce8 <cmdPec+0x134>)
 8000be4:	8b9b      	ldrh	r3, [r3, #28]
 8000be6:	4053      	eors	r3, r2
 8000be8:	b29a      	uxth	r2, r3
 8000bea:	4b41      	ldr	r3, [pc, #260]	@ (8000cf0 <cmdPec+0x13c>)
 8000bec:	801a      	strh	r2, [r3, #0]
	    in[3] = in[0] ^ converted_PEC_15[2];
 8000bee:	4b40      	ldr	r3, [pc, #256]	@ (8000cf0 <cmdPec+0x13c>)
 8000bf0:	881a      	ldrh	r2, [r3, #0]
 8000bf2:	4b3d      	ldr	r3, [pc, #244]	@ (8000ce8 <cmdPec+0x134>)
 8000bf4:	889b      	ldrh	r3, [r3, #4]
 8000bf6:	4053      	eors	r3, r2
 8000bf8:	b29a      	uxth	r2, r3
 8000bfa:	4b3d      	ldr	r3, [pc, #244]	@ (8000cf0 <cmdPec+0x13c>)
 8000bfc:	80da      	strh	r2, [r3, #6]
	    in[4] = in[0] ^ converted_PEC_15[3];
 8000bfe:	4b3c      	ldr	r3, [pc, #240]	@ (8000cf0 <cmdPec+0x13c>)
 8000c00:	881a      	ldrh	r2, [r3, #0]
 8000c02:	4b39      	ldr	r3, [pc, #228]	@ (8000ce8 <cmdPec+0x134>)
 8000c04:	88db      	ldrh	r3, [r3, #6]
 8000c06:	4053      	eors	r3, r2
 8000c08:	b29a      	uxth	r2, r3
 8000c0a:	4b39      	ldr	r3, [pc, #228]	@ (8000cf0 <cmdPec+0x13c>)
 8000c0c:	811a      	strh	r2, [r3, #8]
	    in[7] = in[0] ^ converted_PEC_15[6];
 8000c0e:	4b38      	ldr	r3, [pc, #224]	@ (8000cf0 <cmdPec+0x13c>)
 8000c10:	881a      	ldrh	r2, [r3, #0]
 8000c12:	4b35      	ldr	r3, [pc, #212]	@ (8000ce8 <cmdPec+0x134>)
 8000c14:	899b      	ldrh	r3, [r3, #12]
 8000c16:	4053      	eors	r3, r2
 8000c18:	b29a      	uxth	r2, r3
 8000c1a:	4b35      	ldr	r3, [pc, #212]	@ (8000cf0 <cmdPec+0x13c>)
 8000c1c:	81da      	strh	r2, [r3, #14]
	    in[8] = in[0] ^ converted_PEC_15[7];
 8000c1e:	4b34      	ldr	r3, [pc, #208]	@ (8000cf0 <cmdPec+0x13c>)
 8000c20:	881a      	ldrh	r2, [r3, #0]
 8000c22:	4b31      	ldr	r3, [pc, #196]	@ (8000ce8 <cmdPec+0x134>)
 8000c24:	89db      	ldrh	r3, [r3, #14]
 8000c26:	4053      	eors	r3, r2
 8000c28:	b29a      	uxth	r2, r3
 8000c2a:	4b31      	ldr	r3, [pc, #196]	@ (8000cf0 <cmdPec+0x13c>)
 8000c2c:	821a      	strh	r2, [r3, #16]
	    in[10] = in[0] ^ converted_PEC_15[9];
 8000c2e:	4b30      	ldr	r3, [pc, #192]	@ (8000cf0 <cmdPec+0x13c>)
 8000c30:	881a      	ldrh	r2, [r3, #0]
 8000c32:	4b2d      	ldr	r3, [pc, #180]	@ (8000ce8 <cmdPec+0x134>)
 8000c34:	8a5b      	ldrh	r3, [r3, #18]
 8000c36:	4053      	eors	r3, r2
 8000c38:	b29a      	uxth	r2, r3
 8000c3a:	4b2d      	ldr	r3, [pc, #180]	@ (8000cf0 <cmdPec+0x13c>)
 8000c3c:	829a      	strh	r2, [r3, #20]
	    in[14] = in[0] ^ converted_PEC_15[13];
 8000c3e:	4b2c      	ldr	r3, [pc, #176]	@ (8000cf0 <cmdPec+0x13c>)
 8000c40:	881a      	ldrh	r2, [r3, #0]
 8000c42:	4b29      	ldr	r3, [pc, #164]	@ (8000ce8 <cmdPec+0x134>)
 8000c44:	8b5b      	ldrh	r3, [r3, #26]
 8000c46:	4053      	eors	r3, r2
 8000c48:	b29a      	uxth	r2, r3
 8000c4a:	4b29      	ldr	r3, [pc, #164]	@ (8000cf0 <cmdPec+0x13c>)
 8000c4c:	839a      	strh	r2, [r3, #28]

	    converted_PEC_15[14] = in[14];
 8000c4e:	4b28      	ldr	r3, [pc, #160]	@ (8000cf0 <cmdPec+0x13c>)
 8000c50:	8b9a      	ldrh	r2, [r3, #28]
 8000c52:	4b25      	ldr	r3, [pc, #148]	@ (8000ce8 <cmdPec+0x134>)
 8000c54:	839a      	strh	r2, [r3, #28]
	    converted_PEC_15[13] = converted_PEC_15[12];
 8000c56:	4b24      	ldr	r3, [pc, #144]	@ (8000ce8 <cmdPec+0x134>)
 8000c58:	8b1a      	ldrh	r2, [r3, #24]
 8000c5a:	4b23      	ldr	r3, [pc, #140]	@ (8000ce8 <cmdPec+0x134>)
 8000c5c:	835a      	strh	r2, [r3, #26]
	    converted_PEC_15[12] = converted_PEC_15[11];
 8000c5e:	4b22      	ldr	r3, [pc, #136]	@ (8000ce8 <cmdPec+0x134>)
 8000c60:	8ada      	ldrh	r2, [r3, #22]
 8000c62:	4b21      	ldr	r3, [pc, #132]	@ (8000ce8 <cmdPec+0x134>)
 8000c64:	831a      	strh	r2, [r3, #24]
	    converted_PEC_15[11] = converted_PEC_15[10];
 8000c66:	4b20      	ldr	r3, [pc, #128]	@ (8000ce8 <cmdPec+0x134>)
 8000c68:	8a9a      	ldrh	r2, [r3, #20]
 8000c6a:	4b1f      	ldr	r3, [pc, #124]	@ (8000ce8 <cmdPec+0x134>)
 8000c6c:	82da      	strh	r2, [r3, #22]
	    converted_PEC_15[10] = in[10];
 8000c6e:	4b20      	ldr	r3, [pc, #128]	@ (8000cf0 <cmdPec+0x13c>)
 8000c70:	8a9a      	ldrh	r2, [r3, #20]
 8000c72:	4b1d      	ldr	r3, [pc, #116]	@ (8000ce8 <cmdPec+0x134>)
 8000c74:	829a      	strh	r2, [r3, #20]
	    converted_PEC_15[9] = converted_PEC_15[8];
 8000c76:	4b1c      	ldr	r3, [pc, #112]	@ (8000ce8 <cmdPec+0x134>)
 8000c78:	8a1a      	ldrh	r2, [r3, #16]
 8000c7a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ce8 <cmdPec+0x134>)
 8000c7c:	825a      	strh	r2, [r3, #18]
	    converted_PEC_15[8] = in[8];
 8000c7e:	4b1c      	ldr	r3, [pc, #112]	@ (8000cf0 <cmdPec+0x13c>)
 8000c80:	8a1a      	ldrh	r2, [r3, #16]
 8000c82:	4b19      	ldr	r3, [pc, #100]	@ (8000ce8 <cmdPec+0x134>)
 8000c84:	821a      	strh	r2, [r3, #16]
	    converted_PEC_15[7] = in[7];
 8000c86:	4b1a      	ldr	r3, [pc, #104]	@ (8000cf0 <cmdPec+0x13c>)
 8000c88:	89da      	ldrh	r2, [r3, #14]
 8000c8a:	4b17      	ldr	r3, [pc, #92]	@ (8000ce8 <cmdPec+0x134>)
 8000c8c:	81da      	strh	r2, [r3, #14]
	    converted_PEC_15[6] = converted_PEC_15[5];
 8000c8e:	4b16      	ldr	r3, [pc, #88]	@ (8000ce8 <cmdPec+0x134>)
 8000c90:	895a      	ldrh	r2, [r3, #10]
 8000c92:	4b15      	ldr	r3, [pc, #84]	@ (8000ce8 <cmdPec+0x134>)
 8000c94:	819a      	strh	r2, [r3, #12]
	    converted_PEC_15[5] = converted_PEC_15[4];
 8000c96:	4b14      	ldr	r3, [pc, #80]	@ (8000ce8 <cmdPec+0x134>)
 8000c98:	891a      	ldrh	r2, [r3, #8]
 8000c9a:	4b13      	ldr	r3, [pc, #76]	@ (8000ce8 <cmdPec+0x134>)
 8000c9c:	815a      	strh	r2, [r3, #10]
	    converted_PEC_15[4] = in[4];
 8000c9e:	4b14      	ldr	r3, [pc, #80]	@ (8000cf0 <cmdPec+0x13c>)
 8000ca0:	891a      	ldrh	r2, [r3, #8]
 8000ca2:	4b11      	ldr	r3, [pc, #68]	@ (8000ce8 <cmdPec+0x134>)
 8000ca4:	811a      	strh	r2, [r3, #8]
	    converted_PEC_15[3] = in[3];
 8000ca6:	4b12      	ldr	r3, [pc, #72]	@ (8000cf0 <cmdPec+0x13c>)
 8000ca8:	88da      	ldrh	r2, [r3, #6]
 8000caa:	4b0f      	ldr	r3, [pc, #60]	@ (8000ce8 <cmdPec+0x134>)
 8000cac:	80da      	strh	r2, [r3, #6]
	    converted_PEC_15[2] = converted_PEC_15[1];
 8000cae:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce8 <cmdPec+0x134>)
 8000cb0:	885a      	ldrh	r2, [r3, #2]
 8000cb2:	4b0d      	ldr	r3, [pc, #52]	@ (8000ce8 <cmdPec+0x134>)
 8000cb4:	809a      	strh	r2, [r3, #4]
	    converted_PEC_15[1] = converted_PEC_15[0];
 8000cb6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce8 <cmdPec+0x134>)
 8000cb8:	881a      	ldrh	r2, [r3, #0]
 8000cba:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce8 <cmdPec+0x134>)
 8000cbc:	805a      	strh	r2, [r3, #2]
	    converted_PEC_15[0] = in[0];
 8000cbe:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf0 <cmdPec+0x13c>)
 8000cc0:	881a      	ldrh	r2, [r3, #0]
 8000cc2:	4b09      	ldr	r3, [pc, #36]	@ (8000ce8 <cmdPec+0x134>)
 8000cc4:	801a      	strh	r2, [r3, #0]
	 for(int i = 15;i > -1;i--) {
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	3b01      	subs	r3, #1
 8000cca:	60fb      	str	r3, [r7, #12]
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	da83      	bge.n	8000bda <cmdPec+0x26>

	    }

	 return binary_array_to_word(converted_PEC_15);
 8000cd2:	4805      	ldr	r0, [pc, #20]	@ (8000ce8 <cmdPec+0x134>)
 8000cd4:	f7ff ff49 	bl	8000b6a <binary_array_to_word>
 8000cd8:	4603      	mov	r3, r0

}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3710      	adds	r7, #16
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	20000000 	.word	0x20000000
 8000ce8:	20000084 	.word	0x20000084
 8000cec:	200000e4 	.word	0x200000e4
 8000cf0:	200000c4 	.word	0x200000c4

08000cf4 <dataPec>:


uint16_t dataPec(uint8_t bytes, uint8_t *data) {
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	6039      	str	r1, [r7, #0]
 8000cfe:	71fb      	strb	r3, [r7, #7]




    byte_array_to_bit_array10_data_PEC(data, 6, binary_array,expanded_array);
 8000d00:	4b37      	ldr	r3, [pc, #220]	@ (8000de0 <dataPec+0xec>)
 8000d02:	4a38      	ldr	r2, [pc, #224]	@ (8000de4 <dataPec+0xf0>)
 8000d04:	2106      	movs	r1, #6
 8000d06:	6838      	ldr	r0, [r7, #0]
 8000d08:	f000 f980 	bl	800100c <byte_array_to_bit_array10_data_PEC>
    word_to_binary_array10_data_PEC(init_PEC,converted_PEC_10);
 8000d0c:	4b36      	ldr	r3, [pc, #216]	@ (8000de8 <dataPec+0xf4>)
 8000d0e:	881b      	ldrh	r3, [r3, #0]
 8000d10:	4936      	ldr	r1, [pc, #216]	@ (8000dec <dataPec+0xf8>)
 8000d12:	4618      	mov	r0, r3
 8000d14:	f000 f9ce 	bl	80010b4 <word_to_binary_array10_data_PEC>


    for (int i = 53; i > -1; i--) {
 8000d18:	2335      	movs	r3, #53	@ 0x35
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	e055      	b.n	8000dca <dataPec+0xd6>

        in[0] = expanded_array[i] ^ converted_PEC_10[9];
 8000d1e:	4a30      	ldr	r2, [pc, #192]	@ (8000de0 <dataPec+0xec>)
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	4413      	add	r3, r2
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	461a      	mov	r2, r3
 8000d28:	4b30      	ldr	r3, [pc, #192]	@ (8000dec <dataPec+0xf8>)
 8000d2a:	8a5b      	ldrh	r3, [r3, #18]
 8000d2c:	4053      	eors	r3, r2
 8000d2e:	b29a      	uxth	r2, r3
 8000d30:	4b2f      	ldr	r3, [pc, #188]	@ (8000df0 <dataPec+0xfc>)
 8000d32:	801a      	strh	r2, [r3, #0]
        in[1] = in[0] ^ converted_PEC_10[0];
 8000d34:	4b2e      	ldr	r3, [pc, #184]	@ (8000df0 <dataPec+0xfc>)
 8000d36:	881a      	ldrh	r2, [r3, #0]
 8000d38:	4b2c      	ldr	r3, [pc, #176]	@ (8000dec <dataPec+0xf8>)
 8000d3a:	881b      	ldrh	r3, [r3, #0]
 8000d3c:	4053      	eors	r3, r2
 8000d3e:	b29a      	uxth	r2, r3
 8000d40:	4b2b      	ldr	r3, [pc, #172]	@ (8000df0 <dataPec+0xfc>)
 8000d42:	805a      	strh	r2, [r3, #2]
        in[2] = in[0] ^ converted_PEC_10[1];
 8000d44:	4b2a      	ldr	r3, [pc, #168]	@ (8000df0 <dataPec+0xfc>)
 8000d46:	881a      	ldrh	r2, [r3, #0]
 8000d48:	4b28      	ldr	r3, [pc, #160]	@ (8000dec <dataPec+0xf8>)
 8000d4a:	885b      	ldrh	r3, [r3, #2]
 8000d4c:	4053      	eors	r3, r2
 8000d4e:	b29a      	uxth	r2, r3
 8000d50:	4b27      	ldr	r3, [pc, #156]	@ (8000df0 <dataPec+0xfc>)
 8000d52:	809a      	strh	r2, [r3, #4]
        in[3] = in[0] ^ converted_PEC_10[2];
 8000d54:	4b26      	ldr	r3, [pc, #152]	@ (8000df0 <dataPec+0xfc>)
 8000d56:	881a      	ldrh	r2, [r3, #0]
 8000d58:	4b24      	ldr	r3, [pc, #144]	@ (8000dec <dataPec+0xf8>)
 8000d5a:	889b      	ldrh	r3, [r3, #4]
 8000d5c:	4053      	eors	r3, r2
 8000d5e:	b29a      	uxth	r2, r3
 8000d60:	4b23      	ldr	r3, [pc, #140]	@ (8000df0 <dataPec+0xfc>)
 8000d62:	80da      	strh	r2, [r3, #6]
        in[7] = in[0] ^ converted_PEC_10[6];
 8000d64:	4b22      	ldr	r3, [pc, #136]	@ (8000df0 <dataPec+0xfc>)
 8000d66:	881a      	ldrh	r2, [r3, #0]
 8000d68:	4b20      	ldr	r3, [pc, #128]	@ (8000dec <dataPec+0xf8>)
 8000d6a:	899b      	ldrh	r3, [r3, #12]
 8000d6c:	4053      	eors	r3, r2
 8000d6e:	b29a      	uxth	r2, r3
 8000d70:	4b1f      	ldr	r3, [pc, #124]	@ (8000df0 <dataPec+0xfc>)
 8000d72:	81da      	strh	r2, [r3, #14]

        converted_PEC_10[9] = converted_PEC_10[8];
 8000d74:	4b1d      	ldr	r3, [pc, #116]	@ (8000dec <dataPec+0xf8>)
 8000d76:	8a1a      	ldrh	r2, [r3, #16]
 8000d78:	4b1c      	ldr	r3, [pc, #112]	@ (8000dec <dataPec+0xf8>)
 8000d7a:	825a      	strh	r2, [r3, #18]
        converted_PEC_10[8] = converted_PEC_10[7];
 8000d7c:	4b1b      	ldr	r3, [pc, #108]	@ (8000dec <dataPec+0xf8>)
 8000d7e:	89da      	ldrh	r2, [r3, #14]
 8000d80:	4b1a      	ldr	r3, [pc, #104]	@ (8000dec <dataPec+0xf8>)
 8000d82:	821a      	strh	r2, [r3, #16]
        converted_PEC_10[7] = in[7];
 8000d84:	4b1a      	ldr	r3, [pc, #104]	@ (8000df0 <dataPec+0xfc>)
 8000d86:	89da      	ldrh	r2, [r3, #14]
 8000d88:	4b18      	ldr	r3, [pc, #96]	@ (8000dec <dataPec+0xf8>)
 8000d8a:	81da      	strh	r2, [r3, #14]
        converted_PEC_10[6] = converted_PEC_10[5];
 8000d8c:	4b17      	ldr	r3, [pc, #92]	@ (8000dec <dataPec+0xf8>)
 8000d8e:	895a      	ldrh	r2, [r3, #10]
 8000d90:	4b16      	ldr	r3, [pc, #88]	@ (8000dec <dataPec+0xf8>)
 8000d92:	819a      	strh	r2, [r3, #12]
        converted_PEC_10[5] = converted_PEC_10[4];
 8000d94:	4b15      	ldr	r3, [pc, #84]	@ (8000dec <dataPec+0xf8>)
 8000d96:	891a      	ldrh	r2, [r3, #8]
 8000d98:	4b14      	ldr	r3, [pc, #80]	@ (8000dec <dataPec+0xf8>)
 8000d9a:	815a      	strh	r2, [r3, #10]
        converted_PEC_10[4] = converted_PEC_10[3];
 8000d9c:	4b13      	ldr	r3, [pc, #76]	@ (8000dec <dataPec+0xf8>)
 8000d9e:	88da      	ldrh	r2, [r3, #6]
 8000da0:	4b12      	ldr	r3, [pc, #72]	@ (8000dec <dataPec+0xf8>)
 8000da2:	811a      	strh	r2, [r3, #8]
        converted_PEC_10[3] = in[3];
 8000da4:	4b12      	ldr	r3, [pc, #72]	@ (8000df0 <dataPec+0xfc>)
 8000da6:	88da      	ldrh	r2, [r3, #6]
 8000da8:	4b10      	ldr	r3, [pc, #64]	@ (8000dec <dataPec+0xf8>)
 8000daa:	80da      	strh	r2, [r3, #6]
        converted_PEC_10[2] = in[2];
 8000dac:	4b10      	ldr	r3, [pc, #64]	@ (8000df0 <dataPec+0xfc>)
 8000dae:	889a      	ldrh	r2, [r3, #4]
 8000db0:	4b0e      	ldr	r3, [pc, #56]	@ (8000dec <dataPec+0xf8>)
 8000db2:	809a      	strh	r2, [r3, #4]
        converted_PEC_10[1] = in[1];
 8000db4:	4b0e      	ldr	r3, [pc, #56]	@ (8000df0 <dataPec+0xfc>)
 8000db6:	885a      	ldrh	r2, [r3, #2]
 8000db8:	4b0c      	ldr	r3, [pc, #48]	@ (8000dec <dataPec+0xf8>)
 8000dba:	805a      	strh	r2, [r3, #2]
        converted_PEC_10[0] = in[0];
 8000dbc:	4b0c      	ldr	r3, [pc, #48]	@ (8000df0 <dataPec+0xfc>)
 8000dbe:	881a      	ldrh	r2, [r3, #0]
 8000dc0:	4b0a      	ldr	r3, [pc, #40]	@ (8000dec <dataPec+0xf8>)
 8000dc2:	801a      	strh	r2, [r3, #0]
    for (int i = 53; i > -1; i--) {
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	3b01      	subs	r3, #1
 8000dc8:	60fb      	str	r3, [r7, #12]
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	daa6      	bge.n	8000d1e <dataPec+0x2a>


    }


    return binary_array_to_word(converted_PEC_10);
 8000dd0:	4806      	ldr	r0, [pc, #24]	@ (8000dec <dataPec+0xf8>)
 8000dd2:	f7ff feca 	bl	8000b6a <binary_array_to_word>
 8000dd6:	4603      	mov	r3, r0

}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3710      	adds	r7, #16
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	200001fc 	.word	0x200001fc
 8000de4:	200001cc 	.word	0x200001cc
 8000de8:	20000000 	.word	0x20000000
 8000dec:	200000a4 	.word	0x200000a4
 8000df0:	200000c4 	.word	0x200000c4

08000df4 <construct_spi_write_frame>:
/*
 * instruction - 0 => COMMAND SPI FRAME
 * instruction - 1 => WRITE DATA SPI FRAME
 * instruction - 2 => READ DATA SPI FRAME
 * */
void construct_spi_write_frame(uint16_t command, uint8_t *spi_frame, uint16_t instruction, uint8_t *data, uint8_t data_size) {
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b088      	sub	sp, #32
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	60b9      	str	r1, [r7, #8]
 8000dfc:	607b      	str	r3, [r7, #4]
 8000dfe:	4603      	mov	r3, r0
 8000e00:	81fb      	strh	r3, [r7, #14]
 8000e02:	4613      	mov	r3, r2
 8000e04:	81bb      	strh	r3, [r7, #12]
    // Construct the 32-bit frame
    uint32_t frame = 0;
 8000e06:	2300      	movs	r3, #0
 8000e08:	617b      	str	r3, [r7, #20]
    uint16_t pec = cmdPec(command);  // Calculate the 15-bit PEC
 8000e0a:	89fb      	ldrh	r3, [r7, #14]
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff fed1 	bl	8000bb4 <cmdPec>
 8000e12:	4603      	mov	r3, r0
 8000e14:	827b      	strh	r3, [r7, #18]
    uint8_t frame_counter = 0;  // Start counting from 0 for the frame
 8000e16:	2300      	movs	r3, #0
 8000e18:	77fb      	strb	r3, [r7, #31]
    // 5 bits of 00000 (shifted left 27 bits)
    // 11 bits of command (shifted left 16 bits)
    // 15 bits of PEC (shifted left 1 bit)
    // 1 bit of 0
    frame |= (0x00 << 27);               // 5-bit prefix 00000
    frame |= ((command & 0x7FF) << 16);  // 11-bit command
 8000e1a:	89fb      	ldrh	r3, [r7, #14]
 8000e1c:	041a      	lsls	r2, r3, #16
 8000e1e:	4b40      	ldr	r3, [pc, #256]	@ (8000f20 <construct_spi_write_frame+0x12c>)
 8000e20:	4013      	ands	r3, r2
 8000e22:	697a      	ldr	r2, [r7, #20]
 8000e24:	4313      	orrs	r3, r2
 8000e26:	617b      	str	r3, [r7, #20]
    frame |= ((pec & 0x7FFF) << 1);      // 15-bit PEC
 8000e28:	8a7b      	ldrh	r3, [r7, #18]
 8000e2a:	005b      	lsls	r3, r3, #1
 8000e2c:	b29b      	uxth	r3, r3
 8000e2e:	697a      	ldr	r2, [r7, #20]
 8000e30:	4313      	orrs	r3, r2
 8000e32:	617b      	str	r3, [r7, #20]
    frame |= 0x00;                       // 1-bit suffix 0

    // Break the 32-bit frame into 4 bytes to send via SPI
    spi_frame[frame_counter++] = (frame >> 24) & 0xFF;
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	0e1a      	lsrs	r2, r3, #24
 8000e38:	7ffb      	ldrb	r3, [r7, #31]
 8000e3a:	1c59      	adds	r1, r3, #1
 8000e3c:	77f9      	strb	r1, [r7, #31]
 8000e3e:	4619      	mov	r1, r3
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	440b      	add	r3, r1
 8000e44:	b2d2      	uxtb	r2, r2
 8000e46:	701a      	strb	r2, [r3, #0]
    spi_frame[frame_counter++] = (frame >> 16) & 0xFF;
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	0c1a      	lsrs	r2, r3, #16
 8000e4c:	7ffb      	ldrb	r3, [r7, #31]
 8000e4e:	1c59      	adds	r1, r3, #1
 8000e50:	77f9      	strb	r1, [r7, #31]
 8000e52:	4619      	mov	r1, r3
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	440b      	add	r3, r1
 8000e58:	b2d2      	uxtb	r2, r2
 8000e5a:	701a      	strb	r2, [r3, #0]
    spi_frame[frame_counter++] = (frame >> 8) & 0xFF;
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	0a1a      	lsrs	r2, r3, #8
 8000e60:	7ffb      	ldrb	r3, [r7, #31]
 8000e62:	1c59      	adds	r1, r3, #1
 8000e64:	77f9      	strb	r1, [r7, #31]
 8000e66:	4619      	mov	r1, r3
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	440b      	add	r3, r1
 8000e6c:	b2d2      	uxtb	r2, r2
 8000e6e:	701a      	strb	r2, [r3, #0]
    spi_frame[frame_counter++] = (frame) & 0xFF;
 8000e70:	7ffb      	ldrb	r3, [r7, #31]
 8000e72:	1c5a      	adds	r2, r3, #1
 8000e74:	77fa      	strb	r2, [r7, #31]
 8000e76:	461a      	mov	r2, r3
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	4413      	add	r3, r2
 8000e7c:	697a      	ldr	r2, [r7, #20]
 8000e7e:	b2d2      	uxtb	r2, r2
 8000e80:	701a      	strb	r2, [r3, #0]

    // If it's just a command, return here
    if (instruction == 0) {
 8000e82:	89bb      	ldrh	r3, [r7, #12]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d046      	beq.n	8000f16 <construct_spi_write_frame+0x122>
        return;
    }

    // Otherwise, add the data for a write instruction
    if (instruction == 1 && data != NULL && data_size > 0) {
 8000e88:	89bb      	ldrh	r3, [r7, #12]
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	d139      	bne.n	8000f02 <construct_spi_write_frame+0x10e>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d036      	beq.n	8000f02 <construct_spi_write_frame+0x10e>
 8000e94:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d032      	beq.n	8000f02 <construct_spi_write_frame+0x10e>
        // Add the data bytes
        for (int i = 0; i < data_size; i++) {
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	61bb      	str	r3, [r7, #24]
 8000ea0:	e00d      	b.n	8000ebe <construct_spi_write_frame+0xca>
            spi_frame[frame_counter++] = data[i];
 8000ea2:	69bb      	ldr	r3, [r7, #24]
 8000ea4:	687a      	ldr	r2, [r7, #4]
 8000ea6:	441a      	add	r2, r3
 8000ea8:	7ffb      	ldrb	r3, [r7, #31]
 8000eaa:	1c59      	adds	r1, r3, #1
 8000eac:	77f9      	strb	r1, [r7, #31]
 8000eae:	4619      	mov	r1, r3
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	440b      	add	r3, r1
 8000eb4:	7812      	ldrb	r2, [r2, #0]
 8000eb6:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < data_size; i++) {
 8000eb8:	69bb      	ldr	r3, [r7, #24]
 8000eba:	3301      	adds	r3, #1
 8000ebc:	61bb      	str	r3, [r7, #24]
 8000ebe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000ec2:	69ba      	ldr	r2, [r7, #24]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	dbec      	blt.n	8000ea2 <construct_spi_write_frame+0xae>
        }

        // Calculate data PEC (implement your PEC calculation for data)
        //uint8_t data_PEC = pec10_calc(data,1);  // Replace with actual data PEC calculation
        uint16_t dPEC = dataPec(data_size, data);
 8000ec8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000ecc:	6879      	ldr	r1, [r7, #4]
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff ff10 	bl	8000cf4 <dataPec>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	823b      	strh	r3, [r7, #16]
        // Add the data PEC to the frame (10-bit PEC in 2 bytes)
        spi_frame[frame_counter++] = (dPEC >> 8) & 0xFF;  // High byte of PEC
 8000ed8:	8a3b      	ldrh	r3, [r7, #16]
 8000eda:	0a1b      	lsrs	r3, r3, #8
 8000edc:	b29a      	uxth	r2, r3
 8000ede:	7ffb      	ldrb	r3, [r7, #31]
 8000ee0:	1c59      	adds	r1, r3, #1
 8000ee2:	77f9      	strb	r1, [r7, #31]
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	68bb      	ldr	r3, [r7, #8]
 8000ee8:	440b      	add	r3, r1
 8000eea:	b2d2      	uxtb	r2, r2
 8000eec:	701a      	strb	r2, [r3, #0]
        spi_frame[frame_counter++] = dPEC & 0xFF;         // Low byte of PEC
 8000eee:	7ffb      	ldrb	r3, [r7, #31]
 8000ef0:	1c5a      	adds	r2, r3, #1
 8000ef2:	77fa      	strb	r2, [r7, #31]
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	4413      	add	r3, r2
 8000efa:	8a3a      	ldrh	r2, [r7, #16]
 8000efc:	b2d2      	uxtb	r2, r2
 8000efe:	701a      	strb	r2, [r3, #0]
    if (instruction == 1 && data != NULL && data_size > 0) {
 8000f00:	e00a      	b.n	8000f18 <construct_spi_write_frame+0x124>
    }

    else if (instruction == 2 && data == NULL && data_size == 0) {
 8000f02:	89bb      	ldrh	r3, [r7, #12]
 8000f04:	2b02      	cmp	r3, #2
 8000f06:	d107      	bne.n	8000f18 <construct_spi_write_frame+0x124>
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d104      	bne.n	8000f18 <construct_spi_write_frame+0x124>
 8000f0e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	e000      	b.n	8000f18 <construct_spi_write_frame+0x124>
        return;
 8000f16:	bf00      	nop
    	return;



    }
}
 8000f18:	3720      	adds	r7, #32
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	07ff0000 	.word	0x07ff0000

08000f24 <BMS_command_SPI>:
		HAL_SPI_Transmit(&hspi2, spi_frame, 4, 10);
		HAL_SPI_Receive(&hspi2, read_frame, 8, 10);
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3, GPIO_PIN_SET);
	}

	void BMS_command_SPI(uint16_t command) {
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af02      	add	r7, sp, #8
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	80fb      	strh	r3, [r7, #6]
		construct_spi_write_frame(command, spi_frame, 0, NULL, 0);
 8000f2e:	88f8      	ldrh	r0, [r7, #6]
 8000f30:	2300      	movs	r3, #0
 8000f32:	9300      	str	r3, [sp, #0]
 8000f34:	2300      	movs	r3, #0
 8000f36:	2200      	movs	r2, #0
 8000f38:	490b      	ldr	r1, [pc, #44]	@ (8000f68 <BMS_command_SPI+0x44>)
 8000f3a:	f7ff ff5b 	bl	8000df4 <construct_spi_write_frame>
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3, GPIO_PIN_RESET);
 8000f3e:	2200      	movs	r2, #0
 8000f40:	2108      	movs	r1, #8
 8000f42:	480a      	ldr	r0, [pc, #40]	@ (8000f6c <BMS_command_SPI+0x48>)
 8000f44:	f000 fe90 	bl	8001c68 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, spi_frame, 4, 10);
 8000f48:	230a      	movs	r3, #10
 8000f4a:	2204      	movs	r2, #4
 8000f4c:	4906      	ldr	r1, [pc, #24]	@ (8000f68 <BMS_command_SPI+0x44>)
 8000f4e:	4808      	ldr	r0, [pc, #32]	@ (8000f70 <BMS_command_SPI+0x4c>)
 8000f50:	f001 fb91 	bl	8002676 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3, GPIO_PIN_SET);
 8000f54:	2201      	movs	r2, #1
 8000f56:	2108      	movs	r1, #8
 8000f58:	4804      	ldr	r0, [pc, #16]	@ (8000f6c <BMS_command_SPI+0x48>)
 8000f5a:	f000 fe85 	bl	8001c68 <HAL_GPIO_WritePin>

	}
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	20000144 	.word	0x20000144
 8000f6c:	40021000 	.word	0x40021000
 8000f70:	2000002c 	.word	0x2000002c

08000f74 <BMS_read_all_SPI>:
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3, GPIO_PIN_RESET);
		HAL_SPI_Transmit(&hspi2, spi_frame, data_size + 4 + 2, 10);
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3, GPIO_PIN_SET);
	}

	void BMS_read_all_SPI(uint16_t command, uint8_t *spi_frame, uint8_t *read_frame) {
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b086      	sub	sp, #24
 8000f78:	af02      	add	r7, sp, #8
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	60b9      	str	r1, [r7, #8]
 8000f7e:	607a      	str	r2, [r7, #4]
 8000f80:	81fb      	strh	r3, [r7, #14]
			construct_spi_write_frame(command, spi_frame, 2, NULL, 0);
 8000f82:	89f8      	ldrh	r0, [r7, #14]
 8000f84:	2300      	movs	r3, #0
 8000f86:	9300      	str	r3, [sp, #0]
 8000f88:	2300      	movs	r3, #0
 8000f8a:	2202      	movs	r2, #2
 8000f8c:	68b9      	ldr	r1, [r7, #8]
 8000f8e:	f7ff ff31 	bl	8000df4 <construct_spi_write_frame>
			HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3, GPIO_PIN_RESET);
 8000f92:	2200      	movs	r2, #0
 8000f94:	2108      	movs	r1, #8
 8000f96:	480c      	ldr	r0, [pc, #48]	@ (8000fc8 <BMS_read_all_SPI+0x54>)
 8000f98:	f000 fe66 	bl	8001c68 <HAL_GPIO_WritePin>
			HAL_SPI_Transmit(&hspi2, spi_frame, 4, 10);
 8000f9c:	230a      	movs	r3, #10
 8000f9e:	2204      	movs	r2, #4
 8000fa0:	68b9      	ldr	r1, [r7, #8]
 8000fa2:	480a      	ldr	r0, [pc, #40]	@ (8000fcc <BMS_read_all_SPI+0x58>)
 8000fa4:	f001 fb67 	bl	8002676 <HAL_SPI_Transmit>
			HAL_SPI_Receive(&hspi2, read_frame, 34, 10);
 8000fa8:	230a      	movs	r3, #10
 8000faa:	2222      	movs	r2, #34	@ 0x22
 8000fac:	6879      	ldr	r1, [r7, #4]
 8000fae:	4807      	ldr	r0, [pc, #28]	@ (8000fcc <BMS_read_all_SPI+0x58>)
 8000fb0:	f001 fca5 	bl	80028fe <HAL_SPI_Receive>
			HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3, GPIO_PIN_SET);
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	2108      	movs	r1, #8
 8000fb8:	4803      	ldr	r0, [pc, #12]	@ (8000fc8 <BMS_read_all_SPI+0x54>)
 8000fba:	f000 fe55 	bl	8001c68 <HAL_GPIO_WritePin>
		}
 8000fbe:	bf00      	nop
 8000fc0:	3710      	adds	r7, #16
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40021000 	.word	0x40021000
 8000fcc:	2000002c 	.word	0x2000002c

08000fd0 <wakeup_dummy>:


	void wakeup_dummy() {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
	    HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3, GPIO_PIN_RESET);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	2108      	movs	r1, #8
 8000fd8:	4809      	ldr	r0, [pc, #36]	@ (8001000 <wakeup_dummy+0x30>)
 8000fda:	f000 fe45 	bl	8001c68 <HAL_GPIO_WritePin>
	    HAL_SPI_Transmit(&hspi2, dummy_wakeup, 120, 10);
 8000fde:	230a      	movs	r3, #10
 8000fe0:	2278      	movs	r2, #120	@ 0x78
 8000fe2:	4908      	ldr	r1, [pc, #32]	@ (8001004 <wakeup_dummy+0x34>)
 8000fe4:	4808      	ldr	r0, [pc, #32]	@ (8001008 <wakeup_dummy+0x38>)
 8000fe6:	f001 fb46 	bl	8002676 <HAL_SPI_Transmit>
	    HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3, GPIO_PIN_SET); //Send a dummy byte to trigger IC
 8000fea:	2201      	movs	r2, #1
 8000fec:	2108      	movs	r1, #8
 8000fee:	4804      	ldr	r0, [pc, #16]	@ (8001000 <wakeup_dummy+0x30>)
 8000ff0:	f000 fe3a 	bl	8001c68 <HAL_GPIO_WritePin>
	    HAL_Delay(1.5);
 8000ff4:	2001      	movs	r0, #1
 8000ff6:	f000 fb91 	bl	800171c <HAL_Delay>
	}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40021000 	.word	0x40021000
 8001004:	20000154 	.word	0x20000154
 8001008:	2000002c 	.word	0x2000002c

0800100c <byte_array_to_bit_array10_data_PEC>:

	}


	// Function to convert an array of bytes into an array of bits
	void byte_array_to_bit_array10_data_PEC(uint8_t *data, int data_len, uint8_t *bit_array, uint8_t *expanded_array) {
 800100c:	b480      	push	{r7}
 800100e:	b089      	sub	sp, #36	@ 0x24
 8001010:	af00      	add	r7, sp, #0
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	607a      	str	r2, [r7, #4]
 8001018:	603b      	str	r3, [r7, #0]
	    int j = -1;
 800101a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800101e:	61fb      	str	r3, [r7, #28]
	    // Iterate through each byte in the data array
	    for (int i = data_len; i > 0; i--) {
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	61bb      	str	r3, [r7, #24]
 8001024:	e02a      	b.n	800107c <byte_array_to_bit_array10_data_PEC+0x70>
	        // Extract each bit from the current byte and store it in the bit array
	        j++;
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	3301      	adds	r3, #1
 800102a:	61fb      	str	r3, [r7, #28]
	        for ( int bit = 0; bit < 8; bit++) {
 800102c:	2300      	movs	r3, #0
 800102e:	617b      	str	r3, [r7, #20]
 8001030:	e01e      	b.n	8001070 <byte_array_to_bit_array10_data_PEC+0x64>
	            bit_array[j*8+bit] = (data[i-1] & 1);
 8001032:	69bb      	ldr	r3, [r7, #24]
 8001034:	3b01      	subs	r3, #1
 8001036:	68fa      	ldr	r2, [r7, #12]
 8001038:	4413      	add	r3, r2
 800103a:	781a      	ldrb	r2, [r3, #0]
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	00d9      	lsls	r1, r3, #3
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	440b      	add	r3, r1
 8001044:	4619      	mov	r1, r3
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	440b      	add	r3, r1
 800104a:	f002 0201 	and.w	r2, r2, #1
 800104e:	b2d2      	uxtb	r2, r2
 8001050:	701a      	strb	r2, [r3, #0]
	            data[i-1] = data[i-1] >> 1;
 8001052:	69bb      	ldr	r3, [r7, #24]
 8001054:	3b01      	subs	r3, #1
 8001056:	68fa      	ldr	r2, [r7, #12]
 8001058:	4413      	add	r3, r2
 800105a:	781a      	ldrb	r2, [r3, #0]
 800105c:	69bb      	ldr	r3, [r7, #24]
 800105e:	3b01      	subs	r3, #1
 8001060:	68f9      	ldr	r1, [r7, #12]
 8001062:	440b      	add	r3, r1
 8001064:	0852      	lsrs	r2, r2, #1
 8001066:	b2d2      	uxtb	r2, r2
 8001068:	701a      	strb	r2, [r3, #0]
	        for ( int bit = 0; bit < 8; bit++) {
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	3301      	adds	r3, #1
 800106e:	617b      	str	r3, [r7, #20]
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	2b07      	cmp	r3, #7
 8001074:	dddd      	ble.n	8001032 <byte_array_to_bit_array10_data_PEC+0x26>
	    for (int i = data_len; i > 0; i--) {
 8001076:	69bb      	ldr	r3, [r7, #24]
 8001078:	3b01      	subs	r3, #1
 800107a:	61bb      	str	r3, [r7, #24]
 800107c:	69bb      	ldr	r3, [r7, #24]
 800107e:	2b00      	cmp	r3, #0
 8001080:	dcd1      	bgt.n	8001026 <byte_array_to_bit_array10_data_PEC+0x1a>

	        }


	    }
	    for (int i = 6; i < 54; i++) {
 8001082:	2306      	movs	r3, #6
 8001084:	613b      	str	r3, [r7, #16]
 8001086:	e00b      	b.n	80010a0 <byte_array_to_bit_array10_data_PEC+0x94>
	        expanded_array[i] = bit_array[i-6];
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	3b06      	subs	r3, #6
 800108c:	687a      	ldr	r2, [r7, #4]
 800108e:	441a      	add	r2, r3
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	6839      	ldr	r1, [r7, #0]
 8001094:	440b      	add	r3, r1
 8001096:	7812      	ldrb	r2, [r2, #0]
 8001098:	701a      	strb	r2, [r3, #0]
	    for (int i = 6; i < 54; i++) {
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	3301      	adds	r3, #1
 800109e:	613b      	str	r3, [r7, #16]
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	2b35      	cmp	r3, #53	@ 0x35
 80010a4:	ddf0      	ble.n	8001088 <byte_array_to_bit_array10_data_PEC+0x7c>
	    }

	}
 80010a6:	bf00      	nop
 80010a8:	bf00      	nop
 80010aa:	3724      	adds	r7, #36	@ 0x24
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr

080010b4 <word_to_binary_array10_data_PEC>:

	void word_to_binary_array10_data_PEC(uint16_t word, uint16_t binary_array[16]) {
 80010b4:	b480      	push	{r7}
 80010b6:	b085      	sub	sp, #20
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	6039      	str	r1, [r7, #0]
 80010be:	80fb      	strh	r3, [r7, #6]
	    // Loop through each bit in the 16-bit word, starting from LSB
	    for (int i = 0; i < 10; i++) {
 80010c0:	2300      	movs	r3, #0
 80010c2:	60fb      	str	r3, [r7, #12]
 80010c4:	e00f      	b.n	80010e6 <word_to_binary_array10_data_PEC+0x32>
	        // Extract the i-th bit and store it in the array
	        binary_array[i] = (word >> i) & 1;
 80010c6:	88fa      	ldrh	r2, [r7, #6]
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	fa42 f303 	asr.w	r3, r2, r3
 80010ce:	b29a      	uxth	r2, r3
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	6839      	ldr	r1, [r7, #0]
 80010d6:	440b      	add	r3, r1
 80010d8:	f002 0201 	and.w	r2, r2, #1
 80010dc:	b292      	uxth	r2, r2
 80010de:	801a      	strh	r2, [r3, #0]
	    for (int i = 0; i < 10; i++) {
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	3301      	adds	r3, #1
 80010e4:	60fb      	str	r3, [r7, #12]
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	2b09      	cmp	r3, #9
 80010ea:	ddec      	ble.n	80010c6 <word_to_binary_array10_data_PEC+0x12>
	    }
	}
 80010ec:	bf00      	nop
 80010ee:	bf00      	nop
 80010f0:	3714      	adds	r7, #20
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	0000      	movs	r0, r0
 80010fc:	0000      	movs	r0, r0
	...

08001100 <monitor_cells>:


	void monitor_cells(void) {
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0

		for (int i = 0, j = 0; i < 32; i += 2, j++) {
 8001106:	2300      	movs	r3, #0
 8001108:	607b      	str	r3, [r7, #4]
 800110a:	2300      	movs	r3, #0
 800110c:	603b      	str	r3, [r7, #0]
 800110e:	e041      	b.n	8001194 <monitor_cells+0x94>
		    cells_voltage[j] = (data_read[i + 1] << 8) | (data_read[i]);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	3301      	adds	r3, #1
 8001114:	4a26      	ldr	r2, [pc, #152]	@ (80011b0 <monitor_cells+0xb0>)
 8001116:	5cd3      	ldrb	r3, [r2, r3]
 8001118:	021b      	lsls	r3, r3, #8
 800111a:	4925      	ldr	r1, [pc, #148]	@ (80011b0 <monitor_cells+0xb0>)
 800111c:	687a      	ldr	r2, [r7, #4]
 800111e:	440a      	add	r2, r1
 8001120:	7812      	ldrb	r2, [r2, #0]
 8001122:	4313      	orrs	r3, r2
 8001124:	ee07 3a90 	vmov	s15, r3
 8001128:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800112c:	4a21      	ldr	r2, [pc, #132]	@ (80011b4 <monitor_cells+0xb4>)
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	4413      	add	r3, r2
 8001134:	edc3 7a00 	vstr	s15, [r3]
		    cells_voltage[j] = cells_voltage[j] * 150 * 0.000001 + 1.5;
 8001138:	4a1e      	ldr	r2, [pc, #120]	@ (80011b4 <monitor_cells+0xb4>)
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	4413      	add	r3, r2
 8001140:	edd3 7a00 	vldr	s15, [r3]
 8001144:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 80011b8 <monitor_cells+0xb8>
 8001148:	ee67 7a87 	vmul.f32	s15, s15, s14
 800114c:	ee17 0a90 	vmov	r0, s15
 8001150:	f7ff fac8 	bl	80006e4 <__aeabi_f2d>
 8001154:	a314      	add	r3, pc, #80	@ (adr r3, 80011a8 <monitor_cells+0xa8>)
 8001156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800115a:	f7ff f835 	bl	80001c8 <__aeabi_dmul>
 800115e:	4602      	mov	r2, r0
 8001160:	460b      	mov	r3, r1
 8001162:	4610      	mov	r0, r2
 8001164:	4619      	mov	r1, r3
 8001166:	f04f 0200 	mov.w	r2, #0
 800116a:	4b14      	ldr	r3, [pc, #80]	@ (80011bc <monitor_cells+0xbc>)
 800116c:	f7ff f95c 	bl	8000428 <__adddf3>
 8001170:	4602      	mov	r2, r0
 8001172:	460b      	mov	r3, r1
 8001174:	4610      	mov	r0, r2
 8001176:	4619      	mov	r1, r3
 8001178:	f7ff fb0c 	bl	8000794 <__aeabi_d2f>
 800117c:	4602      	mov	r2, r0
 800117e:	490d      	ldr	r1, [pc, #52]	@ (80011b4 <monitor_cells+0xb4>)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	440b      	add	r3, r1
 8001186:	601a      	str	r2, [r3, #0]
		for (int i = 0, j = 0; i < 32; i += 2, j++) {
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	3302      	adds	r3, #2
 800118c:	607b      	str	r3, [r7, #4]
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	3301      	adds	r3, #1
 8001192:	603b      	str	r3, [r7, #0]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2b1f      	cmp	r3, #31
 8001198:	ddba      	ble.n	8001110 <monitor_cells+0x10>
		    }
		}
 800119a:	bf00      	nop
 800119c:	bf00      	nop
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	f3af 8000 	nop.w
 80011a8:	a0b5ed8d 	.word	0xa0b5ed8d
 80011ac:	3eb0c6f7 	.word	0x3eb0c6f7
 80011b0:	20000104 	.word	0x20000104
 80011b4:	20000234 	.word	0x20000234
 80011b8:	43160000 	.word	0x43160000
 80011bc:	3ff80000 	.word	0x3ff80000

080011c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011c6:	f000 fa37 	bl	8001638 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011ca:	f000 f835 	bl	8001238 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011ce:	f000 f8d3 	bl	8001378 <MX_GPIO_Init>
  MX_SPI2_Init();
 80011d2:	f000 f89b 	bl	800130c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  for(int i= 0; i < 120; i++ ) {
 80011d6:	2300      	movs	r3, #0
 80011d8:	607b      	str	r3, [r7, #4]
 80011da:	e007      	b.n	80011ec <main+0x2c>

	  dummy_wakeup[i] = 0xFF;
 80011dc:	4a13      	ldr	r2, [pc, #76]	@ (800122c <main+0x6c>)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4413      	add	r3, r2
 80011e2:	22ff      	movs	r2, #255	@ 0xff
 80011e4:	701a      	strb	r2, [r3, #0]
  for(int i= 0; i < 120; i++ ) {
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	3301      	adds	r3, #1
 80011ea:	607b      	str	r3, [r7, #4]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2b77      	cmp	r3, #119	@ 0x77
 80011f0:	ddf4      	ble.n	80011dc <main+0x1c>
  }


  wakeup_dummy();
 80011f2:	f7ff feed 	bl	8000fd0 <wakeup_dummy>
  HAL_Delay(10);
 80011f6:	200a      	movs	r0, #10
 80011f8:	f000 fa90 	bl	800171c <HAL_Delay>



  BMS_command_SPI(0x03E0); //Start ADC conversion with redundancy
 80011fc:	f44f 7078 	mov.w	r0, #992	@ 0x3e0
 8001200:	f7ff fe90 	bl	8000f24 <BMS_command_SPI>

  HAL_Delay(200);
 8001204:	20c8      	movs	r0, #200	@ 0xc8
 8001206:	f000 fa89 	bl	800171c <HAL_Delay>
//  HAL_Delay(1);
//
//  BMS_read_SPI(RDCFGB, spi_frame, data_read);
//  HAL_Delay(1);

  BMS_read_all_SPI(0x004C, spi_frame, data_read);
 800120a:	4a09      	ldr	r2, [pc, #36]	@ (8001230 <main+0x70>)
 800120c:	4909      	ldr	r1, [pc, #36]	@ (8001234 <main+0x74>)
 800120e:	204c      	movs	r0, #76	@ 0x4c
 8001210:	f7ff feb0 	bl	8000f74 <BMS_read_all_SPI>
  monitor_cells();
 8001214:	f7ff ff74 	bl	8001100 <monitor_cells>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  BMS_read_all_SPI(0x004C, spi_frame, data_read);
 8001218:	4a05      	ldr	r2, [pc, #20]	@ (8001230 <main+0x70>)
 800121a:	4906      	ldr	r1, [pc, #24]	@ (8001234 <main+0x74>)
 800121c:	204c      	movs	r0, #76	@ 0x4c
 800121e:	f7ff fea9 	bl	8000f74 <BMS_read_all_SPI>
	  monitor_cells();
 8001222:	f7ff ff6d 	bl	8001100 <monitor_cells>
	  BMS_read_all_SPI(0x004C, spi_frame, data_read);
 8001226:	bf00      	nop
 8001228:	e7f6      	b.n	8001218 <main+0x58>
 800122a:	bf00      	nop
 800122c:	20000154 	.word	0x20000154
 8001230:	20000104 	.word	0x20000104
 8001234:	20000144 	.word	0x20000144

08001238 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b094      	sub	sp, #80	@ 0x50
 800123c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800123e:	f107 0320 	add.w	r3, r7, #32
 8001242:	2230      	movs	r2, #48	@ 0x30
 8001244:	2100      	movs	r1, #0
 8001246:	4618      	mov	r0, r3
 8001248:	f001 ff5e 	bl	8003108 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800124c:	f107 030c 	add.w	r3, r7, #12
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
 800125a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800125c:	2300      	movs	r3, #0
 800125e:	60bb      	str	r3, [r7, #8]
 8001260:	4b28      	ldr	r3, [pc, #160]	@ (8001304 <SystemClock_Config+0xcc>)
 8001262:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001264:	4a27      	ldr	r2, [pc, #156]	@ (8001304 <SystemClock_Config+0xcc>)
 8001266:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800126a:	6413      	str	r3, [r2, #64]	@ 0x40
 800126c:	4b25      	ldr	r3, [pc, #148]	@ (8001304 <SystemClock_Config+0xcc>)
 800126e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001270:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001274:	60bb      	str	r3, [r7, #8]
 8001276:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001278:	2300      	movs	r3, #0
 800127a:	607b      	str	r3, [r7, #4]
 800127c:	4b22      	ldr	r3, [pc, #136]	@ (8001308 <SystemClock_Config+0xd0>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a21      	ldr	r2, [pc, #132]	@ (8001308 <SystemClock_Config+0xd0>)
 8001282:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001286:	6013      	str	r3, [r2, #0]
 8001288:	4b1f      	ldr	r3, [pc, #124]	@ (8001308 <SystemClock_Config+0xd0>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001290:	607b      	str	r3, [r7, #4]
 8001292:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001294:	2301      	movs	r3, #1
 8001296:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001298:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800129c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800129e:	2302      	movs	r3, #2
 80012a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012a2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80012a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80012a8:	2304      	movs	r3, #4
 80012aa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 80012ac:	2340      	movs	r3, #64	@ 0x40
 80012ae:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012b0:	2302      	movs	r3, #2
 80012b2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80012b4:	2307      	movs	r3, #7
 80012b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012b8:	f107 0320 	add.w	r3, r7, #32
 80012bc:	4618      	mov	r0, r3
 80012be:	f000 fced 	bl	8001c9c <HAL_RCC_OscConfig>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80012c8:	f000 f8b4 	bl	8001434 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012cc:	230f      	movs	r3, #15
 80012ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012d0:	2302      	movs	r3, #2
 80012d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80012d4:	2380      	movs	r3, #128	@ 0x80
 80012d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 80012d8:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80012dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 80012de:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80012e2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80012e4:	f107 030c 	add.w	r3, r7, #12
 80012e8:	2101      	movs	r1, #1
 80012ea:	4618      	mov	r0, r3
 80012ec:	f000 ff4e 	bl	800218c <HAL_RCC_ClockConfig>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80012f6:	f000 f89d 	bl	8001434 <Error_Handler>
  }
}
 80012fa:	bf00      	nop
 80012fc:	3750      	adds	r7, #80	@ 0x50
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	40023800 	.word	0x40023800
 8001308:	40007000 	.word	0x40007000

0800130c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001310:	4b17      	ldr	r3, [pc, #92]	@ (8001370 <MX_SPI2_Init+0x64>)
 8001312:	4a18      	ldr	r2, [pc, #96]	@ (8001374 <MX_SPI2_Init+0x68>)
 8001314:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001316:	4b16      	ldr	r3, [pc, #88]	@ (8001370 <MX_SPI2_Init+0x64>)
 8001318:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800131c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800131e:	4b14      	ldr	r3, [pc, #80]	@ (8001370 <MX_SPI2_Init+0x64>)
 8001320:	2200      	movs	r2, #0
 8001322:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001324:	4b12      	ldr	r3, [pc, #72]	@ (8001370 <MX_SPI2_Init+0x64>)
 8001326:	2200      	movs	r2, #0
 8001328:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800132a:	4b11      	ldr	r3, [pc, #68]	@ (8001370 <MX_SPI2_Init+0x64>)
 800132c:	2200      	movs	r2, #0
 800132e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001330:	4b0f      	ldr	r3, [pc, #60]	@ (8001370 <MX_SPI2_Init+0x64>)
 8001332:	2200      	movs	r2, #0
 8001334:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001336:	4b0e      	ldr	r3, [pc, #56]	@ (8001370 <MX_SPI2_Init+0x64>)
 8001338:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800133c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800133e:	4b0c      	ldr	r3, [pc, #48]	@ (8001370 <MX_SPI2_Init+0x64>)
 8001340:	2200      	movs	r2, #0
 8001342:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001344:	4b0a      	ldr	r3, [pc, #40]	@ (8001370 <MX_SPI2_Init+0x64>)
 8001346:	2200      	movs	r2, #0
 8001348:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800134a:	4b09      	ldr	r3, [pc, #36]	@ (8001370 <MX_SPI2_Init+0x64>)
 800134c:	2200      	movs	r2, #0
 800134e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001350:	4b07      	ldr	r3, [pc, #28]	@ (8001370 <MX_SPI2_Init+0x64>)
 8001352:	2200      	movs	r2, #0
 8001354:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001356:	4b06      	ldr	r3, [pc, #24]	@ (8001370 <MX_SPI2_Init+0x64>)
 8001358:	220a      	movs	r2, #10
 800135a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800135c:	4804      	ldr	r0, [pc, #16]	@ (8001370 <MX_SPI2_Init+0x64>)
 800135e:	f001 f901 	bl	8002564 <HAL_SPI_Init>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001368:	f000 f864 	bl	8001434 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800136c:	bf00      	nop
 800136e:	bd80      	pop	{r7, pc}
 8001370:	2000002c 	.word	0x2000002c
 8001374:	40003800 	.word	0x40003800

08001378 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b08a      	sub	sp, #40	@ 0x28
 800137c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800137e:	f107 0314 	add.w	r3, r7, #20
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]
 8001386:	605a      	str	r2, [r3, #4]
 8001388:	609a      	str	r2, [r3, #8]
 800138a:	60da      	str	r2, [r3, #12]
 800138c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	613b      	str	r3, [r7, #16]
 8001392:	4b26      	ldr	r3, [pc, #152]	@ (800142c <MX_GPIO_Init+0xb4>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001396:	4a25      	ldr	r2, [pc, #148]	@ (800142c <MX_GPIO_Init+0xb4>)
 8001398:	f043 0310 	orr.w	r3, r3, #16
 800139c:	6313      	str	r3, [r2, #48]	@ 0x30
 800139e:	4b23      	ldr	r3, [pc, #140]	@ (800142c <MX_GPIO_Init+0xb4>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a2:	f003 0310 	and.w	r3, r3, #16
 80013a6:	613b      	str	r3, [r7, #16]
 80013a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	60fb      	str	r3, [r7, #12]
 80013ae:	4b1f      	ldr	r3, [pc, #124]	@ (800142c <MX_GPIO_Init+0xb4>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b2:	4a1e      	ldr	r2, [pc, #120]	@ (800142c <MX_GPIO_Init+0xb4>)
 80013b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ba:	4b1c      	ldr	r3, [pc, #112]	@ (800142c <MX_GPIO_Init+0xb4>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013c2:	60fb      	str	r3, [r7, #12]
 80013c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	60bb      	str	r3, [r7, #8]
 80013ca:	4b18      	ldr	r3, [pc, #96]	@ (800142c <MX_GPIO_Init+0xb4>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ce:	4a17      	ldr	r2, [pc, #92]	@ (800142c <MX_GPIO_Init+0xb4>)
 80013d0:	f043 0304 	orr.w	r3, r3, #4
 80013d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013d6:	4b15      	ldr	r3, [pc, #84]	@ (800142c <MX_GPIO_Init+0xb4>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013da:	f003 0304 	and.w	r3, r3, #4
 80013de:	60bb      	str	r3, [r7, #8]
 80013e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	607b      	str	r3, [r7, #4]
 80013e6:	4b11      	ldr	r3, [pc, #68]	@ (800142c <MX_GPIO_Init+0xb4>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ea:	4a10      	ldr	r2, [pc, #64]	@ (800142c <MX_GPIO_Init+0xb4>)
 80013ec:	f043 0302 	orr.w	r3, r3, #2
 80013f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013f2:	4b0e      	ldr	r3, [pc, #56]	@ (800142c <MX_GPIO_Init+0xb4>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f6:	f003 0302 	and.w	r3, r3, #2
 80013fa:	607b      	str	r3, [r7, #4]
 80013fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 80013fe:	2201      	movs	r2, #1
 8001400:	2108      	movs	r1, #8
 8001402:	480b      	ldr	r0, [pc, #44]	@ (8001430 <MX_GPIO_Init+0xb8>)
 8001404:	f000 fc30 	bl	8001c68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001408:	2308      	movs	r3, #8
 800140a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800140c:	2301      	movs	r3, #1
 800140e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001410:	2300      	movs	r3, #0
 8001412:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001414:	2300      	movs	r3, #0
 8001416:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001418:	f107 0314 	add.w	r3, r7, #20
 800141c:	4619      	mov	r1, r3
 800141e:	4804      	ldr	r0, [pc, #16]	@ (8001430 <MX_GPIO_Init+0xb8>)
 8001420:	f000 fa86 	bl	8001930 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001424:	bf00      	nop
 8001426:	3728      	adds	r7, #40	@ 0x28
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	40023800 	.word	0x40023800
 8001430:	40021000 	.word	0x40021000

08001434 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001438:	b672      	cpsid	i
}
 800143a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800143c:	bf00      	nop
 800143e:	e7fd      	b.n	800143c <Error_Handler+0x8>

08001440 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	607b      	str	r3, [r7, #4]
 800144a:	4b10      	ldr	r3, [pc, #64]	@ (800148c <HAL_MspInit+0x4c>)
 800144c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800144e:	4a0f      	ldr	r2, [pc, #60]	@ (800148c <HAL_MspInit+0x4c>)
 8001450:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001454:	6453      	str	r3, [r2, #68]	@ 0x44
 8001456:	4b0d      	ldr	r3, [pc, #52]	@ (800148c <HAL_MspInit+0x4c>)
 8001458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800145a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800145e:	607b      	str	r3, [r7, #4]
 8001460:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	603b      	str	r3, [r7, #0]
 8001466:	4b09      	ldr	r3, [pc, #36]	@ (800148c <HAL_MspInit+0x4c>)
 8001468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800146a:	4a08      	ldr	r2, [pc, #32]	@ (800148c <HAL_MspInit+0x4c>)
 800146c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001470:	6413      	str	r3, [r2, #64]	@ 0x40
 8001472:	4b06      	ldr	r3, [pc, #24]	@ (800148c <HAL_MspInit+0x4c>)
 8001474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001476:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800147a:	603b      	str	r3, [r7, #0]
 800147c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800147e:	2007      	movs	r0, #7
 8001480:	f000 fa22 	bl	80018c8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001484:	bf00      	nop
 8001486:	3708      	adds	r7, #8
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	40023800 	.word	0x40023800

08001490 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b08a      	sub	sp, #40	@ 0x28
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001498:	f107 0314 	add.w	r3, r7, #20
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	609a      	str	r2, [r3, #8]
 80014a4:	60da      	str	r2, [r3, #12]
 80014a6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a28      	ldr	r2, [pc, #160]	@ (8001550 <HAL_SPI_MspInit+0xc0>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d14a      	bne.n	8001548 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	613b      	str	r3, [r7, #16]
 80014b6:	4b27      	ldr	r3, [pc, #156]	@ (8001554 <HAL_SPI_MspInit+0xc4>)
 80014b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ba:	4a26      	ldr	r2, [pc, #152]	@ (8001554 <HAL_SPI_MspInit+0xc4>)
 80014bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80014c2:	4b24      	ldr	r3, [pc, #144]	@ (8001554 <HAL_SPI_MspInit+0xc4>)
 80014c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014ca:	613b      	str	r3, [r7, #16]
 80014cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	60fb      	str	r3, [r7, #12]
 80014d2:	4b20      	ldr	r3, [pc, #128]	@ (8001554 <HAL_SPI_MspInit+0xc4>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d6:	4a1f      	ldr	r2, [pc, #124]	@ (8001554 <HAL_SPI_MspInit+0xc4>)
 80014d8:	f043 0304 	orr.w	r3, r3, #4
 80014dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80014de:	4b1d      	ldr	r3, [pc, #116]	@ (8001554 <HAL_SPI_MspInit+0xc4>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e2:	f003 0304 	and.w	r3, r3, #4
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	60bb      	str	r3, [r7, #8]
 80014ee:	4b19      	ldr	r3, [pc, #100]	@ (8001554 <HAL_SPI_MspInit+0xc4>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f2:	4a18      	ldr	r2, [pc, #96]	@ (8001554 <HAL_SPI_MspInit+0xc4>)
 80014f4:	f043 0302 	orr.w	r3, r3, #2
 80014f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014fa:	4b16      	ldr	r3, [pc, #88]	@ (8001554 <HAL_SPI_MspInit+0xc4>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fe:	f003 0302 	and.w	r3, r3, #2
 8001502:	60bb      	str	r3, [r7, #8]
 8001504:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001506:	230c      	movs	r3, #12
 8001508:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150a:	2302      	movs	r3, #2
 800150c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150e:	2300      	movs	r3, #0
 8001510:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001512:	2303      	movs	r3, #3
 8001514:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001516:	2305      	movs	r3, #5
 8001518:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800151a:	f107 0314 	add.w	r3, r7, #20
 800151e:	4619      	mov	r1, r3
 8001520:	480d      	ldr	r0, [pc, #52]	@ (8001558 <HAL_SPI_MspInit+0xc8>)
 8001522:	f000 fa05 	bl	8001930 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001526:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800152a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152c:	2302      	movs	r3, #2
 800152e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001530:	2300      	movs	r3, #0
 8001532:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001534:	2303      	movs	r3, #3
 8001536:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001538:	2305      	movs	r3, #5
 800153a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800153c:	f107 0314 	add.w	r3, r7, #20
 8001540:	4619      	mov	r1, r3
 8001542:	4806      	ldr	r0, [pc, #24]	@ (800155c <HAL_SPI_MspInit+0xcc>)
 8001544:	f000 f9f4 	bl	8001930 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001548:	bf00      	nop
 800154a:	3728      	adds	r7, #40	@ 0x28
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	40003800 	.word	0x40003800
 8001554:	40023800 	.word	0x40023800
 8001558:	40020800 	.word	0x40020800
 800155c:	40020400 	.word	0x40020400

08001560 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001564:	bf00      	nop
 8001566:	e7fd      	b.n	8001564 <NMI_Handler+0x4>

08001568 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800156c:	bf00      	nop
 800156e:	e7fd      	b.n	800156c <HardFault_Handler+0x4>

08001570 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001574:	bf00      	nop
 8001576:	e7fd      	b.n	8001574 <MemManage_Handler+0x4>

08001578 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800157c:	bf00      	nop
 800157e:	e7fd      	b.n	800157c <BusFault_Handler+0x4>

08001580 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001584:	bf00      	nop
 8001586:	e7fd      	b.n	8001584 <UsageFault_Handler+0x4>

08001588 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800158c:	bf00      	nop
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr

08001596 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001596:	b480      	push	{r7}
 8001598:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800159a:	bf00      	nop
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr

080015a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015a8:	bf00      	nop
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr

080015b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015b2:	b580      	push	{r7, lr}
 80015b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015b6:	f000 f891 	bl	80016dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015ba:	bf00      	nop
 80015bc:	bd80      	pop	{r7, pc}
	...

080015c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015c4:	4b06      	ldr	r3, [pc, #24]	@ (80015e0 <SystemInit+0x20>)
 80015c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015ca:	4a05      	ldr	r2, [pc, #20]	@ (80015e0 <SystemInit+0x20>)
 80015cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015d4:	bf00      	nop
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	e000ed00 	.word	0xe000ed00

080015e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80015e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800161c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80015e8:	f7ff ffea 	bl	80015c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015ec:	480c      	ldr	r0, [pc, #48]	@ (8001620 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015ee:	490d      	ldr	r1, [pc, #52]	@ (8001624 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001628 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015f4:	e002      	b.n	80015fc <LoopCopyDataInit>

080015f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015fa:	3304      	adds	r3, #4

080015fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001600:	d3f9      	bcc.n	80015f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001602:	4a0a      	ldr	r2, [pc, #40]	@ (800162c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001604:	4c0a      	ldr	r4, [pc, #40]	@ (8001630 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001606:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001608:	e001      	b.n	800160e <LoopFillZerobss>

0800160a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800160a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800160c:	3204      	adds	r2, #4

0800160e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800160e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001610:	d3fb      	bcc.n	800160a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001612:	f001 fd81 	bl	8003118 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001616:	f7ff fdd3 	bl	80011c0 <main>
  bx  lr    
 800161a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800161c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001620:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001624:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001628:	08003198 	.word	0x08003198
  ldr r2, =_sbss
 800162c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001630:	20000278 	.word	0x20000278

08001634 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001634:	e7fe      	b.n	8001634 <ADC_IRQHandler>
	...

08001638 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800163c:	4b0e      	ldr	r3, [pc, #56]	@ (8001678 <HAL_Init+0x40>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a0d      	ldr	r2, [pc, #52]	@ (8001678 <HAL_Init+0x40>)
 8001642:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001646:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001648:	4b0b      	ldr	r3, [pc, #44]	@ (8001678 <HAL_Init+0x40>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a0a      	ldr	r2, [pc, #40]	@ (8001678 <HAL_Init+0x40>)
 800164e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001652:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001654:	4b08      	ldr	r3, [pc, #32]	@ (8001678 <HAL_Init+0x40>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a07      	ldr	r2, [pc, #28]	@ (8001678 <HAL_Init+0x40>)
 800165a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800165e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001660:	2003      	movs	r0, #3
 8001662:	f000 f931 	bl	80018c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001666:	2000      	movs	r0, #0
 8001668:	f000 f808 	bl	800167c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800166c:	f7ff fee8 	bl	8001440 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001670:	2300      	movs	r3, #0
}
 8001672:	4618      	mov	r0, r3
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	40023c00 	.word	0x40023c00

0800167c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001684:	4b12      	ldr	r3, [pc, #72]	@ (80016d0 <HAL_InitTick+0x54>)
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	4b12      	ldr	r3, [pc, #72]	@ (80016d4 <HAL_InitTick+0x58>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	4619      	mov	r1, r3
 800168e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001692:	fbb3 f3f1 	udiv	r3, r3, r1
 8001696:	fbb2 f3f3 	udiv	r3, r2, r3
 800169a:	4618      	mov	r0, r3
 800169c:	f000 f93b 	bl	8001916 <HAL_SYSTICK_Config>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e00e      	b.n	80016c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2b0f      	cmp	r3, #15
 80016ae:	d80a      	bhi.n	80016c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016b0:	2200      	movs	r2, #0
 80016b2:	6879      	ldr	r1, [r7, #4]
 80016b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80016b8:	f000 f911 	bl	80018de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016bc:	4a06      	ldr	r2, [pc, #24]	@ (80016d8 <HAL_InitTick+0x5c>)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016c2:	2300      	movs	r3, #0
 80016c4:	e000      	b.n	80016c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3708      	adds	r7, #8
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	20000004 	.word	0x20000004
 80016d4:	2000000c 	.word	0x2000000c
 80016d8:	20000008 	.word	0x20000008

080016dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016e0:	4b06      	ldr	r3, [pc, #24]	@ (80016fc <HAL_IncTick+0x20>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	461a      	mov	r2, r3
 80016e6:	4b06      	ldr	r3, [pc, #24]	@ (8001700 <HAL_IncTick+0x24>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4413      	add	r3, r2
 80016ec:	4a04      	ldr	r2, [pc, #16]	@ (8001700 <HAL_IncTick+0x24>)
 80016ee:	6013      	str	r3, [r2, #0]
}
 80016f0:	bf00      	nop
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	2000000c 	.word	0x2000000c
 8001700:	20000274 	.word	0x20000274

08001704 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  return uwTick;
 8001708:	4b03      	ldr	r3, [pc, #12]	@ (8001718 <HAL_GetTick+0x14>)
 800170a:	681b      	ldr	r3, [r3, #0]
}
 800170c:	4618      	mov	r0, r3
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	20000274 	.word	0x20000274

0800171c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001724:	f7ff ffee 	bl	8001704 <HAL_GetTick>
 8001728:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001734:	d005      	beq.n	8001742 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001736:	4b0a      	ldr	r3, [pc, #40]	@ (8001760 <HAL_Delay+0x44>)
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	461a      	mov	r2, r3
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	4413      	add	r3, r2
 8001740:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001742:	bf00      	nop
 8001744:	f7ff ffde 	bl	8001704 <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	68fa      	ldr	r2, [r7, #12]
 8001750:	429a      	cmp	r2, r3
 8001752:	d8f7      	bhi.n	8001744 <HAL_Delay+0x28>
  {
  }
}
 8001754:	bf00      	nop
 8001756:	bf00      	nop
 8001758:	3710      	adds	r7, #16
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	2000000c 	.word	0x2000000c

08001764 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001764:	b480      	push	{r7}
 8001766:	b085      	sub	sp, #20
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f003 0307 	and.w	r3, r3, #7
 8001772:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001774:	4b0c      	ldr	r3, [pc, #48]	@ (80017a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800177a:	68ba      	ldr	r2, [r7, #8]
 800177c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001780:	4013      	ands	r3, r2
 8001782:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800178c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001790:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001794:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001796:	4a04      	ldr	r2, [pc, #16]	@ (80017a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	60d3      	str	r3, [r2, #12]
}
 800179c:	bf00      	nop
 800179e:	3714      	adds	r7, #20
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr
 80017a8:	e000ed00 	.word	0xe000ed00

080017ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017b0:	4b04      	ldr	r3, [pc, #16]	@ (80017c4 <__NVIC_GetPriorityGrouping+0x18>)
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	0a1b      	lsrs	r3, r3, #8
 80017b6:	f003 0307 	and.w	r3, r3, #7
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr
 80017c4:	e000ed00 	.word	0xe000ed00

080017c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	4603      	mov	r3, r0
 80017d0:	6039      	str	r1, [r7, #0]
 80017d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	db0a      	blt.n	80017f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	b2da      	uxtb	r2, r3
 80017e0:	490c      	ldr	r1, [pc, #48]	@ (8001814 <__NVIC_SetPriority+0x4c>)
 80017e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e6:	0112      	lsls	r2, r2, #4
 80017e8:	b2d2      	uxtb	r2, r2
 80017ea:	440b      	add	r3, r1
 80017ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017f0:	e00a      	b.n	8001808 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	b2da      	uxtb	r2, r3
 80017f6:	4908      	ldr	r1, [pc, #32]	@ (8001818 <__NVIC_SetPriority+0x50>)
 80017f8:	79fb      	ldrb	r3, [r7, #7]
 80017fa:	f003 030f 	and.w	r3, r3, #15
 80017fe:	3b04      	subs	r3, #4
 8001800:	0112      	lsls	r2, r2, #4
 8001802:	b2d2      	uxtb	r2, r2
 8001804:	440b      	add	r3, r1
 8001806:	761a      	strb	r2, [r3, #24]
}
 8001808:	bf00      	nop
 800180a:	370c      	adds	r7, #12
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr
 8001814:	e000e100 	.word	0xe000e100
 8001818:	e000ed00 	.word	0xe000ed00

0800181c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800181c:	b480      	push	{r7}
 800181e:	b089      	sub	sp, #36	@ 0x24
 8001820:	af00      	add	r7, sp, #0
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	60b9      	str	r1, [r7, #8]
 8001826:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	f003 0307 	and.w	r3, r3, #7
 800182e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	f1c3 0307 	rsb	r3, r3, #7
 8001836:	2b04      	cmp	r3, #4
 8001838:	bf28      	it	cs
 800183a:	2304      	movcs	r3, #4
 800183c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	3304      	adds	r3, #4
 8001842:	2b06      	cmp	r3, #6
 8001844:	d902      	bls.n	800184c <NVIC_EncodePriority+0x30>
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	3b03      	subs	r3, #3
 800184a:	e000      	b.n	800184e <NVIC_EncodePriority+0x32>
 800184c:	2300      	movs	r3, #0
 800184e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001850:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001854:	69bb      	ldr	r3, [r7, #24]
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	43da      	mvns	r2, r3
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	401a      	ands	r2, r3
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001864:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	fa01 f303 	lsl.w	r3, r1, r3
 800186e:	43d9      	mvns	r1, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001874:	4313      	orrs	r3, r2
         );
}
 8001876:	4618      	mov	r0, r3
 8001878:	3724      	adds	r7, #36	@ 0x24
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
	...

08001884 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	3b01      	subs	r3, #1
 8001890:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001894:	d301      	bcc.n	800189a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001896:	2301      	movs	r3, #1
 8001898:	e00f      	b.n	80018ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800189a:	4a0a      	ldr	r2, [pc, #40]	@ (80018c4 <SysTick_Config+0x40>)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	3b01      	subs	r3, #1
 80018a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018a2:	210f      	movs	r1, #15
 80018a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80018a8:	f7ff ff8e 	bl	80017c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018ac:	4b05      	ldr	r3, [pc, #20]	@ (80018c4 <SysTick_Config+0x40>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018b2:	4b04      	ldr	r3, [pc, #16]	@ (80018c4 <SysTick_Config+0x40>)
 80018b4:	2207      	movs	r2, #7
 80018b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018b8:	2300      	movs	r3, #0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	e000e010 	.word	0xe000e010

080018c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f7ff ff47 	bl	8001764 <__NVIC_SetPriorityGrouping>
}
 80018d6:	bf00      	nop
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}

080018de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018de:	b580      	push	{r7, lr}
 80018e0:	b086      	sub	sp, #24
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	4603      	mov	r3, r0
 80018e6:	60b9      	str	r1, [r7, #8]
 80018e8:	607a      	str	r2, [r7, #4]
 80018ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018ec:	2300      	movs	r3, #0
 80018ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018f0:	f7ff ff5c 	bl	80017ac <__NVIC_GetPriorityGrouping>
 80018f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	68b9      	ldr	r1, [r7, #8]
 80018fa:	6978      	ldr	r0, [r7, #20]
 80018fc:	f7ff ff8e 	bl	800181c <NVIC_EncodePriority>
 8001900:	4602      	mov	r2, r0
 8001902:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001906:	4611      	mov	r1, r2
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff ff5d 	bl	80017c8 <__NVIC_SetPriority>
}
 800190e:	bf00      	nop
 8001910:	3718      	adds	r7, #24
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001916:	b580      	push	{r7, lr}
 8001918:	b082      	sub	sp, #8
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f7ff ffb0 	bl	8001884 <SysTick_Config>
 8001924:	4603      	mov	r3, r0
}
 8001926:	4618      	mov	r0, r3
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
	...

08001930 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001930:	b480      	push	{r7}
 8001932:	b089      	sub	sp, #36	@ 0x24
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800193a:	2300      	movs	r3, #0
 800193c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800193e:	2300      	movs	r3, #0
 8001940:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001942:	2300      	movs	r3, #0
 8001944:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001946:	2300      	movs	r3, #0
 8001948:	61fb      	str	r3, [r7, #28]
 800194a:	e16b      	b.n	8001c24 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800194c:	2201      	movs	r2, #1
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	697a      	ldr	r2, [r7, #20]
 800195c:	4013      	ands	r3, r2
 800195e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001960:	693a      	ldr	r2, [r7, #16]
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	429a      	cmp	r2, r3
 8001966:	f040 815a 	bne.w	8001c1e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f003 0303 	and.w	r3, r3, #3
 8001972:	2b01      	cmp	r3, #1
 8001974:	d005      	beq.n	8001982 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800197e:	2b02      	cmp	r3, #2
 8001980:	d130      	bne.n	80019e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	2203      	movs	r2, #3
 800198e:	fa02 f303 	lsl.w	r3, r2, r3
 8001992:	43db      	mvns	r3, r3
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	4013      	ands	r3, r2
 8001998:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	68da      	ldr	r2, [r3, #12]
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	fa02 f303 	lsl.w	r3, r2, r3
 80019a6:	69ba      	ldr	r2, [r7, #24]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019b8:	2201      	movs	r2, #1
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	43db      	mvns	r3, r3
 80019c2:	69ba      	ldr	r2, [r7, #24]
 80019c4:	4013      	ands	r3, r2
 80019c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	091b      	lsrs	r3, r3, #4
 80019ce:	f003 0201 	and.w	r2, r3, #1
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	fa02 f303 	lsl.w	r3, r2, r3
 80019d8:	69ba      	ldr	r2, [r7, #24]
 80019da:	4313      	orrs	r3, r2
 80019dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f003 0303 	and.w	r3, r3, #3
 80019ec:	2b03      	cmp	r3, #3
 80019ee:	d017      	beq.n	8001a20 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	2203      	movs	r2, #3
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	43db      	mvns	r3, r3
 8001a02:	69ba      	ldr	r2, [r7, #24]
 8001a04:	4013      	ands	r3, r2
 8001a06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	689a      	ldr	r2, [r3, #8]
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	fa02 f303 	lsl.w	r3, r2, r3
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f003 0303 	and.w	r3, r3, #3
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	d123      	bne.n	8001a74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	08da      	lsrs	r2, r3, #3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	3208      	adds	r2, #8
 8001a34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	f003 0307 	and.w	r3, r3, #7
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	220f      	movs	r2, #15
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	691a      	ldr	r2, [r3, #16]
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	f003 0307 	and.w	r3, r3, #7
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	08da      	lsrs	r2, r3, #3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	3208      	adds	r2, #8
 8001a6e:	69b9      	ldr	r1, [r7, #24]
 8001a70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	2203      	movs	r2, #3
 8001a80:	fa02 f303 	lsl.w	r3, r2, r3
 8001a84:	43db      	mvns	r3, r3
 8001a86:	69ba      	ldr	r2, [r7, #24]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f003 0203 	and.w	r2, r3, #3
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	f000 80b4 	beq.w	8001c1e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	60fb      	str	r3, [r7, #12]
 8001aba:	4b60      	ldr	r3, [pc, #384]	@ (8001c3c <HAL_GPIO_Init+0x30c>)
 8001abc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001abe:	4a5f      	ldr	r2, [pc, #380]	@ (8001c3c <HAL_GPIO_Init+0x30c>)
 8001ac0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ac4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ac6:	4b5d      	ldr	r3, [pc, #372]	@ (8001c3c <HAL_GPIO_Init+0x30c>)
 8001ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ace:	60fb      	str	r3, [r7, #12]
 8001ad0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ad2:	4a5b      	ldr	r2, [pc, #364]	@ (8001c40 <HAL_GPIO_Init+0x310>)
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	089b      	lsrs	r3, r3, #2
 8001ad8:	3302      	adds	r3, #2
 8001ada:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ade:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	f003 0303 	and.w	r3, r3, #3
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	220f      	movs	r2, #15
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	43db      	mvns	r3, r3
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	4013      	ands	r3, r2
 8001af4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4a52      	ldr	r2, [pc, #328]	@ (8001c44 <HAL_GPIO_Init+0x314>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d02b      	beq.n	8001b56 <HAL_GPIO_Init+0x226>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4a51      	ldr	r2, [pc, #324]	@ (8001c48 <HAL_GPIO_Init+0x318>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d025      	beq.n	8001b52 <HAL_GPIO_Init+0x222>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4a50      	ldr	r2, [pc, #320]	@ (8001c4c <HAL_GPIO_Init+0x31c>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d01f      	beq.n	8001b4e <HAL_GPIO_Init+0x21e>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4a4f      	ldr	r2, [pc, #316]	@ (8001c50 <HAL_GPIO_Init+0x320>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d019      	beq.n	8001b4a <HAL_GPIO_Init+0x21a>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4a4e      	ldr	r2, [pc, #312]	@ (8001c54 <HAL_GPIO_Init+0x324>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d013      	beq.n	8001b46 <HAL_GPIO_Init+0x216>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a4d      	ldr	r2, [pc, #308]	@ (8001c58 <HAL_GPIO_Init+0x328>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d00d      	beq.n	8001b42 <HAL_GPIO_Init+0x212>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4a4c      	ldr	r2, [pc, #304]	@ (8001c5c <HAL_GPIO_Init+0x32c>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d007      	beq.n	8001b3e <HAL_GPIO_Init+0x20e>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4a4b      	ldr	r2, [pc, #300]	@ (8001c60 <HAL_GPIO_Init+0x330>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d101      	bne.n	8001b3a <HAL_GPIO_Init+0x20a>
 8001b36:	2307      	movs	r3, #7
 8001b38:	e00e      	b.n	8001b58 <HAL_GPIO_Init+0x228>
 8001b3a:	2308      	movs	r3, #8
 8001b3c:	e00c      	b.n	8001b58 <HAL_GPIO_Init+0x228>
 8001b3e:	2306      	movs	r3, #6
 8001b40:	e00a      	b.n	8001b58 <HAL_GPIO_Init+0x228>
 8001b42:	2305      	movs	r3, #5
 8001b44:	e008      	b.n	8001b58 <HAL_GPIO_Init+0x228>
 8001b46:	2304      	movs	r3, #4
 8001b48:	e006      	b.n	8001b58 <HAL_GPIO_Init+0x228>
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e004      	b.n	8001b58 <HAL_GPIO_Init+0x228>
 8001b4e:	2302      	movs	r3, #2
 8001b50:	e002      	b.n	8001b58 <HAL_GPIO_Init+0x228>
 8001b52:	2301      	movs	r3, #1
 8001b54:	e000      	b.n	8001b58 <HAL_GPIO_Init+0x228>
 8001b56:	2300      	movs	r3, #0
 8001b58:	69fa      	ldr	r2, [r7, #28]
 8001b5a:	f002 0203 	and.w	r2, r2, #3
 8001b5e:	0092      	lsls	r2, r2, #2
 8001b60:	4093      	lsls	r3, r2
 8001b62:	69ba      	ldr	r2, [r7, #24]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b68:	4935      	ldr	r1, [pc, #212]	@ (8001c40 <HAL_GPIO_Init+0x310>)
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	089b      	lsrs	r3, r3, #2
 8001b6e:	3302      	adds	r3, #2
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b76:	4b3b      	ldr	r3, [pc, #236]	@ (8001c64 <HAL_GPIO_Init+0x334>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	43db      	mvns	r3, r3
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	4013      	ands	r3, r2
 8001b84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d003      	beq.n	8001b9a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b9a:	4a32      	ldr	r2, [pc, #200]	@ (8001c64 <HAL_GPIO_Init+0x334>)
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ba0:	4b30      	ldr	r3, [pc, #192]	@ (8001c64 <HAL_GPIO_Init+0x334>)
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	4013      	ands	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d003      	beq.n	8001bc4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bc4:	4a27      	ldr	r2, [pc, #156]	@ (8001c64 <HAL_GPIO_Init+0x334>)
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001bca:	4b26      	ldr	r3, [pc, #152]	@ (8001c64 <HAL_GPIO_Init+0x334>)
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	43db      	mvns	r3, r3
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d003      	beq.n	8001bee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001be6:	69ba      	ldr	r2, [r7, #24]
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bee:	4a1d      	ldr	r2, [pc, #116]	@ (8001c64 <HAL_GPIO_Init+0x334>)
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bf4:	4b1b      	ldr	r3, [pc, #108]	@ (8001c64 <HAL_GPIO_Init+0x334>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	4013      	ands	r3, r2
 8001c02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d003      	beq.n	8001c18 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c18:	4a12      	ldr	r2, [pc, #72]	@ (8001c64 <HAL_GPIO_Init+0x334>)
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	3301      	adds	r3, #1
 8001c22:	61fb      	str	r3, [r7, #28]
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	2b0f      	cmp	r3, #15
 8001c28:	f67f ae90 	bls.w	800194c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c2c:	bf00      	nop
 8001c2e:	bf00      	nop
 8001c30:	3724      	adds	r7, #36	@ 0x24
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	40023800 	.word	0x40023800
 8001c40:	40013800 	.word	0x40013800
 8001c44:	40020000 	.word	0x40020000
 8001c48:	40020400 	.word	0x40020400
 8001c4c:	40020800 	.word	0x40020800
 8001c50:	40020c00 	.word	0x40020c00
 8001c54:	40021000 	.word	0x40021000
 8001c58:	40021400 	.word	0x40021400
 8001c5c:	40021800 	.word	0x40021800
 8001c60:	40021c00 	.word	0x40021c00
 8001c64:	40013c00 	.word	0x40013c00

08001c68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	460b      	mov	r3, r1
 8001c72:	807b      	strh	r3, [r7, #2]
 8001c74:	4613      	mov	r3, r2
 8001c76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c78:	787b      	ldrb	r3, [r7, #1]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d003      	beq.n	8001c86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c7e:	887a      	ldrh	r2, [r7, #2]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c84:	e003      	b.n	8001c8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c86:	887b      	ldrh	r3, [r7, #2]
 8001c88:	041a      	lsls	r2, r3, #16
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	619a      	str	r2, [r3, #24]
}
 8001c8e:	bf00      	nop
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
	...

08001c9c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b086      	sub	sp, #24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d101      	bne.n	8001cae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e267      	b.n	800217e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0301 	and.w	r3, r3, #1
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d075      	beq.n	8001da6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001cba:	4b88      	ldr	r3, [pc, #544]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	f003 030c 	and.w	r3, r3, #12
 8001cc2:	2b04      	cmp	r3, #4
 8001cc4:	d00c      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cc6:	4b85      	ldr	r3, [pc, #532]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001cce:	2b08      	cmp	r3, #8
 8001cd0:	d112      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cd2:	4b82      	ldr	r3, [pc, #520]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cda:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001cde:	d10b      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ce0:	4b7e      	ldr	r3, [pc, #504]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d05b      	beq.n	8001da4 <HAL_RCC_OscConfig+0x108>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d157      	bne.n	8001da4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e242      	b.n	800217e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d00:	d106      	bne.n	8001d10 <HAL_RCC_OscConfig+0x74>
 8001d02:	4b76      	ldr	r3, [pc, #472]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a75      	ldr	r2, [pc, #468]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001d08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d0c:	6013      	str	r3, [r2, #0]
 8001d0e:	e01d      	b.n	8001d4c <HAL_RCC_OscConfig+0xb0>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d18:	d10c      	bne.n	8001d34 <HAL_RCC_OscConfig+0x98>
 8001d1a:	4b70      	ldr	r3, [pc, #448]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a6f      	ldr	r2, [pc, #444]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001d20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d24:	6013      	str	r3, [r2, #0]
 8001d26:	4b6d      	ldr	r3, [pc, #436]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a6c      	ldr	r2, [pc, #432]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001d2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d30:	6013      	str	r3, [r2, #0]
 8001d32:	e00b      	b.n	8001d4c <HAL_RCC_OscConfig+0xb0>
 8001d34:	4b69      	ldr	r3, [pc, #420]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a68      	ldr	r2, [pc, #416]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001d3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d3e:	6013      	str	r3, [r2, #0]
 8001d40:	4b66      	ldr	r3, [pc, #408]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a65      	ldr	r2, [pc, #404]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001d46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d013      	beq.n	8001d7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d54:	f7ff fcd6 	bl	8001704 <HAL_GetTick>
 8001d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d5a:	e008      	b.n	8001d6e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d5c:	f7ff fcd2 	bl	8001704 <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b64      	cmp	r3, #100	@ 0x64
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e207      	b.n	800217e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d6e:	4b5b      	ldr	r3, [pc, #364]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d0f0      	beq.n	8001d5c <HAL_RCC_OscConfig+0xc0>
 8001d7a:	e014      	b.n	8001da6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d7c:	f7ff fcc2 	bl	8001704 <HAL_GetTick>
 8001d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d82:	e008      	b.n	8001d96 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d84:	f7ff fcbe 	bl	8001704 <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	2b64      	cmp	r3, #100	@ 0x64
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e1f3      	b.n	800217e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d96:	4b51      	ldr	r3, [pc, #324]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d1f0      	bne.n	8001d84 <HAL_RCC_OscConfig+0xe8>
 8001da2:	e000      	b.n	8001da6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001da4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0302 	and.w	r3, r3, #2
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d063      	beq.n	8001e7a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001db2:	4b4a      	ldr	r3, [pc, #296]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	f003 030c 	and.w	r3, r3, #12
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d00b      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001dbe:	4b47      	ldr	r3, [pc, #284]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001dc6:	2b08      	cmp	r3, #8
 8001dc8:	d11c      	bne.n	8001e04 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001dca:	4b44      	ldr	r3, [pc, #272]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d116      	bne.n	8001e04 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dd6:	4b41      	ldr	r3, [pc, #260]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d005      	beq.n	8001dee <HAL_RCC_OscConfig+0x152>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d001      	beq.n	8001dee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e1c7      	b.n	800217e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dee:	4b3b      	ldr	r3, [pc, #236]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	691b      	ldr	r3, [r3, #16]
 8001dfa:	00db      	lsls	r3, r3, #3
 8001dfc:	4937      	ldr	r1, [pc, #220]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e02:	e03a      	b.n	8001e7a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d020      	beq.n	8001e4e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e0c:	4b34      	ldr	r3, [pc, #208]	@ (8001ee0 <HAL_RCC_OscConfig+0x244>)
 8001e0e:	2201      	movs	r2, #1
 8001e10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e12:	f7ff fc77 	bl	8001704 <HAL_GetTick>
 8001e16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e18:	e008      	b.n	8001e2c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e1a:	f7ff fc73 	bl	8001704 <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d901      	bls.n	8001e2c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e1a8      	b.n	800217e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e2c:	4b2b      	ldr	r3, [pc, #172]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0302 	and.w	r3, r3, #2
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d0f0      	beq.n	8001e1a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e38:	4b28      	ldr	r3, [pc, #160]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	691b      	ldr	r3, [r3, #16]
 8001e44:	00db      	lsls	r3, r3, #3
 8001e46:	4925      	ldr	r1, [pc, #148]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	600b      	str	r3, [r1, #0]
 8001e4c:	e015      	b.n	8001e7a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e4e:	4b24      	ldr	r3, [pc, #144]	@ (8001ee0 <HAL_RCC_OscConfig+0x244>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e54:	f7ff fc56 	bl	8001704 <HAL_GetTick>
 8001e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e5a:	e008      	b.n	8001e6e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e5c:	f7ff fc52 	bl	8001704 <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d901      	bls.n	8001e6e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e187      	b.n	800217e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e6e:	4b1b      	ldr	r3, [pc, #108]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0302 	and.w	r3, r3, #2
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d1f0      	bne.n	8001e5c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0308 	and.w	r3, r3, #8
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d036      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	695b      	ldr	r3, [r3, #20]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d016      	beq.n	8001ebc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e8e:	4b15      	ldr	r3, [pc, #84]	@ (8001ee4 <HAL_RCC_OscConfig+0x248>)
 8001e90:	2201      	movs	r2, #1
 8001e92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e94:	f7ff fc36 	bl	8001704 <HAL_GetTick>
 8001e98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e9a:	e008      	b.n	8001eae <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e9c:	f7ff fc32 	bl	8001704 <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e167      	b.n	800217e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eae:	4b0b      	ldr	r3, [pc, #44]	@ (8001edc <HAL_RCC_OscConfig+0x240>)
 8001eb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d0f0      	beq.n	8001e9c <HAL_RCC_OscConfig+0x200>
 8001eba:	e01b      	b.n	8001ef4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ebc:	4b09      	ldr	r3, [pc, #36]	@ (8001ee4 <HAL_RCC_OscConfig+0x248>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ec2:	f7ff fc1f 	bl	8001704 <HAL_GetTick>
 8001ec6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ec8:	e00e      	b.n	8001ee8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001eca:	f7ff fc1b 	bl	8001704 <HAL_GetTick>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d907      	bls.n	8001ee8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	e150      	b.n	800217e <HAL_RCC_OscConfig+0x4e2>
 8001edc:	40023800 	.word	0x40023800
 8001ee0:	42470000 	.word	0x42470000
 8001ee4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ee8:	4b88      	ldr	r3, [pc, #544]	@ (800210c <HAL_RCC_OscConfig+0x470>)
 8001eea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001eec:	f003 0302 	and.w	r3, r3, #2
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d1ea      	bne.n	8001eca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0304 	and.w	r3, r3, #4
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	f000 8097 	beq.w	8002030 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f02:	2300      	movs	r3, #0
 8001f04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f06:	4b81      	ldr	r3, [pc, #516]	@ (800210c <HAL_RCC_OscConfig+0x470>)
 8001f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d10f      	bne.n	8001f32 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f12:	2300      	movs	r3, #0
 8001f14:	60bb      	str	r3, [r7, #8]
 8001f16:	4b7d      	ldr	r3, [pc, #500]	@ (800210c <HAL_RCC_OscConfig+0x470>)
 8001f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f1a:	4a7c      	ldr	r2, [pc, #496]	@ (800210c <HAL_RCC_OscConfig+0x470>)
 8001f1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f20:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f22:	4b7a      	ldr	r3, [pc, #488]	@ (800210c <HAL_RCC_OscConfig+0x470>)
 8001f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f2a:	60bb      	str	r3, [r7, #8]
 8001f2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f32:	4b77      	ldr	r3, [pc, #476]	@ (8002110 <HAL_RCC_OscConfig+0x474>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d118      	bne.n	8001f70 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f3e:	4b74      	ldr	r3, [pc, #464]	@ (8002110 <HAL_RCC_OscConfig+0x474>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a73      	ldr	r2, [pc, #460]	@ (8002110 <HAL_RCC_OscConfig+0x474>)
 8001f44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f4a:	f7ff fbdb 	bl	8001704 <HAL_GetTick>
 8001f4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f50:	e008      	b.n	8001f64 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f52:	f7ff fbd7 	bl	8001704 <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	d901      	bls.n	8001f64 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001f60:	2303      	movs	r3, #3
 8001f62:	e10c      	b.n	800217e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f64:	4b6a      	ldr	r3, [pc, #424]	@ (8002110 <HAL_RCC_OscConfig+0x474>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d0f0      	beq.n	8001f52 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d106      	bne.n	8001f86 <HAL_RCC_OscConfig+0x2ea>
 8001f78:	4b64      	ldr	r3, [pc, #400]	@ (800210c <HAL_RCC_OscConfig+0x470>)
 8001f7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f7c:	4a63      	ldr	r2, [pc, #396]	@ (800210c <HAL_RCC_OscConfig+0x470>)
 8001f7e:	f043 0301 	orr.w	r3, r3, #1
 8001f82:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f84:	e01c      	b.n	8001fc0 <HAL_RCC_OscConfig+0x324>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	2b05      	cmp	r3, #5
 8001f8c:	d10c      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x30c>
 8001f8e:	4b5f      	ldr	r3, [pc, #380]	@ (800210c <HAL_RCC_OscConfig+0x470>)
 8001f90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f92:	4a5e      	ldr	r2, [pc, #376]	@ (800210c <HAL_RCC_OscConfig+0x470>)
 8001f94:	f043 0304 	orr.w	r3, r3, #4
 8001f98:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f9a:	4b5c      	ldr	r3, [pc, #368]	@ (800210c <HAL_RCC_OscConfig+0x470>)
 8001f9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f9e:	4a5b      	ldr	r2, [pc, #364]	@ (800210c <HAL_RCC_OscConfig+0x470>)
 8001fa0:	f043 0301 	orr.w	r3, r3, #1
 8001fa4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fa6:	e00b      	b.n	8001fc0 <HAL_RCC_OscConfig+0x324>
 8001fa8:	4b58      	ldr	r3, [pc, #352]	@ (800210c <HAL_RCC_OscConfig+0x470>)
 8001faa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fac:	4a57      	ldr	r2, [pc, #348]	@ (800210c <HAL_RCC_OscConfig+0x470>)
 8001fae:	f023 0301 	bic.w	r3, r3, #1
 8001fb2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fb4:	4b55      	ldr	r3, [pc, #340]	@ (800210c <HAL_RCC_OscConfig+0x470>)
 8001fb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fb8:	4a54      	ldr	r2, [pc, #336]	@ (800210c <HAL_RCC_OscConfig+0x470>)
 8001fba:	f023 0304 	bic.w	r3, r3, #4
 8001fbe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d015      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fc8:	f7ff fb9c 	bl	8001704 <HAL_GetTick>
 8001fcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fce:	e00a      	b.n	8001fe6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fd0:	f7ff fb98 	bl	8001704 <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d901      	bls.n	8001fe6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e0cb      	b.n	800217e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fe6:	4b49      	ldr	r3, [pc, #292]	@ (800210c <HAL_RCC_OscConfig+0x470>)
 8001fe8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fea:	f003 0302 	and.w	r3, r3, #2
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d0ee      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x334>
 8001ff2:	e014      	b.n	800201e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ff4:	f7ff fb86 	bl	8001704 <HAL_GetTick>
 8001ff8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ffa:	e00a      	b.n	8002012 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ffc:	f7ff fb82 	bl	8001704 <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	f241 3288 	movw	r2, #5000	@ 0x1388
 800200a:	4293      	cmp	r3, r2
 800200c:	d901      	bls.n	8002012 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e0b5      	b.n	800217e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002012:	4b3e      	ldr	r3, [pc, #248]	@ (800210c <HAL_RCC_OscConfig+0x470>)
 8002014:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002016:	f003 0302 	and.w	r3, r3, #2
 800201a:	2b00      	cmp	r3, #0
 800201c:	d1ee      	bne.n	8001ffc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800201e:	7dfb      	ldrb	r3, [r7, #23]
 8002020:	2b01      	cmp	r3, #1
 8002022:	d105      	bne.n	8002030 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002024:	4b39      	ldr	r3, [pc, #228]	@ (800210c <HAL_RCC_OscConfig+0x470>)
 8002026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002028:	4a38      	ldr	r2, [pc, #224]	@ (800210c <HAL_RCC_OscConfig+0x470>)
 800202a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800202e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	699b      	ldr	r3, [r3, #24]
 8002034:	2b00      	cmp	r3, #0
 8002036:	f000 80a1 	beq.w	800217c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800203a:	4b34      	ldr	r3, [pc, #208]	@ (800210c <HAL_RCC_OscConfig+0x470>)
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	f003 030c 	and.w	r3, r3, #12
 8002042:	2b08      	cmp	r3, #8
 8002044:	d05c      	beq.n	8002100 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	699b      	ldr	r3, [r3, #24]
 800204a:	2b02      	cmp	r3, #2
 800204c:	d141      	bne.n	80020d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800204e:	4b31      	ldr	r3, [pc, #196]	@ (8002114 <HAL_RCC_OscConfig+0x478>)
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002054:	f7ff fb56 	bl	8001704 <HAL_GetTick>
 8002058:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800205a:	e008      	b.n	800206e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800205c:	f7ff fb52 	bl	8001704 <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b02      	cmp	r3, #2
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e087      	b.n	800217e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800206e:	4b27      	ldr	r3, [pc, #156]	@ (800210c <HAL_RCC_OscConfig+0x470>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d1f0      	bne.n	800205c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	69da      	ldr	r2, [r3, #28]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6a1b      	ldr	r3, [r3, #32]
 8002082:	431a      	orrs	r2, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002088:	019b      	lsls	r3, r3, #6
 800208a:	431a      	orrs	r2, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002090:	085b      	lsrs	r3, r3, #1
 8002092:	3b01      	subs	r3, #1
 8002094:	041b      	lsls	r3, r3, #16
 8002096:	431a      	orrs	r2, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800209c:	061b      	lsls	r3, r3, #24
 800209e:	491b      	ldr	r1, [pc, #108]	@ (800210c <HAL_RCC_OscConfig+0x470>)
 80020a0:	4313      	orrs	r3, r2
 80020a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002114 <HAL_RCC_OscConfig+0x478>)
 80020a6:	2201      	movs	r2, #1
 80020a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020aa:	f7ff fb2b 	bl	8001704 <HAL_GetTick>
 80020ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020b0:	e008      	b.n	80020c4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020b2:	f7ff fb27 	bl	8001704 <HAL_GetTick>
 80020b6:	4602      	mov	r2, r0
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d901      	bls.n	80020c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e05c      	b.n	800217e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020c4:	4b11      	ldr	r3, [pc, #68]	@ (800210c <HAL_RCC_OscConfig+0x470>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d0f0      	beq.n	80020b2 <HAL_RCC_OscConfig+0x416>
 80020d0:	e054      	b.n	800217c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020d2:	4b10      	ldr	r3, [pc, #64]	@ (8002114 <HAL_RCC_OscConfig+0x478>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d8:	f7ff fb14 	bl	8001704 <HAL_GetTick>
 80020dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020de:	e008      	b.n	80020f2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020e0:	f7ff fb10 	bl	8001704 <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e045      	b.n	800217e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020f2:	4b06      	ldr	r3, [pc, #24]	@ (800210c <HAL_RCC_OscConfig+0x470>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d1f0      	bne.n	80020e0 <HAL_RCC_OscConfig+0x444>
 80020fe:	e03d      	b.n	800217c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	699b      	ldr	r3, [r3, #24]
 8002104:	2b01      	cmp	r3, #1
 8002106:	d107      	bne.n	8002118 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e038      	b.n	800217e <HAL_RCC_OscConfig+0x4e2>
 800210c:	40023800 	.word	0x40023800
 8002110:	40007000 	.word	0x40007000
 8002114:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002118:	4b1b      	ldr	r3, [pc, #108]	@ (8002188 <HAL_RCC_OscConfig+0x4ec>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	699b      	ldr	r3, [r3, #24]
 8002122:	2b01      	cmp	r3, #1
 8002124:	d028      	beq.n	8002178 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002130:	429a      	cmp	r2, r3
 8002132:	d121      	bne.n	8002178 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800213e:	429a      	cmp	r2, r3
 8002140:	d11a      	bne.n	8002178 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002142:	68fa      	ldr	r2, [r7, #12]
 8002144:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002148:	4013      	ands	r3, r2
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800214e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002150:	4293      	cmp	r3, r2
 8002152:	d111      	bne.n	8002178 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800215e:	085b      	lsrs	r3, r3, #1
 8002160:	3b01      	subs	r3, #1
 8002162:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002164:	429a      	cmp	r2, r3
 8002166:	d107      	bne.n	8002178 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002172:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002174:	429a      	cmp	r2, r3
 8002176:	d001      	beq.n	800217c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e000      	b.n	800217e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800217c:	2300      	movs	r3, #0
}
 800217e:	4618      	mov	r0, r3
 8002180:	3718      	adds	r7, #24
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	40023800 	.word	0x40023800

0800218c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d101      	bne.n	80021a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e0cc      	b.n	800233a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021a0:	4b68      	ldr	r3, [pc, #416]	@ (8002344 <HAL_RCC_ClockConfig+0x1b8>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0307 	and.w	r3, r3, #7
 80021a8:	683a      	ldr	r2, [r7, #0]
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d90c      	bls.n	80021c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ae:	4b65      	ldr	r3, [pc, #404]	@ (8002344 <HAL_RCC_ClockConfig+0x1b8>)
 80021b0:	683a      	ldr	r2, [r7, #0]
 80021b2:	b2d2      	uxtb	r2, r2
 80021b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021b6:	4b63      	ldr	r3, [pc, #396]	@ (8002344 <HAL_RCC_ClockConfig+0x1b8>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0307 	and.w	r3, r3, #7
 80021be:	683a      	ldr	r2, [r7, #0]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d001      	beq.n	80021c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e0b8      	b.n	800233a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0302 	and.w	r3, r3, #2
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d020      	beq.n	8002216 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0304 	and.w	r3, r3, #4
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d005      	beq.n	80021ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021e0:	4b59      	ldr	r3, [pc, #356]	@ (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	4a58      	ldr	r2, [pc, #352]	@ (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 80021e6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80021ea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0308 	and.w	r3, r3, #8
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d005      	beq.n	8002204 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021f8:	4b53      	ldr	r3, [pc, #332]	@ (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	4a52      	ldr	r2, [pc, #328]	@ (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 80021fe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002202:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002204:	4b50      	ldr	r3, [pc, #320]	@ (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	494d      	ldr	r1, [pc, #308]	@ (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 8002212:	4313      	orrs	r3, r2
 8002214:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0301 	and.w	r3, r3, #1
 800221e:	2b00      	cmp	r3, #0
 8002220:	d044      	beq.n	80022ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	2b01      	cmp	r3, #1
 8002228:	d107      	bne.n	800223a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800222a:	4b47      	ldr	r3, [pc, #284]	@ (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d119      	bne.n	800226a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e07f      	b.n	800233a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	2b02      	cmp	r3, #2
 8002240:	d003      	beq.n	800224a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002246:	2b03      	cmp	r3, #3
 8002248:	d107      	bne.n	800225a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800224a:	4b3f      	ldr	r3, [pc, #252]	@ (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d109      	bne.n	800226a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e06f      	b.n	800233a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800225a:	4b3b      	ldr	r3, [pc, #236]	@ (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	2b00      	cmp	r3, #0
 8002264:	d101      	bne.n	800226a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e067      	b.n	800233a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800226a:	4b37      	ldr	r3, [pc, #220]	@ (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	f023 0203 	bic.w	r2, r3, #3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	4934      	ldr	r1, [pc, #208]	@ (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 8002278:	4313      	orrs	r3, r2
 800227a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800227c:	f7ff fa42 	bl	8001704 <HAL_GetTick>
 8002280:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002282:	e00a      	b.n	800229a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002284:	f7ff fa3e 	bl	8001704 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002292:	4293      	cmp	r3, r2
 8002294:	d901      	bls.n	800229a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e04f      	b.n	800233a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800229a:	4b2b      	ldr	r3, [pc, #172]	@ (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	f003 020c 	and.w	r2, r3, #12
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d1eb      	bne.n	8002284 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022ac:	4b25      	ldr	r3, [pc, #148]	@ (8002344 <HAL_RCC_ClockConfig+0x1b8>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0307 	and.w	r3, r3, #7
 80022b4:	683a      	ldr	r2, [r7, #0]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d20c      	bcs.n	80022d4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ba:	4b22      	ldr	r3, [pc, #136]	@ (8002344 <HAL_RCC_ClockConfig+0x1b8>)
 80022bc:	683a      	ldr	r2, [r7, #0]
 80022be:	b2d2      	uxtb	r2, r2
 80022c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022c2:	4b20      	ldr	r3, [pc, #128]	@ (8002344 <HAL_RCC_ClockConfig+0x1b8>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0307 	and.w	r3, r3, #7
 80022ca:	683a      	ldr	r2, [r7, #0]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d001      	beq.n	80022d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e032      	b.n	800233a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0304 	and.w	r3, r3, #4
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d008      	beq.n	80022f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022e0:	4b19      	ldr	r3, [pc, #100]	@ (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	4916      	ldr	r1, [pc, #88]	@ (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 80022ee:	4313      	orrs	r3, r2
 80022f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0308 	and.w	r3, r3, #8
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d009      	beq.n	8002312 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022fe:	4b12      	ldr	r3, [pc, #72]	@ (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	00db      	lsls	r3, r3, #3
 800230c:	490e      	ldr	r1, [pc, #56]	@ (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 800230e:	4313      	orrs	r3, r2
 8002310:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002312:	f000 f821 	bl	8002358 <HAL_RCC_GetSysClockFreq>
 8002316:	4602      	mov	r2, r0
 8002318:	4b0b      	ldr	r3, [pc, #44]	@ (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	091b      	lsrs	r3, r3, #4
 800231e:	f003 030f 	and.w	r3, r3, #15
 8002322:	490a      	ldr	r1, [pc, #40]	@ (800234c <HAL_RCC_ClockConfig+0x1c0>)
 8002324:	5ccb      	ldrb	r3, [r1, r3]
 8002326:	fa22 f303 	lsr.w	r3, r2, r3
 800232a:	4a09      	ldr	r2, [pc, #36]	@ (8002350 <HAL_RCC_ClockConfig+0x1c4>)
 800232c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800232e:	4b09      	ldr	r3, [pc, #36]	@ (8002354 <HAL_RCC_ClockConfig+0x1c8>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4618      	mov	r0, r3
 8002334:	f7ff f9a2 	bl	800167c <HAL_InitTick>

  return HAL_OK;
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	3710      	adds	r7, #16
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	40023c00 	.word	0x40023c00
 8002348:	40023800 	.word	0x40023800
 800234c:	08003178 	.word	0x08003178
 8002350:	20000004 	.word	0x20000004
 8002354:	20000008 	.word	0x20000008

08002358 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002358:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800235c:	b094      	sub	sp, #80	@ 0x50
 800235e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002360:	2300      	movs	r3, #0
 8002362:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002364:	2300      	movs	r3, #0
 8002366:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002368:	2300      	movs	r3, #0
 800236a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800236c:	2300      	movs	r3, #0
 800236e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002370:	4b79      	ldr	r3, [pc, #484]	@ (8002558 <HAL_RCC_GetSysClockFreq+0x200>)
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f003 030c 	and.w	r3, r3, #12
 8002378:	2b08      	cmp	r3, #8
 800237a:	d00d      	beq.n	8002398 <HAL_RCC_GetSysClockFreq+0x40>
 800237c:	2b08      	cmp	r3, #8
 800237e:	f200 80e1 	bhi.w	8002544 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002382:	2b00      	cmp	r3, #0
 8002384:	d002      	beq.n	800238c <HAL_RCC_GetSysClockFreq+0x34>
 8002386:	2b04      	cmp	r3, #4
 8002388:	d003      	beq.n	8002392 <HAL_RCC_GetSysClockFreq+0x3a>
 800238a:	e0db      	b.n	8002544 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800238c:	4b73      	ldr	r3, [pc, #460]	@ (800255c <HAL_RCC_GetSysClockFreq+0x204>)
 800238e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002390:	e0db      	b.n	800254a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002392:	4b73      	ldr	r3, [pc, #460]	@ (8002560 <HAL_RCC_GetSysClockFreq+0x208>)
 8002394:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002396:	e0d8      	b.n	800254a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002398:	4b6f      	ldr	r3, [pc, #444]	@ (8002558 <HAL_RCC_GetSysClockFreq+0x200>)
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80023a0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023a2:	4b6d      	ldr	r3, [pc, #436]	@ (8002558 <HAL_RCC_GetSysClockFreq+0x200>)
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d063      	beq.n	8002476 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023ae:	4b6a      	ldr	r3, [pc, #424]	@ (8002558 <HAL_RCC_GetSysClockFreq+0x200>)
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	099b      	lsrs	r3, r3, #6
 80023b4:	2200      	movs	r2, #0
 80023b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80023b8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80023ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80023c2:	2300      	movs	r3, #0
 80023c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80023c6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80023ca:	4622      	mov	r2, r4
 80023cc:	462b      	mov	r3, r5
 80023ce:	f04f 0000 	mov.w	r0, #0
 80023d2:	f04f 0100 	mov.w	r1, #0
 80023d6:	0159      	lsls	r1, r3, #5
 80023d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023dc:	0150      	lsls	r0, r2, #5
 80023de:	4602      	mov	r2, r0
 80023e0:	460b      	mov	r3, r1
 80023e2:	4621      	mov	r1, r4
 80023e4:	1a51      	subs	r1, r2, r1
 80023e6:	6139      	str	r1, [r7, #16]
 80023e8:	4629      	mov	r1, r5
 80023ea:	eb63 0301 	sbc.w	r3, r3, r1
 80023ee:	617b      	str	r3, [r7, #20]
 80023f0:	f04f 0200 	mov.w	r2, #0
 80023f4:	f04f 0300 	mov.w	r3, #0
 80023f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80023fc:	4659      	mov	r1, fp
 80023fe:	018b      	lsls	r3, r1, #6
 8002400:	4651      	mov	r1, sl
 8002402:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002406:	4651      	mov	r1, sl
 8002408:	018a      	lsls	r2, r1, #6
 800240a:	4651      	mov	r1, sl
 800240c:	ebb2 0801 	subs.w	r8, r2, r1
 8002410:	4659      	mov	r1, fp
 8002412:	eb63 0901 	sbc.w	r9, r3, r1
 8002416:	f04f 0200 	mov.w	r2, #0
 800241a:	f04f 0300 	mov.w	r3, #0
 800241e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002422:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002426:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800242a:	4690      	mov	r8, r2
 800242c:	4699      	mov	r9, r3
 800242e:	4623      	mov	r3, r4
 8002430:	eb18 0303 	adds.w	r3, r8, r3
 8002434:	60bb      	str	r3, [r7, #8]
 8002436:	462b      	mov	r3, r5
 8002438:	eb49 0303 	adc.w	r3, r9, r3
 800243c:	60fb      	str	r3, [r7, #12]
 800243e:	f04f 0200 	mov.w	r2, #0
 8002442:	f04f 0300 	mov.w	r3, #0
 8002446:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800244a:	4629      	mov	r1, r5
 800244c:	024b      	lsls	r3, r1, #9
 800244e:	4621      	mov	r1, r4
 8002450:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002454:	4621      	mov	r1, r4
 8002456:	024a      	lsls	r2, r1, #9
 8002458:	4610      	mov	r0, r2
 800245a:	4619      	mov	r1, r3
 800245c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800245e:	2200      	movs	r2, #0
 8002460:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002462:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002464:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002468:	f7fe f9e4 	bl	8000834 <__aeabi_uldivmod>
 800246c:	4602      	mov	r2, r0
 800246e:	460b      	mov	r3, r1
 8002470:	4613      	mov	r3, r2
 8002472:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002474:	e058      	b.n	8002528 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002476:	4b38      	ldr	r3, [pc, #224]	@ (8002558 <HAL_RCC_GetSysClockFreq+0x200>)
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	099b      	lsrs	r3, r3, #6
 800247c:	2200      	movs	r2, #0
 800247e:	4618      	mov	r0, r3
 8002480:	4611      	mov	r1, r2
 8002482:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002486:	623b      	str	r3, [r7, #32]
 8002488:	2300      	movs	r3, #0
 800248a:	627b      	str	r3, [r7, #36]	@ 0x24
 800248c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002490:	4642      	mov	r2, r8
 8002492:	464b      	mov	r3, r9
 8002494:	f04f 0000 	mov.w	r0, #0
 8002498:	f04f 0100 	mov.w	r1, #0
 800249c:	0159      	lsls	r1, r3, #5
 800249e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024a2:	0150      	lsls	r0, r2, #5
 80024a4:	4602      	mov	r2, r0
 80024a6:	460b      	mov	r3, r1
 80024a8:	4641      	mov	r1, r8
 80024aa:	ebb2 0a01 	subs.w	sl, r2, r1
 80024ae:	4649      	mov	r1, r9
 80024b0:	eb63 0b01 	sbc.w	fp, r3, r1
 80024b4:	f04f 0200 	mov.w	r2, #0
 80024b8:	f04f 0300 	mov.w	r3, #0
 80024bc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80024c0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80024c4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80024c8:	ebb2 040a 	subs.w	r4, r2, sl
 80024cc:	eb63 050b 	sbc.w	r5, r3, fp
 80024d0:	f04f 0200 	mov.w	r2, #0
 80024d4:	f04f 0300 	mov.w	r3, #0
 80024d8:	00eb      	lsls	r3, r5, #3
 80024da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80024de:	00e2      	lsls	r2, r4, #3
 80024e0:	4614      	mov	r4, r2
 80024e2:	461d      	mov	r5, r3
 80024e4:	4643      	mov	r3, r8
 80024e6:	18e3      	adds	r3, r4, r3
 80024e8:	603b      	str	r3, [r7, #0]
 80024ea:	464b      	mov	r3, r9
 80024ec:	eb45 0303 	adc.w	r3, r5, r3
 80024f0:	607b      	str	r3, [r7, #4]
 80024f2:	f04f 0200 	mov.w	r2, #0
 80024f6:	f04f 0300 	mov.w	r3, #0
 80024fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80024fe:	4629      	mov	r1, r5
 8002500:	028b      	lsls	r3, r1, #10
 8002502:	4621      	mov	r1, r4
 8002504:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002508:	4621      	mov	r1, r4
 800250a:	028a      	lsls	r2, r1, #10
 800250c:	4610      	mov	r0, r2
 800250e:	4619      	mov	r1, r3
 8002510:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002512:	2200      	movs	r2, #0
 8002514:	61bb      	str	r3, [r7, #24]
 8002516:	61fa      	str	r2, [r7, #28]
 8002518:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800251c:	f7fe f98a 	bl	8000834 <__aeabi_uldivmod>
 8002520:	4602      	mov	r2, r0
 8002522:	460b      	mov	r3, r1
 8002524:	4613      	mov	r3, r2
 8002526:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002528:	4b0b      	ldr	r3, [pc, #44]	@ (8002558 <HAL_RCC_GetSysClockFreq+0x200>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	0c1b      	lsrs	r3, r3, #16
 800252e:	f003 0303 	and.w	r3, r3, #3
 8002532:	3301      	adds	r3, #1
 8002534:	005b      	lsls	r3, r3, #1
 8002536:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002538:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800253a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800253c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002540:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002542:	e002      	b.n	800254a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002544:	4b05      	ldr	r3, [pc, #20]	@ (800255c <HAL_RCC_GetSysClockFreq+0x204>)
 8002546:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002548:	bf00      	nop
    }
  }
  return sysclockfreq;
 800254a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800254c:	4618      	mov	r0, r3
 800254e:	3750      	adds	r7, #80	@ 0x50
 8002550:	46bd      	mov	sp, r7
 8002552:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002556:	bf00      	nop
 8002558:	40023800 	.word	0x40023800
 800255c:	00f42400 	.word	0x00f42400
 8002560:	007a1200 	.word	0x007a1200

08002564 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d101      	bne.n	8002576 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e07b      	b.n	800266e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800257a:	2b00      	cmp	r3, #0
 800257c:	d108      	bne.n	8002590 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002586:	d009      	beq.n	800259c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	61da      	str	r2, [r3, #28]
 800258e:	e005      	b.n	800259c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2200      	movs	r2, #0
 80025a0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d106      	bne.n	80025bc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f7fe ff6a 	bl	8001490 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2202      	movs	r2, #2
 80025c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80025d2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80025e4:	431a      	orrs	r2, r3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80025ee:	431a      	orrs	r2, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	691b      	ldr	r3, [r3, #16]
 80025f4:	f003 0302 	and.w	r3, r3, #2
 80025f8:	431a      	orrs	r2, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	695b      	ldr	r3, [r3, #20]
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	431a      	orrs	r2, r3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	699b      	ldr	r3, [r3, #24]
 8002608:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800260c:	431a      	orrs	r2, r3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	69db      	ldr	r3, [r3, #28]
 8002612:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002616:	431a      	orrs	r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a1b      	ldr	r3, [r3, #32]
 800261c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002620:	ea42 0103 	orr.w	r1, r2, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002628:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	430a      	orrs	r2, r1
 8002632:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	699b      	ldr	r3, [r3, #24]
 8002638:	0c1b      	lsrs	r3, r3, #16
 800263a:	f003 0104 	and.w	r1, r3, #4
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002642:	f003 0210 	and.w	r2, r3, #16
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	430a      	orrs	r2, r1
 800264c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	69da      	ldr	r2, [r3, #28]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800265c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800266c:	2300      	movs	r3, #0
}
 800266e:	4618      	mov	r0, r3
 8002670:	3708      	adds	r7, #8
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002676:	b580      	push	{r7, lr}
 8002678:	b088      	sub	sp, #32
 800267a:	af00      	add	r7, sp, #0
 800267c:	60f8      	str	r0, [r7, #12]
 800267e:	60b9      	str	r1, [r7, #8]
 8002680:	603b      	str	r3, [r7, #0]
 8002682:	4613      	mov	r3, r2
 8002684:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002686:	f7ff f83d 	bl	8001704 <HAL_GetTick>
 800268a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800268c:	88fb      	ldrh	r3, [r7, #6]
 800268e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002696:	b2db      	uxtb	r3, r3
 8002698:	2b01      	cmp	r3, #1
 800269a:	d001      	beq.n	80026a0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800269c:	2302      	movs	r3, #2
 800269e:	e12a      	b.n	80028f6 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d002      	beq.n	80026ac <HAL_SPI_Transmit+0x36>
 80026a6:	88fb      	ldrh	r3, [r7, #6]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d101      	bne.n	80026b0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e122      	b.n	80028f6 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d101      	bne.n	80026be <HAL_SPI_Transmit+0x48>
 80026ba:	2302      	movs	r3, #2
 80026bc:	e11b      	b.n	80028f6 <HAL_SPI_Transmit+0x280>
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2201      	movs	r2, #1
 80026c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2203      	movs	r2, #3
 80026ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2200      	movs	r2, #0
 80026d2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	68ba      	ldr	r2, [r7, #8]
 80026d8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	88fa      	ldrh	r2, [r7, #6]
 80026de:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	88fa      	ldrh	r2, [r7, #6]
 80026e4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2200      	movs	r2, #0
 80026ea:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2200      	movs	r2, #0
 80026f0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2200      	movs	r2, #0
 80026f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2200      	movs	r2, #0
 80026fc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2200      	movs	r2, #0
 8002702:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800270c:	d10f      	bne.n	800272e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800271c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800272c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002738:	2b40      	cmp	r3, #64	@ 0x40
 800273a:	d007      	beq.n	800274c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800274a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002754:	d152      	bne.n	80027fc <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d002      	beq.n	8002764 <HAL_SPI_Transmit+0xee>
 800275e:	8b7b      	ldrh	r3, [r7, #26]
 8002760:	2b01      	cmp	r3, #1
 8002762:	d145      	bne.n	80027f0 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002768:	881a      	ldrh	r2, [r3, #0]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002774:	1c9a      	adds	r2, r3, #2
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800277e:	b29b      	uxth	r3, r3
 8002780:	3b01      	subs	r3, #1
 8002782:	b29a      	uxth	r2, r3
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002788:	e032      	b.n	80027f0 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	f003 0302 	and.w	r3, r3, #2
 8002794:	2b02      	cmp	r3, #2
 8002796:	d112      	bne.n	80027be <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800279c:	881a      	ldrh	r2, [r3, #0]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027a8:	1c9a      	adds	r2, r3, #2
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	3b01      	subs	r3, #1
 80027b6:	b29a      	uxth	r2, r3
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	86da      	strh	r2, [r3, #54]	@ 0x36
 80027bc:	e018      	b.n	80027f0 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80027be:	f7fe ffa1 	bl	8001704 <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	683a      	ldr	r2, [r7, #0]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d803      	bhi.n	80027d6 <HAL_SPI_Transmit+0x160>
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80027d4:	d102      	bne.n	80027dc <HAL_SPI_Transmit+0x166>
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d109      	bne.n	80027f0 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2200      	movs	r2, #0
 80027e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	e082      	b.n	80028f6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d1c7      	bne.n	800278a <HAL_SPI_Transmit+0x114>
 80027fa:	e053      	b.n	80028a4 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d002      	beq.n	800280a <HAL_SPI_Transmit+0x194>
 8002804:	8b7b      	ldrh	r3, [r7, #26]
 8002806:	2b01      	cmp	r3, #1
 8002808:	d147      	bne.n	800289a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	330c      	adds	r3, #12
 8002814:	7812      	ldrb	r2, [r2, #0]
 8002816:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800281c:	1c5a      	adds	r2, r3, #1
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002826:	b29b      	uxth	r3, r3
 8002828:	3b01      	subs	r3, #1
 800282a:	b29a      	uxth	r2, r3
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002830:	e033      	b.n	800289a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f003 0302 	and.w	r3, r3, #2
 800283c:	2b02      	cmp	r3, #2
 800283e:	d113      	bne.n	8002868 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	330c      	adds	r3, #12
 800284a:	7812      	ldrb	r2, [r2, #0]
 800284c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002852:	1c5a      	adds	r2, r3, #1
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800285c:	b29b      	uxth	r3, r3
 800285e:	3b01      	subs	r3, #1
 8002860:	b29a      	uxth	r2, r3
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002866:	e018      	b.n	800289a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002868:	f7fe ff4c 	bl	8001704 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	683a      	ldr	r2, [r7, #0]
 8002874:	429a      	cmp	r2, r3
 8002876:	d803      	bhi.n	8002880 <HAL_SPI_Transmit+0x20a>
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800287e:	d102      	bne.n	8002886 <HAL_SPI_Transmit+0x210>
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d109      	bne.n	800289a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2201      	movs	r2, #1
 800288a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2200      	movs	r2, #0
 8002892:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e02d      	b.n	80028f6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800289e:	b29b      	uxth	r3, r3
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d1c6      	bne.n	8002832 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80028a4:	69fa      	ldr	r2, [r7, #28]
 80028a6:	6839      	ldr	r1, [r7, #0]
 80028a8:	68f8      	ldr	r0, [r7, #12]
 80028aa:	f000 fbd9 	bl	8003060 <SPI_EndRxTxTransaction>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d002      	beq.n	80028ba <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2220      	movs	r2, #32
 80028b8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d10a      	bne.n	80028d8 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80028c2:	2300      	movs	r3, #0
 80028c4:	617b      	str	r3, [r7, #20]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	617b      	str	r3, [r7, #20]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	617b      	str	r3, [r7, #20]
 80028d6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2200      	movs	r2, #0
 80028e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d001      	beq.n	80028f4 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e000      	b.n	80028f6 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80028f4:	2300      	movs	r3, #0
  }
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3720      	adds	r7, #32
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}

080028fe <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028fe:	b580      	push	{r7, lr}
 8002900:	b088      	sub	sp, #32
 8002902:	af02      	add	r7, sp, #8
 8002904:	60f8      	str	r0, [r7, #12]
 8002906:	60b9      	str	r1, [r7, #8]
 8002908:	603b      	str	r3, [r7, #0]
 800290a:	4613      	mov	r3, r2
 800290c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002914:	b2db      	uxtb	r3, r3
 8002916:	2b01      	cmp	r3, #1
 8002918:	d001      	beq.n	800291e <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800291a:	2302      	movs	r3, #2
 800291c:	e104      	b.n	8002b28 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002926:	d112      	bne.n	800294e <HAL_SPI_Receive+0x50>
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d10e      	bne.n	800294e <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2204      	movs	r2, #4
 8002934:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002938:	88fa      	ldrh	r2, [r7, #6]
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	9300      	str	r3, [sp, #0]
 800293e:	4613      	mov	r3, r2
 8002940:	68ba      	ldr	r2, [r7, #8]
 8002942:	68b9      	ldr	r1, [r7, #8]
 8002944:	68f8      	ldr	r0, [r7, #12]
 8002946:	f000 f8f3 	bl	8002b30 <HAL_SPI_TransmitReceive>
 800294a:	4603      	mov	r3, r0
 800294c:	e0ec      	b.n	8002b28 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800294e:	f7fe fed9 	bl	8001704 <HAL_GetTick>
 8002952:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d002      	beq.n	8002960 <HAL_SPI_Receive+0x62>
 800295a:	88fb      	ldrh	r3, [r7, #6]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d101      	bne.n	8002964 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e0e1      	b.n	8002b28 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800296a:	2b01      	cmp	r3, #1
 800296c:	d101      	bne.n	8002972 <HAL_SPI_Receive+0x74>
 800296e:	2302      	movs	r3, #2
 8002970:	e0da      	b.n	8002b28 <HAL_SPI_Receive+0x22a>
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2201      	movs	r2, #1
 8002976:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2204      	movs	r2, #4
 800297e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2200      	movs	r2, #0
 8002986:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	68ba      	ldr	r2, [r7, #8]
 800298c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	88fa      	ldrh	r2, [r7, #6]
 8002992:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	88fa      	ldrh	r2, [r7, #6]
 8002998:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2200      	movs	r2, #0
 800299e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2200      	movs	r2, #0
 80029a4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2200      	movs	r2, #0
 80029aa:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2200      	movs	r2, #0
 80029b0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2200      	movs	r2, #0
 80029b6:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80029c0:	d10f      	bne.n	80029e2 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80029d0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80029e0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029ec:	2b40      	cmp	r3, #64	@ 0x40
 80029ee:	d007      	beq.n	8002a00 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80029fe:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d170      	bne.n	8002aea <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002a08:	e035      	b.n	8002a76 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	f003 0301 	and.w	r3, r3, #1
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d115      	bne.n	8002a44 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f103 020c 	add.w	r2, r3, #12
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a24:	7812      	ldrb	r2, [r2, #0]
 8002a26:	b2d2      	uxtb	r2, r2
 8002a28:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a2e:	1c5a      	adds	r2, r3, #1
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	3b01      	subs	r3, #1
 8002a3c:	b29a      	uxth	r2, r3
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002a42:	e018      	b.n	8002a76 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a44:	f7fe fe5e 	bl	8001704 <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	683a      	ldr	r2, [r7, #0]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d803      	bhi.n	8002a5c <HAL_SPI_Receive+0x15e>
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002a5a:	d102      	bne.n	8002a62 <HAL_SPI_Receive+0x164>
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d109      	bne.n	8002a76 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2201      	movs	r2, #1
 8002a66:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e058      	b.n	8002b28 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d1c4      	bne.n	8002a0a <HAL_SPI_Receive+0x10c>
 8002a80:	e038      	b.n	8002af4 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	f003 0301 	and.w	r3, r3, #1
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d113      	bne.n	8002ab8 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	68da      	ldr	r2, [r3, #12]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a9a:	b292      	uxth	r2, r2
 8002a9c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002aa2:	1c9a      	adds	r2, r3, #2
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	3b01      	subs	r3, #1
 8002ab0:	b29a      	uxth	r2, r3
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002ab6:	e018      	b.n	8002aea <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ab8:	f7fe fe24 	bl	8001704 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	683a      	ldr	r2, [r7, #0]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d803      	bhi.n	8002ad0 <HAL_SPI_Receive+0x1d2>
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002ace:	d102      	bne.n	8002ad6 <HAL_SPI_Receive+0x1d8>
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d109      	bne.n	8002aea <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2201      	movs	r2, #1
 8002ada:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e01e      	b.n	8002b28 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d1c6      	bne.n	8002a82 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002af4:	697a      	ldr	r2, [r7, #20]
 8002af6:	6839      	ldr	r1, [r7, #0]
 8002af8:	68f8      	ldr	r0, [r7, #12]
 8002afa:	f000 fa4b 	bl	8002f94 <SPI_EndRxTransaction>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d002      	beq.n	8002b0a <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2220      	movs	r2, #32
 8002b08:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2200      	movs	r2, #0
 8002b16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d001      	beq.n	8002b26 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e000      	b.n	8002b28 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8002b26:	2300      	movs	r3, #0
  }
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3718      	adds	r7, #24
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b08a      	sub	sp, #40	@ 0x28
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	607a      	str	r2, [r7, #4]
 8002b3c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b42:	f7fe fddf 	bl	8001704 <HAL_GetTick>
 8002b46:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002b4e:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002b56:	887b      	ldrh	r3, [r7, #2]
 8002b58:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002b5a:	7ffb      	ldrb	r3, [r7, #31]
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d00c      	beq.n	8002b7a <HAL_SPI_TransmitReceive+0x4a>
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002b66:	d106      	bne.n	8002b76 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d102      	bne.n	8002b76 <HAL_SPI_TransmitReceive+0x46>
 8002b70:	7ffb      	ldrb	r3, [r7, #31]
 8002b72:	2b04      	cmp	r3, #4
 8002b74:	d001      	beq.n	8002b7a <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8002b76:	2302      	movs	r3, #2
 8002b78:	e17f      	b.n	8002e7a <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d005      	beq.n	8002b8c <HAL_SPI_TransmitReceive+0x5c>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d002      	beq.n	8002b8c <HAL_SPI_TransmitReceive+0x5c>
 8002b86:	887b      	ldrh	r3, [r7, #2]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d101      	bne.n	8002b90 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e174      	b.n	8002e7a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d101      	bne.n	8002b9e <HAL_SPI_TransmitReceive+0x6e>
 8002b9a:	2302      	movs	r3, #2
 8002b9c:	e16d      	b.n	8002e7a <HAL_SPI_TransmitReceive+0x34a>
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	2b04      	cmp	r3, #4
 8002bb0:	d003      	beq.n	8002bba <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2205      	movs	r2, #5
 8002bb6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	887a      	ldrh	r2, [r7, #2]
 8002bca:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	887a      	ldrh	r2, [r7, #2]
 8002bd0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	68ba      	ldr	r2, [r7, #8]
 8002bd6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	887a      	ldrh	r2, [r7, #2]
 8002bdc:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	887a      	ldrh	r2, [r7, #2]
 8002be2:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2200      	movs	r2, #0
 8002be8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2200      	movs	r2, #0
 8002bee:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bfa:	2b40      	cmp	r3, #64	@ 0x40
 8002bfc:	d007      	beq.n	8002c0e <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002c0c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002c16:	d17e      	bne.n	8002d16 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d002      	beq.n	8002c26 <HAL_SPI_TransmitReceive+0xf6>
 8002c20:	8afb      	ldrh	r3, [r7, #22]
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d16c      	bne.n	8002d00 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c2a:	881a      	ldrh	r2, [r3, #0]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c36:	1c9a      	adds	r2, r3, #2
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	3b01      	subs	r3, #1
 8002c44:	b29a      	uxth	r2, r3
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c4a:	e059      	b.n	8002d00 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d11b      	bne.n	8002c92 <HAL_SPI_TransmitReceive+0x162>
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d016      	beq.n	8002c92 <HAL_SPI_TransmitReceive+0x162>
 8002c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d113      	bne.n	8002c92 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c6e:	881a      	ldrh	r2, [r3, #0]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c7a:	1c9a      	adds	r2, r3, #2
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	3b01      	subs	r3, #1
 8002c88:	b29a      	uxth	r2, r3
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	f003 0301 	and.w	r3, r3, #1
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d119      	bne.n	8002cd4 <HAL_SPI_TransmitReceive+0x1a4>
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d014      	beq.n	8002cd4 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	68da      	ldr	r2, [r3, #12]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cb4:	b292      	uxth	r2, r2
 8002cb6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cbc:	1c9a      	adds	r2, r3, #2
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	3b01      	subs	r3, #1
 8002cca:	b29a      	uxth	r2, r3
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002cd4:	f7fe fd16 	bl	8001704 <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	6a3b      	ldr	r3, [r7, #32]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d80d      	bhi.n	8002d00 <HAL_SPI_TransmitReceive+0x1d0>
 8002ce4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ce6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002cea:	d009      	beq.n	8002d00 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	e0bc      	b.n	8002e7a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d1a0      	bne.n	8002c4c <HAL_SPI_TransmitReceive+0x11c>
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d19b      	bne.n	8002c4c <HAL_SPI_TransmitReceive+0x11c>
 8002d14:	e082      	b.n	8002e1c <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d002      	beq.n	8002d24 <HAL_SPI_TransmitReceive+0x1f4>
 8002d1e:	8afb      	ldrh	r3, [r7, #22]
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d171      	bne.n	8002e08 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	330c      	adds	r3, #12
 8002d2e:	7812      	ldrb	r2, [r2, #0]
 8002d30:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d36:	1c5a      	adds	r2, r3, #1
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	3b01      	subs	r3, #1
 8002d44:	b29a      	uxth	r2, r3
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d4a:	e05d      	b.n	8002e08 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f003 0302 	and.w	r3, r3, #2
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d11c      	bne.n	8002d94 <HAL_SPI_TransmitReceive+0x264>
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d017      	beq.n	8002d94 <HAL_SPI_TransmitReceive+0x264>
 8002d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d114      	bne.n	8002d94 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	330c      	adds	r3, #12
 8002d74:	7812      	ldrb	r2, [r2, #0]
 8002d76:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d7c:	1c5a      	adds	r2, r3, #1
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	3b01      	subs	r3, #1
 8002d8a:	b29a      	uxth	r2, r3
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002d90:	2300      	movs	r3, #0
 8002d92:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f003 0301 	and.w	r3, r3, #1
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d119      	bne.n	8002dd6 <HAL_SPI_TransmitReceive+0x2a6>
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d014      	beq.n	8002dd6 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	68da      	ldr	r2, [r3, #12]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002db6:	b2d2      	uxtb	r2, r2
 8002db8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dbe:	1c5a      	adds	r2, r3, #1
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	3b01      	subs	r3, #1
 8002dcc:	b29a      	uxth	r2, r3
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002dd6:	f7fe fc95 	bl	8001704 <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	6a3b      	ldr	r3, [r7, #32]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d803      	bhi.n	8002dee <HAL_SPI_TransmitReceive+0x2be>
 8002de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002de8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002dec:	d102      	bne.n	8002df4 <HAL_SPI_TransmitReceive+0x2c4>
 8002dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d109      	bne.n	8002e08 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	e038      	b.n	8002e7a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d19c      	bne.n	8002d4c <HAL_SPI_TransmitReceive+0x21c>
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e16:	b29b      	uxth	r3, r3
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d197      	bne.n	8002d4c <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e1c:	6a3a      	ldr	r2, [r7, #32]
 8002e1e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002e20:	68f8      	ldr	r0, [r7, #12]
 8002e22:	f000 f91d 	bl	8003060 <SPI_EndRxTxTransaction>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d008      	beq.n	8002e3e <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2220      	movs	r2, #32
 8002e30:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2200      	movs	r2, #0
 8002e36:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e01d      	b.n	8002e7a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d10a      	bne.n	8002e5c <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e46:	2300      	movs	r3, #0
 8002e48:	613b      	str	r3, [r7, #16]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	613b      	str	r3, [r7, #16]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	613b      	str	r3, [r7, #16]
 8002e5a:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d001      	beq.n	8002e78 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e000      	b.n	8002e7a <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8002e78:	2300      	movs	r3, #0
  }
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3728      	adds	r7, #40	@ 0x28
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
	...

08002e84 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b088      	sub	sp, #32
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	60b9      	str	r1, [r7, #8]
 8002e8e:	603b      	str	r3, [r7, #0]
 8002e90:	4613      	mov	r3, r2
 8002e92:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002e94:	f7fe fc36 	bl	8001704 <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e9c:	1a9b      	subs	r3, r3, r2
 8002e9e:	683a      	ldr	r2, [r7, #0]
 8002ea0:	4413      	add	r3, r2
 8002ea2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002ea4:	f7fe fc2e 	bl	8001704 <HAL_GetTick>
 8002ea8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002eaa:	4b39      	ldr	r3, [pc, #228]	@ (8002f90 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	015b      	lsls	r3, r3, #5
 8002eb0:	0d1b      	lsrs	r3, r3, #20
 8002eb2:	69fa      	ldr	r2, [r7, #28]
 8002eb4:	fb02 f303 	mul.w	r3, r2, r3
 8002eb8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002eba:	e054      	b.n	8002f66 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002ec2:	d050      	beq.n	8002f66 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002ec4:	f7fe fc1e 	bl	8001704 <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	69fa      	ldr	r2, [r7, #28]
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d902      	bls.n	8002eda <SPI_WaitFlagStateUntilTimeout+0x56>
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d13d      	bne.n	8002f56 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	685a      	ldr	r2, [r3, #4]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002ee8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002ef2:	d111      	bne.n	8002f18 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002efc:	d004      	beq.n	8002f08 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f06:	d107      	bne.n	8002f18 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f16:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f20:	d10f      	bne.n	8002f42 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002f30:	601a      	str	r2, [r3, #0]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002f40:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2201      	movs	r2, #1
 8002f46:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e017      	b.n	8002f86 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d101      	bne.n	8002f60 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	3b01      	subs	r3, #1
 8002f64:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	689a      	ldr	r2, [r3, #8]
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	4013      	ands	r3, r2
 8002f70:	68ba      	ldr	r2, [r7, #8]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	bf0c      	ite	eq
 8002f76:	2301      	moveq	r3, #1
 8002f78:	2300      	movne	r3, #0
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	79fb      	ldrb	r3, [r7, #7]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d19b      	bne.n	8002ebc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3720      	adds	r7, #32
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	20000004 	.word	0x20000004

08002f94 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b086      	sub	sp, #24
 8002f98:	af02      	add	r7, sp, #8
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002fa8:	d111      	bne.n	8002fce <SPI_EndRxTransaction+0x3a>
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002fb2:	d004      	beq.n	8002fbe <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fbc:	d107      	bne.n	8002fce <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002fcc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002fd6:	d12a      	bne.n	800302e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fe0:	d012      	beq.n	8003008 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	9300      	str	r3, [sp, #0]
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	2180      	movs	r1, #128	@ 0x80
 8002fec:	68f8      	ldr	r0, [r7, #12]
 8002fee:	f7ff ff49 	bl	8002e84 <SPI_WaitFlagStateUntilTimeout>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d02d      	beq.n	8003054 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ffc:	f043 0220 	orr.w	r2, r3, #32
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e026      	b.n	8003056 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	9300      	str	r3, [sp, #0]
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	2200      	movs	r2, #0
 8003010:	2101      	movs	r1, #1
 8003012:	68f8      	ldr	r0, [r7, #12]
 8003014:	f7ff ff36 	bl	8002e84 <SPI_WaitFlagStateUntilTimeout>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d01a      	beq.n	8003054 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003022:	f043 0220 	orr.w	r2, r3, #32
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e013      	b.n	8003056 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	9300      	str	r3, [sp, #0]
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	2200      	movs	r2, #0
 8003036:	2101      	movs	r1, #1
 8003038:	68f8      	ldr	r0, [r7, #12]
 800303a:	f7ff ff23 	bl	8002e84 <SPI_WaitFlagStateUntilTimeout>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d007      	beq.n	8003054 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003048:	f043 0220 	orr.w	r2, r3, #32
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003050:	2303      	movs	r3, #3
 8003052:	e000      	b.n	8003056 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003054:	2300      	movs	r3, #0
}
 8003056:	4618      	mov	r0, r3
 8003058:	3710      	adds	r7, #16
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
	...

08003060 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b088      	sub	sp, #32
 8003064:	af02      	add	r7, sp, #8
 8003066:	60f8      	str	r0, [r7, #12]
 8003068:	60b9      	str	r1, [r7, #8]
 800306a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	9300      	str	r3, [sp, #0]
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	2201      	movs	r2, #1
 8003074:	2102      	movs	r1, #2
 8003076:	68f8      	ldr	r0, [r7, #12]
 8003078:	f7ff ff04 	bl	8002e84 <SPI_WaitFlagStateUntilTimeout>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d007      	beq.n	8003092 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003086:	f043 0220 	orr.w	r2, r3, #32
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e032      	b.n	80030f8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003092:	4b1b      	ldr	r3, [pc, #108]	@ (8003100 <SPI_EndRxTxTransaction+0xa0>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a1b      	ldr	r2, [pc, #108]	@ (8003104 <SPI_EndRxTxTransaction+0xa4>)
 8003098:	fba2 2303 	umull	r2, r3, r2, r3
 800309c:	0d5b      	lsrs	r3, r3, #21
 800309e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80030a2:	fb02 f303 	mul.w	r3, r2, r3
 80030a6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80030b0:	d112      	bne.n	80030d8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	9300      	str	r3, [sp, #0]
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	2200      	movs	r2, #0
 80030ba:	2180      	movs	r1, #128	@ 0x80
 80030bc:	68f8      	ldr	r0, [r7, #12]
 80030be:	f7ff fee1 	bl	8002e84 <SPI_WaitFlagStateUntilTimeout>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d016      	beq.n	80030f6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030cc:	f043 0220 	orr.w	r2, r3, #32
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	e00f      	b.n	80030f8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d00a      	beq.n	80030f4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	3b01      	subs	r3, #1
 80030e2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030ee:	2b80      	cmp	r3, #128	@ 0x80
 80030f0:	d0f2      	beq.n	80030d8 <SPI_EndRxTxTransaction+0x78>
 80030f2:	e000      	b.n	80030f6 <SPI_EndRxTxTransaction+0x96>
        break;
 80030f4:	bf00      	nop
  }

  return HAL_OK;
 80030f6:	2300      	movs	r3, #0
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3718      	adds	r7, #24
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	20000004 	.word	0x20000004
 8003104:	165e9f81 	.word	0x165e9f81

08003108 <memset>:
 8003108:	4402      	add	r2, r0
 800310a:	4603      	mov	r3, r0
 800310c:	4293      	cmp	r3, r2
 800310e:	d100      	bne.n	8003112 <memset+0xa>
 8003110:	4770      	bx	lr
 8003112:	f803 1b01 	strb.w	r1, [r3], #1
 8003116:	e7f9      	b.n	800310c <memset+0x4>

08003118 <__libc_init_array>:
 8003118:	b570      	push	{r4, r5, r6, lr}
 800311a:	4d0d      	ldr	r5, [pc, #52]	@ (8003150 <__libc_init_array+0x38>)
 800311c:	4c0d      	ldr	r4, [pc, #52]	@ (8003154 <__libc_init_array+0x3c>)
 800311e:	1b64      	subs	r4, r4, r5
 8003120:	10a4      	asrs	r4, r4, #2
 8003122:	2600      	movs	r6, #0
 8003124:	42a6      	cmp	r6, r4
 8003126:	d109      	bne.n	800313c <__libc_init_array+0x24>
 8003128:	4d0b      	ldr	r5, [pc, #44]	@ (8003158 <__libc_init_array+0x40>)
 800312a:	4c0c      	ldr	r4, [pc, #48]	@ (800315c <__libc_init_array+0x44>)
 800312c:	f000 f818 	bl	8003160 <_init>
 8003130:	1b64      	subs	r4, r4, r5
 8003132:	10a4      	asrs	r4, r4, #2
 8003134:	2600      	movs	r6, #0
 8003136:	42a6      	cmp	r6, r4
 8003138:	d105      	bne.n	8003146 <__libc_init_array+0x2e>
 800313a:	bd70      	pop	{r4, r5, r6, pc}
 800313c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003140:	4798      	blx	r3
 8003142:	3601      	adds	r6, #1
 8003144:	e7ee      	b.n	8003124 <__libc_init_array+0xc>
 8003146:	f855 3b04 	ldr.w	r3, [r5], #4
 800314a:	4798      	blx	r3
 800314c:	3601      	adds	r6, #1
 800314e:	e7f2      	b.n	8003136 <__libc_init_array+0x1e>
 8003150:	08003190 	.word	0x08003190
 8003154:	08003190 	.word	0x08003190
 8003158:	08003190 	.word	0x08003190
 800315c:	08003194 	.word	0x08003194

08003160 <_init>:
 8003160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003162:	bf00      	nop
 8003164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003166:	bc08      	pop	{r3}
 8003168:	469e      	mov	lr, r3
 800316a:	4770      	bx	lr

0800316c <_fini>:
 800316c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800316e:	bf00      	nop
 8003170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003172:	bc08      	pop	{r3}
 8003174:	469e      	mov	lr, r3
 8003176:	4770      	bx	lr
